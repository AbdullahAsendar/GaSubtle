import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { (short) -1, (short) 0 };
        int[] intArray4 = new int[] {};
        try {
            int[] intArray5 = huffmanTree0.create_huffman_tree(intArray3, intArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray4);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        try {
            int int13 = huffmanTree0.search_for_value(intArray9, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        try {
            int int8 = huffmanTree0.search_for_value(intArray6, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        int[] intArray38 = new int[] { 4 };
        int int40 = huffmanTree23.search_for_value(intArray38, 4);
        java.lang.Class<?> wildcardClass41 = intArray38.getClass();
        try {
            int int43 = huffmanTree0.search_for_value(intArray38, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray15 = new int[] { 4 };
        int int17 = huffmanTree0.search_for_value(intArray15, 4);
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int[] intArray31 = huffmanTree18.expand_array(intArray27, (int) (short) 1);
        try {
            int int33 = huffmanTree0.search_for_value(intArray31, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        try {
            int[] intArray28 = huffmanTree0.expand_array(intArray26, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        java.lang.Class<?> wildcardClass3 = huffmanTree2.getClass();
        HuffmanTree huffmanTree4 = new HuffmanTree();
        int[] intArray7 = new int[] { '4', (byte) 10 };
        int[] intArray9 = huffmanTree4.expand_array(intArray7, (-1));
        java.lang.Class<?> wildcardClass10 = huffmanTree4.getClass();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        int[] intArray14 = new int[] { '4', (byte) 10 };
        int[] intArray16 = huffmanTree11.expand_array(intArray14, (-1));
        int[] intArray22 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int24 = huffmanTree11.search_for_value(intArray22, 0);
        int int26 = huffmanTree4.search_for_value(intArray22, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        int[] intArray40 = huffmanTree27.expand_array(intArray36, (int) (short) 1);
        int[] intArray42 = new int[] { 4 };
        int int44 = huffmanTree27.search_for_value(intArray42, 4);
        int[] intArray45 = huffmanTree2.create_huffman_tree(intArray22, intArray42);
        try {
            int[] intArray47 = huffmanTree0.expand_array(intArray42, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray45);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray14 = huffmanTree1.expand_array(intArray10, (int) (short) 1);
        try {
            int int16 = huffmanTree0.search_for_value(intArray10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray54 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int56 = huffmanTree43.search_for_value(intArray54, 0);
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int[] intArray68 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int70 = huffmanTree57.search_for_value(intArray68, 0);
        HuffmanTree huffmanTree71 = new HuffmanTree();
        int[] intArray74 = new int[] { '4', (byte) 10 };
        int[] intArray76 = huffmanTree71.expand_array(intArray74, (-1));
        int[] intArray77 = huffmanTree43.create_huffman_tree(intArray68, intArray74);
        try {
            int[] intArray79 = huffmanTree0.expand_array(intArray77, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        int int17 = huffmanTree9.search_for_value(intArray15, (int) (short) 10);
        try {
            int[] intArray19 = huffmanTree0.expand_array(intArray15, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray22 = huffmanTree9.expand_array(intArray18, (int) (short) 1);
        int[] intArray24 = new int[] { 4 };
        int int26 = huffmanTree9.search_for_value(intArray24, 4);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        java.lang.Class<?> wildcardClass35 = huffmanTree29.getClass();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray47 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int49 = huffmanTree36.search_for_value(intArray47, 0);
        int int51 = huffmanTree29.search_for_value(intArray47, 0);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int[] intArray65 = huffmanTree52.expand_array(intArray61, (int) (short) 1);
        int[] intArray67 = new int[] { 4 };
        int int69 = huffmanTree52.search_for_value(intArray67, 4);
        int[] intArray70 = huffmanTree27.create_huffman_tree(intArray47, intArray67);
        try {
            int[] intArray71 = huffmanTree0.create_huffman_tree(intArray24, intArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray54 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int56 = huffmanTree43.search_for_value(intArray54, 0);
        try {
            int[] intArray58 = huffmanTree0.expand_array(intArray54, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int[] intArray12 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int14 = huffmanTree1.search_for_value(intArray12, 0);
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray26 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int28 = huffmanTree15.search_for_value(intArray26, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray35 = huffmanTree1.create_huffman_tree(intArray26, intArray32);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray46 = new int[] { '4', '#', 0, 4 };
        int[] intArray48 = huffmanTree36.expand_array(intArray46, 0);
        try {
            int[] intArray49 = huffmanTree0.create_huffman_tree(intArray35, intArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        java.lang.Class<?> wildcardClass8 = huffmanTree2.getClass();
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        int int24 = huffmanTree2.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        HuffmanTree huffmanTree31 = new HuffmanTree();
        int[] intArray34 = new int[] { '4', (byte) 10 };
        int[] intArray36 = huffmanTree31.expand_array(intArray34, (-1));
        int[] intArray38 = huffmanTree25.expand_array(intArray34, (int) (short) 1);
        int[] intArray40 = new int[] { 4 };
        int int42 = huffmanTree25.search_for_value(intArray40, 4);
        int[] intArray43 = huffmanTree0.create_huffman_tree(intArray20, intArray40);
        HuffmanTree huffmanTree44 = new HuffmanTree();
        java.lang.Class<?> wildcardClass45 = huffmanTree44.getClass();
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int int53 = huffmanTree44.search_for_value(intArray49, (int) (byte) 10);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray67 = huffmanTree54.expand_array(intArray63, (int) (short) 1);
        int[] intArray69 = new int[] { 4 };
        int int71 = huffmanTree54.search_for_value(intArray69, 4);
        java.lang.Class<?> wildcardClass72 = intArray69.getClass();
        try {
            int[] intArray73 = huffmanTree0.create_huffman_tree(intArray49, intArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        java.lang.Class<?> wildcardClass13 = huffmanTree7.getClass();
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        int int29 = huffmanTree7.search_for_value(intArray25, 0);
        try {
            int int31 = huffmanTree0.search_for_value(intArray25, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray46 = huffmanTree33.expand_array(intArray42, (int) (short) 1);
        try {
            int[] intArray48 = huffmanTree0.expand_array(intArray46, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        int[] intArray23 = huffmanTree10.expand_array(intArray19, (int) (short) 1);
        HuffmanTree huffmanTree24 = new HuffmanTree();
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        int int32 = huffmanTree24.search_for_value(intArray30, (int) (short) 10);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        int[] intArray43 = new int[] { '4', '#', 0, 4 };
        int[] intArray45 = huffmanTree33.expand_array(intArray43, 0);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        HuffmanTree huffmanTree47 = new HuffmanTree();
        int[] intArray50 = new int[] { '4', (byte) 10 };
        int[] intArray52 = huffmanTree47.expand_array(intArray50, (-1));
        int int54 = huffmanTree46.search_for_value(intArray52, (int) (short) 10);
        java.lang.Class<?> wildcardClass55 = intArray52.getClass();
        int[] intArray56 = huffmanTree24.create_huffman_tree(intArray43, intArray52);
        try {
            int[] intArray57 = huffmanTree0.create_huffman_tree(intArray19, intArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(intArray56);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int int15 = huffmanTree7.search_for_value(intArray13, (int) (short) 10);
        java.lang.Class<?> wildcardClass16 = intArray13.getClass();
        try {
            int[] intArray18 = huffmanTree0.expand_array(intArray13, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray39 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int41 = huffmanTree28.search_for_value(intArray39, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int[] intArray48 = huffmanTree14.create_huffman_tree(intArray39, intArray45);
        try {
            int int50 = huffmanTree0.search_for_value(intArray48, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        try {
            int int23 = huffmanTree0.search_for_value(intArray19, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray15 = new int[] { 4 };
        int int17 = huffmanTree0.search_for_value(intArray15, 4);
        HuffmanTree huffmanTree18 = new HuffmanTree();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int int26 = huffmanTree18.search_for_value(intArray24, (int) (short) 10);
        try {
            int[] intArray28 = huffmanTree0.expand_array(intArray24, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        java.lang.Class<?> wildcardClass43 = huffmanTree0.getClass();
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray54 = new int[] { '4', '#', 0, 4 };
        int[] intArray56 = huffmanTree44.expand_array(intArray54, 0);
        try {
            int int58 = huffmanTree0.search_for_value(intArray54, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray10 = new int[] { '4', '#', 0, 4 };
        int[] intArray12 = huffmanTree0.expand_array(intArray10, 0);
        HuffmanTree huffmanTree13 = new HuffmanTree();
        java.lang.Class<?> wildcardClass14 = huffmanTree13.getClass();
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        java.lang.Class<?> wildcardClass21 = huffmanTree15.getClass();
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray33 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int35 = huffmanTree22.search_for_value(intArray33, 0);
        int int37 = huffmanTree15.search_for_value(intArray33, 0);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray51 = huffmanTree38.expand_array(intArray47, (int) (short) 1);
        int[] intArray53 = new int[] { 4 };
        int int55 = huffmanTree38.search_for_value(intArray53, 4);
        int[] intArray56 = huffmanTree13.create_huffman_tree(intArray33, intArray53);
        try {
            int int58 = huffmanTree0.search_for_value(intArray56, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray56);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray33 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int int42 = huffmanTree34.search_for_value(intArray40, (int) (short) 10);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray53 = new int[] { '4', '#', 0, 4 };
        int[] intArray55 = huffmanTree43.expand_array(intArray53, 0);
        HuffmanTree huffmanTree56 = new HuffmanTree();
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int int64 = huffmanTree56.search_for_value(intArray62, (int) (short) 10);
        java.lang.Class<?> wildcardClass65 = intArray62.getClass();
        int[] intArray66 = huffmanTree34.create_huffman_tree(intArray53, intArray62);
        try {
            int int68 = huffmanTree0.search_for_value(intArray62, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        java.lang.Class<?> wildcardClass37 = huffmanTree36.getClass();
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        java.lang.Class<?> wildcardClass44 = huffmanTree38.getClass();
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray56 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int58 = huffmanTree45.search_for_value(intArray56, 0);
        int int60 = huffmanTree38.search_for_value(intArray56, 0);
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray74 = huffmanTree61.expand_array(intArray70, (int) (short) 1);
        int[] intArray76 = new int[] { 4 };
        int int78 = huffmanTree61.search_for_value(intArray76, 4);
        int[] intArray79 = huffmanTree36.create_huffman_tree(intArray56, intArray76);
        try {
            int int81 = huffmanTree0.search_for_value(intArray79, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray33 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int int42 = huffmanTree34.search_for_value(intArray40, (int) (short) 10);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray53 = new int[] { '4', '#', 0, 4 };
        int[] intArray55 = huffmanTree43.expand_array(intArray53, 0);
        HuffmanTree huffmanTree56 = new HuffmanTree();
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int int64 = huffmanTree56.search_for_value(intArray62, (int) (short) 10);
        java.lang.Class<?> wildcardClass65 = intArray62.getClass();
        int[] intArray66 = huffmanTree34.create_huffman_tree(intArray53, intArray62);
        int int68 = huffmanTree0.search_for_value(intArray66, 10);
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        int[] intArray82 = huffmanTree69.expand_array(intArray78, (int) (short) 1);
        int[] intArray84 = new int[] { 4 };
        int int86 = huffmanTree69.search_for_value(intArray84, 4);
        java.lang.Class<?> wildcardClass87 = intArray84.getClass();
        try {
            int[] intArray89 = huffmanTree0.expand_array(intArray84, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        java.lang.Class<?> wildcardClass15 = huffmanTree9.getClass();
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        int[] intArray27 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int29 = huffmanTree16.search_for_value(intArray27, 0);
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        int[] intArray40 = new int[] { '4', '#', 0, 4 };
        int[] intArray42 = huffmanTree30.expand_array(intArray40, 0);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray49 = huffmanTree16.create_huffman_tree(intArray40, intArray48);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        java.lang.Class<?> wildcardClass51 = huffmanTree50.getClass();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        java.lang.Class<?> wildcardClass58 = huffmanTree52.getClass();
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray70 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int72 = huffmanTree59.search_for_value(intArray70, 0);
        int int74 = huffmanTree52.search_for_value(intArray70, 0);
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        HuffmanTree huffmanTree81 = new HuffmanTree();
        int[] intArray84 = new int[] { '4', (byte) 10 };
        int[] intArray86 = huffmanTree81.expand_array(intArray84, (-1));
        int[] intArray88 = huffmanTree75.expand_array(intArray84, (int) (short) 1);
        int[] intArray90 = new int[] { 4 };
        int int92 = huffmanTree75.search_for_value(intArray90, 4);
        int[] intArray93 = huffmanTree50.create_huffman_tree(intArray70, intArray90);
        int[] intArray94 = huffmanTree9.create_huffman_tree(intArray40, intArray90);
        try {
            int[] intArray96 = huffmanTree0.expand_array(intArray94, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int[] intArray12 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int14 = huffmanTree1.search_for_value(intArray12, 0);
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray26 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int28 = huffmanTree15.search_for_value(intArray26, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray35 = huffmanTree1.create_huffman_tree(intArray26, intArray32);
        try {
            int int37 = huffmanTree0.search_for_value(intArray26, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray59 = new int[] { '4', '#', 0, 4 };
        int[] intArray61 = huffmanTree49.expand_array(intArray59, 0);
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        int[] intArray68 = huffmanTree35.create_huffman_tree(intArray59, intArray67);
        int[] intArray70 = huffmanTree0.expand_array(intArray68, (-1));
        HuffmanTree huffmanTree71 = new HuffmanTree();
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        int int79 = huffmanTree71.search_for_value(intArray77, (int) (short) 10);
        HuffmanTree huffmanTree80 = new HuffmanTree();
        int[] intArray83 = new int[] { '4', (byte) 10 };
        int[] intArray85 = huffmanTree80.expand_array(intArray83, (-1));
        HuffmanTree huffmanTree86 = new HuffmanTree();
        int[] intArray89 = new int[] { '4', (byte) 10 };
        int[] intArray91 = huffmanTree86.expand_array(intArray89, (-1));
        int[] intArray93 = huffmanTree80.expand_array(intArray89, (int) (short) 1);
        try {
            int[] intArray94 = huffmanTree0.create_huffman_tree(intArray77, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        int[] intArray23 = null;
        try {
            int[] intArray25 = huffmanTree0.expand_array(intArray23, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int[] intArray12 = new int[] { '4', '#', 0, 4 };
        int[] intArray14 = huffmanTree2.expand_array(intArray12, 0);
        try {
            int int16 = huffmanTree0.search_for_value(intArray12, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        int int45 = huffmanTree37.search_for_value(intArray43, (int) (short) 10);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray56 = new int[] { '4', '#', 0, 4 };
        int[] intArray58 = huffmanTree46.expand_array(intArray56, 0);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int int67 = huffmanTree59.search_for_value(intArray65, (int) (short) 10);
        java.lang.Class<?> wildcardClass68 = intArray65.getClass();
        int[] intArray69 = huffmanTree37.create_huffman_tree(intArray56, intArray65);
        try {
            int[] intArray71 = huffmanTree0.expand_array(intArray56, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        java.lang.Class<?> wildcardClass10 = huffmanTree9.getClass();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        int[] intArray14 = new int[] { '4', (byte) 10 };
        int[] intArray16 = huffmanTree11.expand_array(intArray14, (-1));
        java.lang.Class<?> wildcardClass17 = huffmanTree11.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        int[] intArray29 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int31 = huffmanTree18.search_for_value(intArray29, 0);
        int int33 = huffmanTree11.search_for_value(intArray29, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray47 = huffmanTree34.expand_array(intArray43, (int) (short) 1);
        int[] intArray49 = new int[] { 4 };
        int int51 = huffmanTree34.search_for_value(intArray49, 4);
        int[] intArray52 = huffmanTree9.create_huffman_tree(intArray29, intArray49);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray66 = huffmanTree53.expand_array(intArray62, (int) (short) 1);
        int[] intArray68 = new int[] { 4 };
        int int70 = huffmanTree53.search_for_value(intArray68, 4);
        java.lang.Class<?> wildcardClass71 = intArray68.getClass();
        int[] intArray72 = huffmanTree0.create_huffman_tree(intArray29, intArray68);
        int[] intArray73 = new int[] {};
        try {
            int[] intArray75 = huffmanTree0.expand_array(intArray73, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        int int17 = huffmanTree9.search_for_value(intArray15, (int) (short) 10);
        try {
            int int19 = huffmanTree0.search_for_value(intArray15, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        HuffmanTree huffmanTree34 = new HuffmanTree();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int int42 = huffmanTree34.search_for_value(intArray40, (int) (short) 10);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray53 = new int[] { '4', '#', 0, 4 };
        int[] intArray55 = huffmanTree43.expand_array(intArray53, 0);
        HuffmanTree huffmanTree56 = new HuffmanTree();
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int int64 = huffmanTree56.search_for_value(intArray62, (int) (short) 10);
        java.lang.Class<?> wildcardClass65 = intArray62.getClass();
        int[] intArray66 = huffmanTree34.create_huffman_tree(intArray53, intArray62);
        try {
            int[] intArray68 = huffmanTree0.expand_array(intArray62, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        java.lang.Class<?> wildcardClass15 = huffmanTree14.getClass();
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        java.lang.Class<?> wildcardClass22 = huffmanTree16.getClass();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray34 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int36 = huffmanTree23.search_for_value(intArray34, 0);
        int int38 = huffmanTree16.search_for_value(intArray34, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray52 = huffmanTree39.expand_array(intArray48, (int) (short) 1);
        int[] intArray54 = new int[] { 4 };
        int int56 = huffmanTree39.search_for_value(intArray54, 4);
        int[] intArray57 = huffmanTree14.create_huffman_tree(intArray34, intArray54);
        int[] intArray59 = huffmanTree0.expand_array(intArray54, (int) (short) 1);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray71 = new int[] { '4', '#', 0, 4 };
        int[] intArray73 = huffmanTree61.expand_array(intArray71, 0);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray84 = new int[] { '4', '#', 0, 4 };
        int[] intArray86 = huffmanTree74.expand_array(intArray84, 0);
        int[] intArray87 = huffmanTree60.create_huffman_tree(intArray71, intArray86);
        try {
            int[] intArray89 = huffmanTree0.expand_array(intArray71, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        java.lang.Class<?> wildcardClass2 = huffmanTree1.getClass();
        HuffmanTree huffmanTree3 = new HuffmanTree();
        int[] intArray6 = new int[] { '4', (byte) 10 };
        int[] intArray8 = huffmanTree3.expand_array(intArray6, (-1));
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray34 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int36 = huffmanTree23.search_for_value(intArray34, 0);
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        int[] intArray43 = huffmanTree9.create_huffman_tree(intArray34, intArray40);
        int[] intArray45 = huffmanTree3.expand_array(intArray34, (int) (byte) 1);
        int[] intArray47 = huffmanTree1.expand_array(intArray34, (int) (short) 0);
        try {
            int[] intArray49 = huffmanTree0.expand_array(intArray47, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int int22 = huffmanTree14.search_for_value(intArray20, (int) (short) 10);
        java.lang.Class<?> wildcardClass23 = intArray20.getClass();
        int[] intArray28 = new int[] { 10, 100, (short) 1, (byte) 100 };
        try {
            int[] intArray29 = huffmanTree0.create_huffman_tree(intArray20, intArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(intArray28);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        java.lang.Class<?> wildcardClass3 = huffmanTree2.getClass();
        HuffmanTree huffmanTree4 = new HuffmanTree();
        int[] intArray7 = new int[] { '4', (byte) 10 };
        int[] intArray9 = huffmanTree4.expand_array(intArray7, (-1));
        java.lang.Class<?> wildcardClass10 = huffmanTree4.getClass();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        int[] intArray14 = new int[] { '4', (byte) 10 };
        int[] intArray16 = huffmanTree11.expand_array(intArray14, (-1));
        int[] intArray22 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int24 = huffmanTree11.search_for_value(intArray22, 0);
        int int26 = huffmanTree4.search_for_value(intArray22, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        int[] intArray40 = huffmanTree27.expand_array(intArray36, (int) (short) 1);
        int[] intArray42 = new int[] { 4 };
        int int44 = huffmanTree27.search_for_value(intArray42, 4);
        int[] intArray45 = huffmanTree2.create_huffman_tree(intArray22, intArray42);
        try {
            int int47 = huffmanTree0.search_for_value(intArray42, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray45);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int[] intArray11 = new int[] { '4', '#', 0, 4 };
        int[] intArray13 = huffmanTree1.expand_array(intArray11, 0);
        try {
            int[] intArray15 = huffmanTree0.expand_array(intArray11, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        java.lang.Class<?> wildcardClass8 = huffmanTree7.getClass();
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray26 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int28 = huffmanTree15.search_for_value(intArray26, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray40 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int42 = huffmanTree29.search_for_value(intArray40, 0);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray49 = huffmanTree15.create_huffman_tree(intArray40, intArray46);
        int[] intArray51 = huffmanTree9.expand_array(intArray40, (int) (byte) 1);
        int[] intArray53 = huffmanTree7.expand_array(intArray40, (int) (short) 0);
        try {
            int[] intArray55 = huffmanTree0.expand_array(intArray40, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray38 = new int[] { '4', '#', 0, 4 };
        int[] intArray40 = huffmanTree28.expand_array(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray47 = huffmanTree14.create_huffman_tree(intArray38, intArray46);
        try {
            int int49 = huffmanTree0.search_for_value(intArray46, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray33 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray51 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int53 = huffmanTree40.search_for_value(intArray51, 0);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray65 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int67 = huffmanTree54.search_for_value(intArray65, 0);
        HuffmanTree huffmanTree68 = new HuffmanTree();
        int[] intArray71 = new int[] { '4', (byte) 10 };
        int[] intArray73 = huffmanTree68.expand_array(intArray71, (-1));
        int[] intArray74 = huffmanTree40.create_huffman_tree(intArray65, intArray71);
        int[] intArray76 = huffmanTree34.expand_array(intArray65, (int) (byte) 1);
        try {
            int int78 = huffmanTree0.search_for_value(intArray76, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        try {
            int int9 = huffmanTree0.search_for_value(intArray7, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        java.lang.Class<?> wildcardClass34 = huffmanTree33.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int int42 = huffmanTree33.search_for_value(intArray38, (int) (byte) 10);
        int int44 = huffmanTree0.search_for_value(intArray38, (int) (short) 10);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray56 = new int[] { '4', '#', 0, 4 };
        int[] intArray58 = huffmanTree46.expand_array(intArray56, 0);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray69 = new int[] { '4', '#', 0, 4 };
        int[] intArray71 = huffmanTree59.expand_array(intArray69, 0);
        int[] intArray72 = huffmanTree45.create_huffman_tree(intArray56, intArray71);
        int int74 = huffmanTree0.search_for_value(intArray56, 4);
        int[] intArray80 = new int[] { (byte) -1, (short) -1, '4', '#', 100 };
        HuffmanTree huffmanTree81 = new HuffmanTree();
        int[] intArray84 = new int[] { '4', (byte) 10 };
        int[] intArray86 = huffmanTree81.expand_array(intArray84, (-1));
        int[] intArray91 = new int[] { '4', '#', 0, 4 };
        int[] intArray93 = huffmanTree81.expand_array(intArray91, 0);
        try {
            int[] intArray94 = huffmanTree0.create_huffman_tree(intArray80, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray15 = new int[] { 4 };
        int int17 = huffmanTree0.search_for_value(intArray15, 4);
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int[] intArray31 = huffmanTree18.expand_array(intArray27, (int) (short) 1);
        int[] intArray33 = new int[] { 4 };
        int int35 = huffmanTree18.search_for_value(intArray33, 4);
        java.lang.Class<?> wildcardClass36 = intArray33.getClass();
        try {
            int int38 = huffmanTree0.search_for_value(intArray33, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        java.lang.Class<?> wildcardClass10 = huffmanTree9.getClass();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        int[] intArray14 = new int[] { '4', (byte) 10 };
        int[] intArray16 = huffmanTree11.expand_array(intArray14, (-1));
        java.lang.Class<?> wildcardClass17 = huffmanTree11.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        int[] intArray29 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int31 = huffmanTree18.search_for_value(intArray29, 0);
        int int33 = huffmanTree11.search_for_value(intArray29, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray47 = huffmanTree34.expand_array(intArray43, (int) (short) 1);
        int[] intArray49 = new int[] { 4 };
        int int51 = huffmanTree34.search_for_value(intArray49, 4);
        int[] intArray52 = huffmanTree9.create_huffman_tree(intArray29, intArray49);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray66 = huffmanTree53.expand_array(intArray62, (int) (short) 1);
        int[] intArray68 = new int[] { 4 };
        int int70 = huffmanTree53.search_for_value(intArray68, 4);
        java.lang.Class<?> wildcardClass71 = intArray68.getClass();
        int[] intArray72 = huffmanTree0.create_huffman_tree(intArray29, intArray68);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        HuffmanTree huffmanTree79 = new HuffmanTree();
        int[] intArray82 = new int[] { '4', (byte) 10 };
        int[] intArray84 = huffmanTree79.expand_array(intArray82, (-1));
        int[] intArray89 = new int[] { '4', '#', 0, 4 };
        int[] intArray91 = huffmanTree79.expand_array(intArray89, 0);
        try {
            int[] intArray92 = huffmanTree0.create_huffman_tree(intArray78, intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray15 = new int[] { 4 };
        int int17 = huffmanTree0.search_for_value(intArray15, 4);
        HuffmanTree huffmanTree18 = new HuffmanTree();
        java.lang.Class<?> wildcardClass19 = huffmanTree18.getClass();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        java.lang.Class<?> wildcardClass26 = huffmanTree20.getClass();
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray38 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int40 = huffmanTree27.search_for_value(intArray38, 0);
        int int42 = huffmanTree20.search_for_value(intArray38, 0);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray56 = huffmanTree43.expand_array(intArray52, (int) (short) 1);
        int[] intArray58 = new int[] { 4 };
        int int60 = huffmanTree43.search_for_value(intArray58, 4);
        int[] intArray61 = huffmanTree18.create_huffman_tree(intArray38, intArray58);
        java.lang.Class<?> wildcardClass62 = intArray58.getClass();
        java.lang.Class<?> wildcardClass63 = intArray58.getClass();
        try {
            int int65 = huffmanTree0.search_for_value(intArray58, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        int[] intArray48 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int50 = huffmanTree37.search_for_value(intArray48, 0);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int[] intArray61 = new int[] { '4', '#', 0, 4 };
        int[] intArray63 = huffmanTree51.expand_array(intArray61, 0);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int[] intArray70 = huffmanTree37.create_huffman_tree(intArray61, intArray69);
        HuffmanTree huffmanTree71 = new HuffmanTree();
        int[] intArray74 = new int[] { '4', (byte) 10 };
        int[] intArray76 = huffmanTree71.expand_array(intArray74, (-1));
        try {
            int[] intArray77 = huffmanTree0.create_huffman_tree(intArray69, intArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int int26 = huffmanTree18.search_for_value(intArray24, (int) (short) 10);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray37 = new int[] { '4', '#', 0, 4 };
        int[] intArray39 = huffmanTree27.expand_array(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int int48 = huffmanTree40.search_for_value(intArray46, (int) (short) 10);
        java.lang.Class<?> wildcardClass49 = intArray46.getClass();
        int[] intArray50 = huffmanTree18.create_huffman_tree(intArray37, intArray46);
        try {
            int[] intArray52 = huffmanTree0.expand_array(intArray50, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(intArray50);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        java.lang.Class<?> wildcardClass34 = huffmanTree33.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int int42 = huffmanTree33.search_for_value(intArray38, (int) (byte) 10);
        int int44 = huffmanTree0.search_for_value(intArray38, (int) (short) 10);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray56 = new int[] { '4', '#', 0, 4 };
        int[] intArray58 = huffmanTree46.expand_array(intArray56, 0);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray69 = new int[] { '4', '#', 0, 4 };
        int[] intArray71 = huffmanTree59.expand_array(intArray69, 0);
        int[] intArray72 = huffmanTree45.create_huffman_tree(intArray56, intArray71);
        int int74 = huffmanTree0.search_for_value(intArray56, 4);
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        java.lang.Class<?> wildcardClass81 = huffmanTree75.getClass();
        HuffmanTree huffmanTree82 = new HuffmanTree();
        int[] intArray85 = new int[] { '4', (byte) 10 };
        int[] intArray87 = huffmanTree82.expand_array(intArray85, (-1));
        int[] intArray93 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int95 = huffmanTree82.search_for_value(intArray93, 0);
        int int97 = huffmanTree75.search_for_value(intArray93, 0);
        int[] intArray99 = huffmanTree0.expand_array(intArray93, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 4 + "'", int97 == 4);
        org.junit.Assert.assertNotNull(intArray99);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        int[] intArray21 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int23 = huffmanTree10.search_for_value(intArray21, 0);
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        int[] intArray41 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int43 = huffmanTree30.search_for_value(intArray41, 0);
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray55 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int57 = huffmanTree44.search_for_value(intArray55, 0);
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int[] intArray64 = huffmanTree30.create_huffman_tree(intArray55, intArray61);
        int[] intArray66 = huffmanTree24.expand_array(intArray55, (int) (byte) 1);
        java.lang.Class<?> wildcardClass67 = intArray55.getClass();
        HuffmanTree huffmanTree68 = new HuffmanTree();
        int[] intArray71 = new int[] { '4', (byte) 10 };
        int[] intArray73 = huffmanTree68.expand_array(intArray71, (-1));
        int[] intArray79 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int81 = huffmanTree68.search_for_value(intArray79, 0);
        java.lang.Class<?> wildcardClass82 = intArray79.getClass();
        int[] intArray83 = huffmanTree10.create_huffman_tree(intArray55, intArray79);
        HuffmanTree huffmanTree84 = new HuffmanTree();
        HuffmanTree huffmanTree85 = new HuffmanTree();
        int[] intArray88 = new int[] { '4', (byte) 10 };
        int[] intArray90 = huffmanTree85.expand_array(intArray88, (-1));
        int int92 = huffmanTree84.search_for_value(intArray90, (int) (short) 10);
        java.lang.Class<?> wildcardClass93 = intArray90.getClass();
        int[] intArray94 = huffmanTree9.create_huffman_tree(intArray83, intArray90);
        try {
            int[] intArray96 = huffmanTree0.expand_array(intArray94, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        int[] intArray37 = null;
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        int[] intArray49 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int51 = huffmanTree38.search_for_value(intArray49, 0);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray62 = new int[] { '4', '#', 0, 4 };
        int[] intArray64 = huffmanTree52.expand_array(intArray62, 0);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int[] intArray71 = huffmanTree38.create_huffman_tree(intArray62, intArray70);
        try {
            int[] intArray72 = huffmanTree0.create_huffman_tree(intArray37, intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray59 = new int[] { '4', '#', 0, 4 };
        int[] intArray61 = huffmanTree49.expand_array(intArray59, 0);
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        int[] intArray68 = huffmanTree35.create_huffman_tree(intArray59, intArray67);
        java.lang.Class<?> wildcardClass69 = intArray59.getClass();
        try {
            int[] intArray71 = huffmanTree0.expand_array(intArray59, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray15 = huffmanTree2.expand_array(intArray11, (int) (short) 1);
        int[] intArray17 = new int[] { 4 };
        int int19 = huffmanTree2.search_for_value(intArray17, 4);
        java.lang.Class<?> wildcardClass20 = intArray17.getClass();
        HuffmanTree huffmanTree21 = new HuffmanTree();
        java.lang.Class<?> wildcardClass22 = huffmanTree21.getClass();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        java.lang.Class<?> wildcardClass29 = huffmanTree23.getClass();
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        int[] intArray41 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int43 = huffmanTree30.search_for_value(intArray41, 0);
        int int45 = huffmanTree23.search_for_value(intArray41, 0);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray59 = huffmanTree46.expand_array(intArray55, (int) (short) 1);
        int[] intArray61 = new int[] { 4 };
        int int63 = huffmanTree46.search_for_value(intArray61, 4);
        int[] intArray64 = huffmanTree21.create_huffman_tree(intArray41, intArray61);
        java.lang.Class<?> wildcardClass65 = intArray64.getClass();
        try {
            int[] intArray66 = huffmanTree0.create_huffman_tree(intArray17, intArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        int[] intArray2 = null;
        HuffmanTree huffmanTree3 = new HuffmanTree();
        int[] intArray6 = new int[] { '4', (byte) 10 };
        int[] intArray8 = huffmanTree3.expand_array(intArray6, (-1));
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray40 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int42 = huffmanTree29.search_for_value(intArray40, 0);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray54 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int56 = huffmanTree43.search_for_value(intArray54, 0);
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int[] intArray63 = huffmanTree29.create_huffman_tree(intArray54, intArray60);
        int[] intArray65 = huffmanTree23.expand_array(intArray54, (int) (byte) 1);
        java.lang.Class<?> wildcardClass66 = intArray54.getClass();
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray78 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int80 = huffmanTree67.search_for_value(intArray78, 0);
        java.lang.Class<?> wildcardClass81 = intArray78.getClass();
        int[] intArray82 = huffmanTree9.create_huffman_tree(intArray54, intArray78);
        int[] intArray84 = huffmanTree3.expand_array(intArray78, 0);
        try {
            int[] intArray85 = huffmanTree0.create_huffman_tree(intArray2, intArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 4 + "'", int80 == 4);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        int[] intArray31 = new int[] { '4', '#', 0, 4 };
        int[] intArray33 = huffmanTree21.expand_array(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree7.create_huffman_tree(intArray31, intArray39);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        java.lang.Class<?> wildcardClass42 = huffmanTree41.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        java.lang.Class<?> wildcardClass49 = huffmanTree43.getClass();
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray61 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int63 = huffmanTree50.search_for_value(intArray61, 0);
        int int65 = huffmanTree43.search_for_value(intArray61, 0);
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        int[] intArray79 = huffmanTree66.expand_array(intArray75, (int) (short) 1);
        int[] intArray81 = new int[] { 4 };
        int int83 = huffmanTree66.search_for_value(intArray81, 4);
        int[] intArray84 = huffmanTree41.create_huffman_tree(intArray61, intArray81);
        int[] intArray85 = huffmanTree0.create_huffman_tree(intArray31, intArray81);
        int[] intArray86 = null;
        try {
            int int88 = huffmanTree0.search_for_value(intArray86, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        int[] intArray21 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int23 = huffmanTree10.search_for_value(intArray21, 0);
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int[] intArray35 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int37 = huffmanTree24.search_for_value(intArray35, 0);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        int[] intArray44 = huffmanTree10.create_huffman_tree(intArray35, intArray41);
        try {
            int int46 = huffmanTree0.search_for_value(intArray41, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray45 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int47 = huffmanTree34.search_for_value(intArray45, 0);
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray54 = huffmanTree20.create_huffman_tree(intArray45, intArray51);
        int[] intArray56 = huffmanTree14.expand_array(intArray45, (int) (byte) 1);
        java.lang.Class<?> wildcardClass57 = intArray45.getClass();
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int[] intArray69 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int71 = huffmanTree58.search_for_value(intArray69, 0);
        java.lang.Class<?> wildcardClass72 = intArray69.getClass();
        int[] intArray73 = huffmanTree0.create_huffman_tree(intArray45, intArray69);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray81 = huffmanTree0.expand_array(intArray77, (int) (short) 1);
        HuffmanTree huffmanTree82 = new HuffmanTree();
        int[] intArray85 = new int[] { '4', (byte) 10 };
        int[] intArray87 = huffmanTree82.expand_array(intArray85, (-1));
        try {
            int int89 = huffmanTree0.search_for_value(intArray87, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray45 = new int[] { '4', '#', 0, 4 };
        int[] intArray47 = huffmanTree35.expand_array(intArray45, 0);
        java.lang.Class<?> wildcardClass48 = intArray47.getClass();
        int[] intArray50 = huffmanTree0.expand_array(intArray47, (int) (byte) -1);
        int[] intArray51 = null;
        try {
            int int53 = huffmanTree0.search_for_value(intArray51, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(intArray50);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray33 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int int42 = huffmanTree34.search_for_value(intArray40, (int) (short) 10);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray53 = new int[] { '4', '#', 0, 4 };
        int[] intArray55 = huffmanTree43.expand_array(intArray53, 0);
        HuffmanTree huffmanTree56 = new HuffmanTree();
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int int64 = huffmanTree56.search_for_value(intArray62, (int) (short) 10);
        java.lang.Class<?> wildcardClass65 = intArray62.getClass();
        int[] intArray66 = huffmanTree34.create_huffman_tree(intArray53, intArray62);
        int int68 = huffmanTree0.search_for_value(intArray66, 10);
        int[] intArray69 = null;
        try {
            int int71 = huffmanTree0.search_for_value(intArray69, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        int[] intArray48 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int50 = huffmanTree37.search_for_value(intArray48, 0);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int[] intArray62 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int64 = huffmanTree51.search_for_value(intArray62, 0);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int[] intArray71 = huffmanTree37.create_huffman_tree(intArray62, intArray68);
        try {
            int[] intArray73 = huffmanTree0.expand_array(intArray71, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int[] intArray13 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int15 = huffmanTree2.search_for_value(intArray13, 0);
        try {
            int[] intArray17 = huffmanTree0.expand_array(intArray13, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        java.lang.Class<?> wildcardClass15 = huffmanTree9.getClass();
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        int[] intArray27 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int29 = huffmanTree16.search_for_value(intArray27, 0);
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        int[] intArray40 = new int[] { '4', '#', 0, 4 };
        int[] intArray42 = huffmanTree30.expand_array(intArray40, 0);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray49 = huffmanTree16.create_huffman_tree(intArray40, intArray48);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        java.lang.Class<?> wildcardClass51 = huffmanTree50.getClass();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        java.lang.Class<?> wildcardClass58 = huffmanTree52.getClass();
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray70 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int72 = huffmanTree59.search_for_value(intArray70, 0);
        int int74 = huffmanTree52.search_for_value(intArray70, 0);
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        HuffmanTree huffmanTree81 = new HuffmanTree();
        int[] intArray84 = new int[] { '4', (byte) 10 };
        int[] intArray86 = huffmanTree81.expand_array(intArray84, (-1));
        int[] intArray88 = huffmanTree75.expand_array(intArray84, (int) (short) 1);
        int[] intArray90 = new int[] { 4 };
        int int92 = huffmanTree75.search_for_value(intArray90, 4);
        int[] intArray93 = huffmanTree50.create_huffman_tree(intArray70, intArray90);
        int[] intArray94 = huffmanTree9.create_huffman_tree(intArray40, intArray90);
        try {
            int int96 = huffmanTree0.search_for_value(intArray90, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass7 = huffmanTree0.getClass();
        HuffmanTree huffmanTree8 = new HuffmanTree();
        java.lang.Class<?> wildcardClass9 = huffmanTree8.getClass();
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        java.lang.Class<?> wildcardClass16 = huffmanTree10.getClass();
        HuffmanTree huffmanTree17 = new HuffmanTree();
        int[] intArray20 = new int[] { '4', (byte) 10 };
        int[] intArray22 = huffmanTree17.expand_array(intArray20, (-1));
        int[] intArray28 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int30 = huffmanTree17.search_for_value(intArray28, 0);
        int int32 = huffmanTree10.search_for_value(intArray28, 0);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray46 = huffmanTree33.expand_array(intArray42, (int) (short) 1);
        int[] intArray48 = new int[] { 4 };
        int int50 = huffmanTree33.search_for_value(intArray48, 4);
        int[] intArray51 = huffmanTree8.create_huffman_tree(intArray28, intArray48);
        try {
            int int53 = huffmanTree0.search_for_value(intArray51, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray51);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray59 = new int[] { '4', '#', 0, 4 };
        int[] intArray61 = huffmanTree49.expand_array(intArray59, 0);
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        int[] intArray68 = huffmanTree35.create_huffman_tree(intArray59, intArray67);
        int[] intArray70 = huffmanTree0.expand_array(intArray68, (-1));
        int[] intArray71 = null;
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        try {
            int[] intArray78 = huffmanTree0.create_huffman_tree(intArray71, intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        java.lang.Class<?> wildcardClass34 = huffmanTree33.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int int42 = huffmanTree33.search_for_value(intArray38, (int) (byte) 10);
        int int44 = huffmanTree0.search_for_value(intArray38, (int) (short) 10);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int[] intArray58 = huffmanTree45.expand_array(intArray54, (int) (short) 1);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int[] intArray72 = huffmanTree59.expand_array(intArray68, (int) (short) 1);
        try {
            int[] intArray73 = huffmanTree0.create_huffman_tree(intArray58, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        try {
            int int42 = huffmanTree0.search_for_value(intArray37, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        java.lang.Class<?> wildcardClass8 = huffmanTree2.getClass();
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        int int24 = huffmanTree2.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        HuffmanTree huffmanTree31 = new HuffmanTree();
        int[] intArray34 = new int[] { '4', (byte) 10 };
        int[] intArray36 = huffmanTree31.expand_array(intArray34, (-1));
        int[] intArray38 = huffmanTree25.expand_array(intArray34, (int) (short) 1);
        int[] intArray40 = new int[] { 4 };
        int int42 = huffmanTree25.search_for_value(intArray40, 4);
        int[] intArray43 = huffmanTree0.create_huffman_tree(intArray20, intArray40);
        int[] intArray44 = null;
        try {
            int int46 = huffmanTree0.search_for_value(intArray44, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray43);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray39 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int41 = huffmanTree28.search_for_value(intArray39, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int[] intArray48 = huffmanTree14.create_huffman_tree(intArray39, intArray45);
        java.lang.Class<?> wildcardClass49 = huffmanTree14.getClass();
        java.lang.Class<?> wildcardClass50 = huffmanTree14.getClass();
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int[] intArray64 = huffmanTree51.expand_array(intArray60, (int) (short) 1);
        java.lang.Class<?> wildcardClass65 = intArray60.getClass();
        int[] intArray67 = huffmanTree14.expand_array(intArray60, (int) (short) 1);
        int[] intArray68 = null;
        try {
            int[] intArray69 = huffmanTree0.create_huffman_tree(intArray60, intArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        java.lang.Class<?> wildcardClass10 = huffmanTree0.getClass();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        HuffmanTree huffmanTree12 = new HuffmanTree();
        int[] intArray15 = new int[] { '4', (byte) 10 };
        int[] intArray17 = huffmanTree12.expand_array(intArray15, (-1));
        int int19 = huffmanTree11.search_for_value(intArray17, (int) (short) 10);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        java.lang.Class<?> wildcardClass21 = huffmanTree20.getClass();
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        java.lang.Class<?> wildcardClass28 = huffmanTree22.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray40 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int42 = huffmanTree29.search_for_value(intArray40, 0);
        int int44 = huffmanTree22.search_for_value(intArray40, 0);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int[] intArray58 = huffmanTree45.expand_array(intArray54, (int) (short) 1);
        int[] intArray60 = new int[] { 4 };
        int int62 = huffmanTree45.search_for_value(intArray60, 4);
        int[] intArray63 = huffmanTree20.create_huffman_tree(intArray40, intArray60);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        HuffmanTree huffmanTree70 = new HuffmanTree();
        int[] intArray73 = new int[] { '4', (byte) 10 };
        int[] intArray75 = huffmanTree70.expand_array(intArray73, (-1));
        int[] intArray77 = huffmanTree64.expand_array(intArray73, (int) (short) 1);
        int[] intArray79 = new int[] { 4 };
        int int81 = huffmanTree64.search_for_value(intArray79, 4);
        java.lang.Class<?> wildcardClass82 = intArray79.getClass();
        int[] intArray83 = huffmanTree11.create_huffman_tree(intArray40, intArray79);
        try {
            int int85 = huffmanTree0.search_for_value(intArray79, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass34 = huffmanTree0.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray46 = new int[] { '4', '#', 0, 4 };
        int[] intArray48 = huffmanTree36.expand_array(intArray46, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray59 = new int[] { '4', '#', 0, 4 };
        int[] intArray61 = huffmanTree49.expand_array(intArray59, 0);
        int[] intArray62 = huffmanTree35.create_huffman_tree(intArray46, intArray61);
        try {
            int int64 = huffmanTree0.search_for_value(intArray62, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray51 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int53 = huffmanTree40.search_for_value(intArray51, 0);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray65 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int67 = huffmanTree54.search_for_value(intArray65, 0);
        HuffmanTree huffmanTree68 = new HuffmanTree();
        int[] intArray71 = new int[] { '4', (byte) 10 };
        int[] intArray73 = huffmanTree68.expand_array(intArray71, (-1));
        int[] intArray74 = huffmanTree40.create_huffman_tree(intArray65, intArray71);
        int[] intArray76 = huffmanTree34.expand_array(intArray65, (int) (byte) 1);
        int int78 = huffmanTree0.search_for_value(intArray76, 0);
        java.lang.Class<?> wildcardClass79 = huffmanTree0.getClass();
        HuffmanTree huffmanTree80 = new HuffmanTree();
        java.lang.Class<?> wildcardClass81 = huffmanTree80.getClass();
        HuffmanTree huffmanTree82 = new HuffmanTree();
        int[] intArray85 = new int[] { '4', (byte) 10 };
        int[] intArray87 = huffmanTree82.expand_array(intArray85, (-1));
        int int89 = huffmanTree80.search_for_value(intArray85, (int) (byte) 10);
        java.lang.Class<?> wildcardClass90 = intArray85.getClass();
        java.lang.Class<?> wildcardClass91 = intArray85.getClass();
        try {
            int int93 = huffmanTree0.search_for_value(intArray85, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        int[] intArray23 = huffmanTree10.expand_array(intArray19, (int) (short) 1);
        int[] intArray25 = new int[] { 4 };
        int int27 = huffmanTree10.search_for_value(intArray25, 4);
        java.lang.Class<?> wildcardClass28 = intArray25.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        java.lang.Class<?> wildcardClass30 = huffmanTree29.getClass();
        HuffmanTree huffmanTree31 = new HuffmanTree();
        int[] intArray34 = new int[] { '4', (byte) 10 };
        int[] intArray36 = huffmanTree31.expand_array(intArray34, (-1));
        java.lang.Class<?> wildcardClass37 = huffmanTree31.getClass();
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        int[] intArray49 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int51 = huffmanTree38.search_for_value(intArray49, 0);
        int int53 = huffmanTree31.search_for_value(intArray49, 0);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray67 = huffmanTree54.expand_array(intArray63, (int) (short) 1);
        int[] intArray69 = new int[] { 4 };
        int int71 = huffmanTree54.search_for_value(intArray69, 4);
        int[] intArray72 = huffmanTree29.create_huffman_tree(intArray49, intArray69);
        java.lang.Class<?> wildcardClass73 = intArray72.getClass();
        try {
            int[] intArray74 = huffmanTree0.create_huffman_tree(intArray25, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray51 = huffmanTree38.expand_array(intArray47, (int) (short) 1);
        java.lang.Class<?> wildcardClass52 = intArray51.getClass();
        try {
            int int54 = huffmanTree0.search_for_value(intArray51, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        HuffmanTree huffmanTree17 = new HuffmanTree();
        int[] intArray20 = new int[] { '4', (byte) 10 };
        int[] intArray22 = huffmanTree17.expand_array(intArray20, (-1));
        int[] intArray28 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int30 = huffmanTree17.search_for_value(intArray28, 0);
        HuffmanTree huffmanTree31 = new HuffmanTree();
        java.lang.Class<?> wildcardClass32 = huffmanTree31.getClass();
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        java.lang.Class<?> wildcardClass39 = huffmanTree33.getClass();
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray51 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int53 = huffmanTree40.search_for_value(intArray51, 0);
        int int55 = huffmanTree33.search_for_value(intArray51, 0);
        HuffmanTree huffmanTree56 = new HuffmanTree();
        int[] intArray59 = new int[] { '4', (byte) 10 };
        int[] intArray61 = huffmanTree56.expand_array(intArray59, (-1));
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        int[] intArray69 = huffmanTree56.expand_array(intArray65, (int) (short) 1);
        int[] intArray71 = new int[] { 4 };
        int int73 = huffmanTree56.search_for_value(intArray71, 4);
        int[] intArray74 = huffmanTree31.create_huffman_tree(intArray51, intArray71);
        int[] intArray76 = huffmanTree17.expand_array(intArray71, (int) (short) 1);
        try {
            int[] intArray78 = huffmanTree0.expand_array(intArray71, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        java.lang.Class<?> wildcardClass10 = huffmanTree0.getClass();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        int[] intArray14 = new int[] { '4', (byte) 10 };
        int[] intArray16 = huffmanTree11.expand_array(intArray14, (-1));
        int[] intArray21 = new int[] { '4', '#', 0, 4 };
        int[] intArray23 = huffmanTree11.expand_array(intArray21, 0);
        java.lang.Class<?> wildcardClass24 = intArray23.getClass();
        try {
            int int26 = huffmanTree0.search_for_value(intArray23, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass34 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        java.lang.Class<?> wildcardClass37 = huffmanTree36.getClass();
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        java.lang.Class<?> wildcardClass44 = huffmanTree38.getClass();
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray56 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int58 = huffmanTree45.search_for_value(intArray56, 0);
        int int60 = huffmanTree38.search_for_value(intArray56, 0);
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray74 = huffmanTree61.expand_array(intArray70, (int) (short) 1);
        int[] intArray76 = new int[] { 4 };
        int int78 = huffmanTree61.search_for_value(intArray76, 4);
        int[] intArray79 = huffmanTree36.create_huffman_tree(intArray56, intArray76);
        java.lang.Class<?> wildcardClass80 = intArray79.getClass();
        try {
            int int82 = huffmanTree0.search_for_value(intArray79, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray50 = huffmanTree37.expand_array(intArray46, (int) (short) 1);
        java.lang.Class<?> wildcardClass51 = intArray46.getClass();
        int[] intArray53 = huffmanTree0.expand_array(intArray46, (int) (short) 1);
        java.lang.Class<?> wildcardClass54 = huffmanTree0.getClass();
        HuffmanTree huffmanTree55 = new HuffmanTree();
        int[] intArray58 = new int[] { '4', (byte) 10 };
        int[] intArray60 = huffmanTree55.expand_array(intArray58, (-1));
        try {
            int int62 = huffmanTree0.search_for_value(intArray58, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        java.lang.Class<?> wildcardClass8 = huffmanTree2.getClass();
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        int int24 = huffmanTree2.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        HuffmanTree huffmanTree31 = new HuffmanTree();
        int[] intArray34 = new int[] { '4', (byte) 10 };
        int[] intArray36 = huffmanTree31.expand_array(intArray34, (-1));
        int[] intArray38 = huffmanTree25.expand_array(intArray34, (int) (short) 1);
        int[] intArray40 = new int[] { 4 };
        int int42 = huffmanTree25.search_for_value(intArray40, 4);
        int[] intArray43 = huffmanTree0.create_huffman_tree(intArray20, intArray40);
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray55 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int57 = huffmanTree44.search_for_value(intArray55, 0);
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int[] intArray69 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int71 = huffmanTree58.search_for_value(intArray69, 0);
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        int[] intArray78 = huffmanTree44.create_huffman_tree(intArray69, intArray75);
        java.lang.Class<?> wildcardClass79 = huffmanTree44.getClass();
        java.lang.Class<?> wildcardClass80 = huffmanTree44.getClass();
        HuffmanTree huffmanTree81 = new HuffmanTree();
        int[] intArray84 = new int[] { '4', (byte) 10 };
        int[] intArray86 = huffmanTree81.expand_array(intArray84, (-1));
        HuffmanTree huffmanTree87 = new HuffmanTree();
        int[] intArray90 = new int[] { '4', (byte) 10 };
        int[] intArray92 = huffmanTree87.expand_array(intArray90, (-1));
        int[] intArray94 = huffmanTree81.expand_array(intArray90, (int) (short) 1);
        java.lang.Class<?> wildcardClass95 = intArray90.getClass();
        int[] intArray97 = huffmanTree44.expand_array(intArray90, (int) (short) 1);
        try {
            int int99 = huffmanTree0.search_for_value(intArray90, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass34 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        java.lang.Class<?> wildcardClass37 = huffmanTree36.getClass();
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        java.lang.Class<?> wildcardClass44 = huffmanTree38.getClass();
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray56 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int58 = huffmanTree45.search_for_value(intArray56, 0);
        int int60 = huffmanTree38.search_for_value(intArray56, 0);
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray74 = huffmanTree61.expand_array(intArray70, (int) (short) 1);
        int[] intArray76 = new int[] { 4 };
        int int78 = huffmanTree61.search_for_value(intArray76, 4);
        int[] intArray79 = huffmanTree36.create_huffman_tree(intArray56, intArray76);
        java.lang.Class<?> wildcardClass80 = intArray76.getClass();
        java.lang.Class<?> wildcardClass81 = intArray76.getClass();
        try {
            int[] intArray83 = huffmanTree0.expand_array(intArray76, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        java.lang.Class<?> wildcardClass42 = intArray41.getClass();
        try {
            int[] intArray44 = huffmanTree0.expand_array(intArray41, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int int14 = huffmanTree6.search_for_value(intArray12, (int) (short) 10);
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray25 = new int[] { '4', '#', 0, 4 };
        int[] intArray27 = huffmanTree15.expand_array(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree28.search_for_value(intArray34, (int) (short) 10);
        java.lang.Class<?> wildcardClass37 = intArray34.getClass();
        int[] intArray38 = huffmanTree6.create_huffman_tree(intArray25, intArray34);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray56 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int58 = huffmanTree45.search_for_value(intArray56, 0);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray70 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int72 = huffmanTree59.search_for_value(intArray70, 0);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray79 = huffmanTree45.create_huffman_tree(intArray70, intArray76);
        int[] intArray81 = huffmanTree39.expand_array(intArray70, (int) (byte) 1);
        try {
            int[] intArray82 = huffmanTree0.create_huffman_tree(intArray34, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        java.lang.Class<?> wildcardClass15 = huffmanTree14.getClass();
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        java.lang.Class<?> wildcardClass22 = huffmanTree16.getClass();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray34 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int36 = huffmanTree23.search_for_value(intArray34, 0);
        int int38 = huffmanTree16.search_for_value(intArray34, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray52 = huffmanTree39.expand_array(intArray48, (int) (short) 1);
        int[] intArray54 = new int[] { 4 };
        int int56 = huffmanTree39.search_for_value(intArray54, 4);
        int[] intArray57 = huffmanTree14.create_huffman_tree(intArray34, intArray54);
        int[] intArray59 = huffmanTree0.expand_array(intArray54, (int) (short) 1);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray71 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int73 = huffmanTree60.search_for_value(intArray71, 0);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray85 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int87 = huffmanTree74.search_for_value(intArray85, 0);
        HuffmanTree huffmanTree88 = new HuffmanTree();
        int[] intArray91 = new int[] { '4', (byte) 10 };
        int[] intArray93 = huffmanTree88.expand_array(intArray91, (-1));
        int[] intArray94 = huffmanTree60.create_huffman_tree(intArray85, intArray91);
        try {
            int[] intArray96 = huffmanTree0.expand_array(intArray94, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        int[] intArray38 = null;
        try {
            int int40 = huffmanTree0.search_for_value(intArray38, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int[] intArray11 = new int[] { '4', '#', 0, 4 };
        int[] intArray13 = huffmanTree1.expand_array(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        int[] intArray27 = huffmanTree0.create_huffman_tree(intArray11, intArray26);
        java.lang.Class<?> wildcardClass28 = huffmanTree0.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray35 = null;
        try {
            int[] intArray36 = huffmanTree0.create_huffman_tree(intArray32, intArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        int[] intArray48 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int50 = huffmanTree37.search_for_value(intArray48, 0);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int[] intArray62 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int64 = huffmanTree51.search_for_value(intArray62, 0);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int[] intArray71 = huffmanTree37.create_huffman_tree(intArray62, intArray68);
        try {
            int[] intArray73 = huffmanTree0.expand_array(intArray71, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int[] intArray11 = new int[] { '4', '#', 0, 4 };
        int[] intArray13 = huffmanTree1.expand_array(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        int[] intArray27 = huffmanTree0.create_huffman_tree(intArray11, intArray26);
        java.lang.Class<?> wildcardClass28 = huffmanTree0.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray42 = huffmanTree29.expand_array(intArray38, (int) (short) 1);
        java.lang.Class<?> wildcardClass43 = intArray38.getClass();
        java.lang.Class<?> wildcardClass44 = intArray38.getClass();
        try {
            int int46 = huffmanTree0.search_for_value(intArray38, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int[] intArray11 = new int[] { '4', '#', 0, 4 };
        int[] intArray13 = huffmanTree1.expand_array(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        int[] intArray27 = huffmanTree0.create_huffman_tree(intArray11, intArray26);
        java.lang.Class<?> wildcardClass28 = huffmanTree0.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        int int37 = huffmanTree29.search_for_value(intArray35, (int) (short) 10);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        int[] intArray48 = new int[] { '4', '#', 0, 4 };
        int[] intArray50 = huffmanTree38.expand_array(intArray48, 0);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int int59 = huffmanTree51.search_for_value(intArray57, (int) (short) 10);
        java.lang.Class<?> wildcardClass60 = intArray57.getClass();
        int[] intArray61 = huffmanTree29.create_huffman_tree(intArray48, intArray57);
        java.lang.Class<?> wildcardClass62 = intArray48.getClass();
        java.lang.Class<?> wildcardClass63 = intArray48.getClass();
        try {
            int int65 = huffmanTree0.search_for_value(intArray48, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        int[] intArray48 = new int[] { '4', 4, (byte) 1, '#', 4 };
        try {
            int int50 = huffmanTree0.search_for_value(intArray48, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray48);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray51 = huffmanTree38.expand_array(intArray47, (int) (short) 1);
        java.lang.Class<?> wildcardClass52 = intArray47.getClass();
        java.lang.Class<?> wildcardClass53 = intArray47.getClass();
        try {
            int[] intArray55 = huffmanTree0.expand_array(intArray47, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        java.lang.Class<?> wildcardClass34 = huffmanTree33.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int int42 = huffmanTree33.search_for_value(intArray38, (int) (byte) 10);
        int int44 = huffmanTree0.search_for_value(intArray38, (int) (short) 10);
        int[] intArray45 = null;
        try {
            int[] intArray47 = huffmanTree0.expand_array(intArray45, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        java.lang.Class<?> wildcardClass10 = huffmanTree0.getClass();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        HuffmanTree huffmanTree12 = new HuffmanTree();
        int[] intArray15 = new int[] { '4', (byte) 10 };
        int[] intArray17 = huffmanTree12.expand_array(intArray15, (-1));
        int int19 = huffmanTree11.search_for_value(intArray17, (int) (short) 10);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int int41 = huffmanTree33.search_for_value(intArray39, (int) (short) 10);
        java.lang.Class<?> wildcardClass42 = intArray39.getClass();
        int[] intArray43 = huffmanTree11.create_huffman_tree(intArray30, intArray39);
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray54 = new int[] { '4', '#', 0, 4 };
        int[] intArray56 = huffmanTree44.expand_array(intArray54, 0);
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray70 = huffmanTree57.expand_array(intArray66, (int) (short) 1);
        int[] intArray72 = new int[] { 4 };
        int int74 = huffmanTree57.search_for_value(intArray72, 4);
        int[] intArray75 = huffmanTree11.create_huffman_tree(intArray54, intArray72);
        java.lang.Class<?> wildcardClass76 = intArray72.getClass();
        try {
            int int78 = huffmanTree0.search_for_value(intArray72, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray33 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int35 = huffmanTree22.search_for_value(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree8.create_huffman_tree(intArray33, intArray39);
        int[] intArray44 = huffmanTree2.expand_array(intArray33, (int) (byte) 1);
        int[] intArray46 = huffmanTree0.expand_array(intArray33, (int) (short) 0);
        HuffmanTree huffmanTree47 = new HuffmanTree();
        java.lang.Class<?> wildcardClass48 = huffmanTree47.getClass();
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        java.lang.Class<?> wildcardClass55 = huffmanTree49.getClass();
        HuffmanTree huffmanTree56 = new HuffmanTree();
        int[] intArray59 = new int[] { '4', (byte) 10 };
        int[] intArray61 = huffmanTree56.expand_array(intArray59, (-1));
        int[] intArray67 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int69 = huffmanTree56.search_for_value(intArray67, 0);
        int int71 = huffmanTree49.search_for_value(intArray67, 0);
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        int[] intArray85 = huffmanTree72.expand_array(intArray81, (int) (short) 1);
        int[] intArray87 = new int[] { 4 };
        int int89 = huffmanTree72.search_for_value(intArray87, 4);
        int[] intArray90 = huffmanTree47.create_huffman_tree(intArray67, intArray87);
        java.lang.Class<?> wildcardClass91 = intArray67.getClass();
        try {
            int int93 = huffmanTree0.search_for_value(intArray67, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        int[] intArray19 = null;
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray44 = new int[] { '4', '#', 0, 4 };
        int[] intArray46 = huffmanTree34.expand_array(intArray44, 0);
        HuffmanTree huffmanTree47 = new HuffmanTree();
        int[] intArray50 = new int[] { '4', (byte) 10 };
        int[] intArray52 = huffmanTree47.expand_array(intArray50, (-1));
        int[] intArray53 = huffmanTree20.create_huffman_tree(intArray44, intArray52);
        java.lang.Class<?> wildcardClass54 = intArray44.getClass();
        try {
            int[] intArray55 = huffmanTree0.create_huffman_tree(intArray19, intArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray46 = huffmanTree33.expand_array(intArray42, (int) (short) 1);
        java.lang.Class<?> wildcardClass47 = intArray42.getClass();
        java.lang.Class<?> wildcardClass48 = intArray42.getClass();
        try {
            int int50 = huffmanTree0.search_for_value(intArray42, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        int int38 = huffmanTree0.search_for_value(intArray32, (int) (short) 10);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass40 = huffmanTree0.getClass();
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray52 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int54 = huffmanTree41.search_for_value(intArray52, 0);
        java.lang.Class<?> wildcardClass55 = intArray52.getClass();
        try {
            int int57 = huffmanTree0.search_for_value(intArray52, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass23 = huffmanTree0.getClass();
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int[] intArray35 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int37 = huffmanTree24.search_for_value(intArray35, 0);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        int[] intArray49 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int51 = huffmanTree38.search_for_value(intArray49, 0);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray58 = huffmanTree24.create_huffman_tree(intArray49, intArray55);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray70 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int72 = huffmanTree59.search_for_value(intArray70, 0);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray83 = new int[] { '4', '#', 0, 4 };
        int[] intArray85 = huffmanTree73.expand_array(intArray83, 0);
        HuffmanTree huffmanTree86 = new HuffmanTree();
        int[] intArray89 = new int[] { '4', (byte) 10 };
        int[] intArray91 = huffmanTree86.expand_array(intArray89, (-1));
        int[] intArray92 = huffmanTree59.create_huffman_tree(intArray83, intArray91);
        int[] intArray94 = huffmanTree24.expand_array(intArray92, (-1));
        try {
            int int96 = huffmanTree0.search_for_value(intArray94, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        int[] intArray29 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int31 = huffmanTree18.search_for_value(intArray29, 0);
        java.lang.Class<?> wildcardClass32 = intArray29.getClass();
        try {
            int int34 = huffmanTree0.search_for_value(intArray29, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int int27 = huffmanTree19.search_for_value(intArray25, (int) (short) 10);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        java.lang.Class<?> wildcardClass29 = huffmanTree28.getClass();
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        java.lang.Class<?> wildcardClass36 = huffmanTree30.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        int[] intArray48 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int50 = huffmanTree37.search_for_value(intArray48, 0);
        int int52 = huffmanTree30.search_for_value(intArray48, 0);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray66 = huffmanTree53.expand_array(intArray62, (int) (short) 1);
        int[] intArray68 = new int[] { 4 };
        int int70 = huffmanTree53.search_for_value(intArray68, 4);
        int[] intArray71 = huffmanTree28.create_huffman_tree(intArray48, intArray68);
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        int[] intArray85 = huffmanTree72.expand_array(intArray81, (int) (short) 1);
        int[] intArray87 = new int[] { 4 };
        int int89 = huffmanTree72.search_for_value(intArray87, 4);
        java.lang.Class<?> wildcardClass90 = intArray87.getClass();
        int[] intArray91 = huffmanTree19.create_huffman_tree(intArray48, intArray87);
        try {
            int int93 = huffmanTree0.search_for_value(intArray87, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        java.lang.Class<?> wildcardClass10 = huffmanTree0.getClass();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        java.lang.Class<?> wildcardClass12 = huffmanTree11.getClass();
        HuffmanTree huffmanTree13 = new HuffmanTree();
        int[] intArray16 = new int[] { '4', (byte) 10 };
        int[] intArray18 = huffmanTree13.expand_array(intArray16, (-1));
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int[] intArray30 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int32 = huffmanTree19.search_for_value(intArray30, 0);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        int[] intArray44 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int46 = huffmanTree33.search_for_value(intArray44, 0);
        HuffmanTree huffmanTree47 = new HuffmanTree();
        int[] intArray50 = new int[] { '4', (byte) 10 };
        int[] intArray52 = huffmanTree47.expand_array(intArray50, (-1));
        int[] intArray53 = huffmanTree19.create_huffman_tree(intArray44, intArray50);
        int[] intArray55 = huffmanTree13.expand_array(intArray44, (int) (byte) 1);
        int[] intArray57 = huffmanTree11.expand_array(intArray44, (int) (short) 0);
        java.lang.Class<?> wildcardClass58 = intArray44.getClass();
        try {
            int[] intArray60 = huffmanTree0.expand_array(intArray44, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int[] intArray31 = huffmanTree18.expand_array(intArray27, (int) (short) 1);
        java.lang.Class<?> wildcardClass32 = intArray27.getClass();
        java.lang.Class<?> wildcardClass33 = intArray27.getClass();
        try {
            int[] intArray35 = huffmanTree0.expand_array(intArray27, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        int[] intArray32 = huffmanTree19.expand_array(intArray28, (int) (short) 1);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        int[] intArray43 = new int[] { '4', '#', 0, 4 };
        int[] intArray45 = huffmanTree33.expand_array(intArray43, 0);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        java.lang.Class<?> wildcardClass47 = huffmanTree46.getClass();
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int int55 = huffmanTree46.search_for_value(intArray51, (int) (byte) 10);
        int[] intArray56 = huffmanTree19.create_huffman_tree(intArray43, intArray51);
        java.lang.Class<?> wildcardClass57 = intArray51.getClass();
        try {
            int int59 = huffmanTree0.search_for_value(intArray51, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray45 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int47 = huffmanTree34.search_for_value(intArray45, 0);
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray54 = huffmanTree20.create_huffman_tree(intArray45, intArray51);
        int[] intArray56 = huffmanTree14.expand_array(intArray45, (int) (byte) 1);
        java.lang.Class<?> wildcardClass57 = intArray45.getClass();
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int[] intArray69 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int71 = huffmanTree58.search_for_value(intArray69, 0);
        java.lang.Class<?> wildcardClass72 = intArray69.getClass();
        int[] intArray73 = huffmanTree0.create_huffman_tree(intArray45, intArray69);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        java.lang.Class<?> wildcardClass75 = huffmanTree74.getClass();
        HuffmanTree huffmanTree76 = new HuffmanTree();
        int[] intArray79 = new int[] { '4', (byte) 10 };
        int[] intArray81 = huffmanTree76.expand_array(intArray79, (-1));
        int[] intArray86 = new int[] { '4', '#', 0, 4 };
        int[] intArray88 = huffmanTree76.expand_array(intArray86, 0);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        int[] intArray91 = huffmanTree74.expand_array(intArray88, 1);
        java.lang.Class<?> wildcardClass92 = intArray91.getClass();
        try {
            int[] intArray94 = huffmanTree0.expand_array(intArray91, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int int14 = huffmanTree6.search_for_value(intArray12, (int) (short) 10);
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray26 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int28 = huffmanTree15.search_for_value(intArray26, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray39 = new int[] { '4', '#', 0, 4 };
        int[] intArray41 = huffmanTree29.expand_array(intArray39, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int[] intArray48 = huffmanTree15.create_huffman_tree(intArray39, intArray47);
        int int50 = huffmanTree6.search_for_value(intArray48, (int) (short) 10);
        int[] intArray52 = huffmanTree0.expand_array(intArray48, (int) (byte) -1);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray66 = huffmanTree53.expand_array(intArray62, (int) (short) 1);
        int[] intArray68 = new int[] { 4 };
        int int70 = huffmanTree53.search_for_value(intArray68, 4);
        java.lang.Class<?> wildcardClass71 = intArray68.getClass();
        try {
            int[] intArray73 = huffmanTree0.expand_array(intArray68, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        java.lang.Class<?> wildcardClass19 = huffmanTree18.getClass();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        java.lang.Class<?> wildcardClass33 = intArray32.getClass();
        int[] intArray35 = huffmanTree18.expand_array(intArray32, 1);
        java.lang.Class<?> wildcardClass36 = intArray35.getClass();
        int int38 = huffmanTree0.search_for_value(intArray35, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        java.lang.Class<?> wildcardClass40 = huffmanTree39.getClass();
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        HuffmanTree huffmanTree47 = new HuffmanTree();
        int[] intArray50 = new int[] { '4', (byte) 10 };
        int[] intArray52 = huffmanTree47.expand_array(intArray50, (-1));
        int[] intArray58 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int60 = huffmanTree47.search_for_value(intArray58, 0);
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray72 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int74 = huffmanTree61.search_for_value(intArray72, 0);
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        int[] intArray81 = huffmanTree47.create_huffman_tree(intArray72, intArray78);
        int[] intArray83 = huffmanTree41.expand_array(intArray72, (int) (byte) 1);
        int[] intArray85 = huffmanTree39.expand_array(intArray72, (int) (short) 0);
        try {
            int[] intArray87 = huffmanTree0.expand_array(intArray72, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        java.lang.Class<?> wildcardClass43 = huffmanTree0.getClass();
        HuffmanTree huffmanTree44 = new HuffmanTree();
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int int52 = huffmanTree44.search_for_value(intArray50, (int) (short) 10);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray66 = huffmanTree53.expand_array(intArray62, (int) (short) 1);
        try {
            int[] intArray67 = huffmanTree0.create_huffman_tree(intArray50, intArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int[] intArray37 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int39 = huffmanTree26.search_for_value(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray51 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int53 = huffmanTree40.search_for_value(intArray51, 0);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray60 = huffmanTree26.create_huffman_tree(intArray51, intArray57);
        int[] intArray62 = huffmanTree20.expand_array(intArray51, (int) (byte) 1);
        java.lang.Class<?> wildcardClass63 = intArray51.getClass();
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int[] intArray75 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int77 = huffmanTree64.search_for_value(intArray75, 0);
        java.lang.Class<?> wildcardClass78 = intArray75.getClass();
        int[] intArray79 = huffmanTree6.create_huffman_tree(intArray51, intArray75);
        int[] intArray81 = huffmanTree0.expand_array(intArray75, 0);
        java.lang.Class<?> wildcardClass82 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass83 = huffmanTree0.getClass();
        HuffmanTree huffmanTree84 = new HuffmanTree();
        int[] intArray87 = new int[] { '4', (byte) 10 };
        int[] intArray89 = huffmanTree84.expand_array(intArray87, (-1));
        try {
            int[] intArray91 = huffmanTree0.expand_array(intArray87, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        int[] intArray31 = new int[] { '4', '#', 0, 4 };
        int[] intArray33 = huffmanTree21.expand_array(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree7.create_huffman_tree(intArray31, intArray39);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int int49 = huffmanTree41.search_for_value(intArray47, (int) (short) 10);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray60 = new int[] { '4', '#', 0, 4 };
        int[] intArray62 = huffmanTree50.expand_array(intArray60, 0);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int int71 = huffmanTree63.search_for_value(intArray69, (int) (short) 10);
        java.lang.Class<?> wildcardClass72 = intArray69.getClass();
        int[] intArray73 = huffmanTree41.create_huffman_tree(intArray60, intArray69);
        int int75 = huffmanTree7.search_for_value(intArray73, 10);
        int int77 = huffmanTree0.search_for_value(intArray73, (int) (short) 10);
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        int[] intArray89 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int91 = huffmanTree78.search_for_value(intArray89, 0);
        java.lang.Class<?> wildcardClass92 = intArray89.getClass();
        try {
            int[] intArray94 = huffmanTree0.expand_array(intArray89, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        int int38 = huffmanTree0.search_for_value(intArray32, (int) (short) 10);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        java.lang.Class<?> wildcardClass46 = intArray45.getClass();
        HuffmanTree huffmanTree47 = new HuffmanTree();
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray58 = new int[] { '4', '#', 0, 4 };
        int[] intArray60 = huffmanTree48.expand_array(intArray58, 0);
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray71 = new int[] { '4', '#', 0, 4 };
        int[] intArray73 = huffmanTree61.expand_array(intArray71, 0);
        int[] intArray74 = huffmanTree47.create_huffman_tree(intArray58, intArray73);
        java.lang.Class<?> wildcardClass75 = intArray74.getClass();
        try {
            int[] intArray76 = huffmanTree0.create_huffman_tree(intArray45, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        java.lang.Class<?> wildcardClass10 = huffmanTree0.getClass();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        int[] intArray14 = new int[] { '4', (byte) 10 };
        int[] intArray16 = huffmanTree11.expand_array(intArray14, (-1));
        java.lang.Class<?> wildcardClass17 = huffmanTree11.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        int[] intArray29 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int31 = huffmanTree18.search_for_value(intArray29, 0);
        HuffmanTree huffmanTree32 = new HuffmanTree();
        int[] intArray35 = new int[] { '4', (byte) 10 };
        int[] intArray37 = huffmanTree32.expand_array(intArray35, (-1));
        int[] intArray42 = new int[] { '4', '#', 0, 4 };
        int[] intArray44 = huffmanTree32.expand_array(intArray42, 0);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray51 = huffmanTree18.create_huffman_tree(intArray42, intArray50);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int int60 = huffmanTree52.search_for_value(intArray58, (int) (short) 10);
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray71 = new int[] { '4', '#', 0, 4 };
        int[] intArray73 = huffmanTree61.expand_array(intArray71, 0);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        int int82 = huffmanTree74.search_for_value(intArray80, (int) (short) 10);
        java.lang.Class<?> wildcardClass83 = intArray80.getClass();
        int[] intArray84 = huffmanTree52.create_huffman_tree(intArray71, intArray80);
        int int86 = huffmanTree18.search_for_value(intArray84, 10);
        int int88 = huffmanTree11.search_for_value(intArray84, (int) (short) 10);
        try {
            int int90 = huffmanTree0.search_for_value(intArray84, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray33 = new int[] { '4', '#', 0, 4 };
        int[] intArray35 = huffmanTree23.expand_array(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree9.create_huffman_tree(intArray33, intArray41);
        int int44 = huffmanTree0.search_for_value(intArray42, (int) (short) 10);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int int53 = huffmanTree45.search_for_value(intArray51, (int) (short) 10);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray64 = new int[] { '4', '#', 0, 4 };
        int[] intArray66 = huffmanTree54.expand_array(intArray64, 0);
        HuffmanTree huffmanTree67 = new HuffmanTree();
        HuffmanTree huffmanTree68 = new HuffmanTree();
        int[] intArray71 = new int[] { '4', (byte) 10 };
        int[] intArray73 = huffmanTree68.expand_array(intArray71, (-1));
        int int75 = huffmanTree67.search_for_value(intArray73, (int) (short) 10);
        java.lang.Class<?> wildcardClass76 = intArray73.getClass();
        int[] intArray77 = huffmanTree45.create_huffman_tree(intArray64, intArray73);
        java.lang.Class<?> wildcardClass78 = huffmanTree45.getClass();
        java.lang.Class<?> wildcardClass79 = huffmanTree45.getClass();
        HuffmanTree huffmanTree80 = new HuffmanTree();
        int[] intArray83 = new int[] { '4', (byte) 10 };
        int[] intArray85 = huffmanTree80.expand_array(intArray83, (-1));
        int[] intArray91 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int93 = huffmanTree80.search_for_value(intArray91, 0);
        int[] intArray95 = huffmanTree45.expand_array(intArray91, 0);
        java.lang.Class<?> wildcardClass96 = intArray91.getClass();
        int int98 = huffmanTree0.search_for_value(intArray91, (int) (short) 10);
        java.lang.Class<?> wildcardClass99 = huffmanTree0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 4 + "'", int93 == 4);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 3 + "'", int98 == 3);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        java.lang.Class<?> wildcardClass2 = huffmanTree1.getClass();
        HuffmanTree huffmanTree3 = new HuffmanTree();
        int[] intArray6 = new int[] { '4', (byte) 10 };
        int[] intArray8 = huffmanTree3.expand_array(intArray6, (-1));
        java.lang.Class<?> wildcardClass9 = huffmanTree3.getClass();
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        int[] intArray21 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int23 = huffmanTree10.search_for_value(intArray21, 0);
        int int25 = huffmanTree3.search_for_value(intArray21, 0);
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        HuffmanTree huffmanTree32 = new HuffmanTree();
        int[] intArray35 = new int[] { '4', (byte) 10 };
        int[] intArray37 = huffmanTree32.expand_array(intArray35, (-1));
        int[] intArray39 = huffmanTree26.expand_array(intArray35, (int) (short) 1);
        int[] intArray41 = new int[] { 4 };
        int int43 = huffmanTree26.search_for_value(intArray41, 4);
        int[] intArray44 = huffmanTree1.create_huffman_tree(intArray21, intArray41);
        java.lang.Class<?> wildcardClass45 = intArray41.getClass();
        try {
            int int47 = huffmanTree0.search_for_value(intArray41, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass7 = huffmanTree0.getClass();
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        java.lang.Class<?> wildcardClass14 = huffmanTree8.getClass();
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray26 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int28 = huffmanTree15.search_for_value(intArray26, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray39 = new int[] { '4', '#', 0, 4 };
        int[] intArray41 = huffmanTree29.expand_array(intArray39, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int[] intArray48 = huffmanTree15.create_huffman_tree(intArray39, intArray47);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int int57 = huffmanTree49.search_for_value(intArray55, (int) (short) 10);
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int[] intArray68 = new int[] { '4', '#', 0, 4 };
        int[] intArray70 = huffmanTree58.expand_array(intArray68, 0);
        HuffmanTree huffmanTree71 = new HuffmanTree();
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        int int79 = huffmanTree71.search_for_value(intArray77, (int) (short) 10);
        java.lang.Class<?> wildcardClass80 = intArray77.getClass();
        int[] intArray81 = huffmanTree49.create_huffman_tree(intArray68, intArray77);
        int int83 = huffmanTree15.search_for_value(intArray81, 10);
        int int85 = huffmanTree8.search_for_value(intArray81, (int) (short) 10);
        java.lang.Class<?> wildcardClass86 = intArray81.getClass();
        try {
            int[] intArray88 = huffmanTree0.expand_array(intArray81, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int[] intArray11 = new int[] { '4', '#', 0, 4 };
        int[] intArray13 = huffmanTree1.expand_array(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        int[] intArray27 = huffmanTree0.create_huffman_tree(intArray11, intArray26);
        java.lang.Class<?> wildcardClass28 = huffmanTree0.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray42 = huffmanTree29.expand_array(intArray38, (int) (short) 1);
        java.lang.Class<?> wildcardClass43 = intArray38.getClass();
        java.lang.Class<?> wildcardClass44 = intArray38.getClass();
        try {
            int int46 = huffmanTree0.search_for_value(intArray38, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        java.lang.Class<?> wildcardClass43 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass44 = huffmanTree0.getClass();
        HuffmanTree huffmanTree45 = new HuffmanTree();
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray56 = new int[] { '4', '#', 0, 4 };
        int[] intArray58 = huffmanTree46.expand_array(intArray56, 0);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray69 = new int[] { '4', '#', 0, 4 };
        int[] intArray71 = huffmanTree59.expand_array(intArray69, 0);
        int[] intArray72 = huffmanTree45.create_huffman_tree(intArray56, intArray71);
        java.lang.Class<?> wildcardClass73 = intArray72.getClass();
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray84 = new int[] { '4', '#', 0, 4 };
        int[] intArray86 = huffmanTree74.expand_array(intArray84, 0);
        int[] intArray87 = huffmanTree0.create_huffman_tree(intArray72, intArray86);
        HuffmanTree huffmanTree88 = new HuffmanTree();
        int[] intArray91 = new int[] { '4', (byte) 10 };
        int[] intArray93 = huffmanTree88.expand_array(intArray91, (-1));
        try {
            int int95 = huffmanTree0.search_for_value(intArray93, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        java.lang.Class<?> wildcardClass11 = huffmanTree10.getClass();
        HuffmanTree huffmanTree12 = new HuffmanTree();
        int[] intArray15 = new int[] { '4', (byte) 10 };
        int[] intArray17 = huffmanTree12.expand_array(intArray15, (-1));
        int int19 = huffmanTree10.search_for_value(intArray15, (int) (byte) 10);
        java.lang.Class<?> wildcardClass20 = intArray15.getClass();
        HuffmanTree huffmanTree21 = new HuffmanTree();
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int int29 = huffmanTree21.search_for_value(intArray27, (int) (short) 10);
        java.lang.Class<?> wildcardClass30 = intArray27.getClass();
        java.lang.Class<?> wildcardClass31 = intArray27.getClass();
        try {
            int[] intArray32 = huffmanTree0.create_huffman_tree(intArray15, intArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray45 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int47 = huffmanTree34.search_for_value(intArray45, 0);
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray58 = new int[] { '4', '#', 0, 4 };
        int[] intArray60 = huffmanTree48.expand_array(intArray58, 0);
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray67 = huffmanTree34.create_huffman_tree(intArray58, intArray66);
        try {
            int int69 = huffmanTree0.search_for_value(intArray58, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        HuffmanTree huffmanTree17 = new HuffmanTree();
        int[] intArray20 = new int[] { '4', (byte) 10 };
        int[] intArray22 = huffmanTree17.expand_array(intArray20, (-1));
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray34 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int36 = huffmanTree23.search_for_value(intArray34, 0);
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        int[] intArray48 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int50 = huffmanTree37.search_for_value(intArray48, 0);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int[] intArray57 = huffmanTree23.create_huffman_tree(intArray48, intArray54);
        int[] intArray59 = huffmanTree17.expand_array(intArray48, (int) (byte) 1);
        java.lang.Class<?> wildcardClass60 = huffmanTree17.getClass();
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray74 = huffmanTree61.expand_array(intArray70, (int) (short) 1);
        int[] intArray76 = new int[] { 4 };
        int int78 = huffmanTree61.search_for_value(intArray76, 4);
        int[] intArray80 = huffmanTree17.expand_array(intArray76, (int) (byte) 1);
        try {
            int[] intArray82 = huffmanTree0.expand_array(intArray80, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass34 = huffmanTree0.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        int[] intArray50 = huffmanTree0.expand_array(intArray46, 0);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int int59 = huffmanTree51.search_for_value(intArray57, (int) (short) 10);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray70 = new int[] { '4', '#', 0, 4 };
        int[] intArray72 = huffmanTree60.expand_array(intArray70, 0);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int int81 = huffmanTree73.search_for_value(intArray79, (int) (short) 10);
        java.lang.Class<?> wildcardClass82 = intArray79.getClass();
        int[] intArray83 = huffmanTree51.create_huffman_tree(intArray70, intArray79);
        HuffmanTree huffmanTree84 = new HuffmanTree();
        java.lang.Class<?> wildcardClass85 = huffmanTree84.getClass();
        HuffmanTree huffmanTree86 = new HuffmanTree();
        int[] intArray89 = new int[] { '4', (byte) 10 };
        int[] intArray91 = huffmanTree86.expand_array(intArray89, (-1));
        int int93 = huffmanTree84.search_for_value(intArray89, (int) (byte) 10);
        int int95 = huffmanTree51.search_for_value(intArray89, (int) (short) 10);
        int[] intArray97 = huffmanTree0.expand_array(intArray89, (int) (short) 1);
        java.lang.Class<?> wildcardClass98 = intArray97.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass34 = huffmanTree0.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        int[] intArray50 = huffmanTree0.expand_array(intArray46, 0);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int int59 = huffmanTree51.search_for_value(intArray57, (int) (short) 10);
        java.lang.Class<?> wildcardClass60 = intArray57.getClass();
        try {
            int int62 = huffmanTree0.search_for_value(intArray57, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray33 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int35 = huffmanTree22.search_for_value(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree8.create_huffman_tree(intArray33, intArray39);
        int[] intArray44 = huffmanTree2.expand_array(intArray33, (int) (byte) 1);
        int[] intArray46 = huffmanTree0.expand_array(intArray33, (int) (short) 0);
        HuffmanTree huffmanTree47 = new HuffmanTree();
        int[] intArray50 = new int[] { '4', (byte) 10 };
        int[] intArray52 = huffmanTree47.expand_array(intArray50, (-1));
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray60 = huffmanTree47.expand_array(intArray56, (int) (short) 1);
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray71 = new int[] { '4', '#', 0, 4 };
        int[] intArray73 = huffmanTree61.expand_array(intArray71, 0);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        java.lang.Class<?> wildcardClass75 = huffmanTree74.getClass();
        HuffmanTree huffmanTree76 = new HuffmanTree();
        int[] intArray79 = new int[] { '4', (byte) 10 };
        int[] intArray81 = huffmanTree76.expand_array(intArray79, (-1));
        int int83 = huffmanTree74.search_for_value(intArray79, (int) (byte) 10);
        int[] intArray84 = huffmanTree47.create_huffman_tree(intArray71, intArray79);
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        try {
            int int87 = huffmanTree0.search_for_value(intArray84, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray47 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int49 = huffmanTree36.search_for_value(intArray47, 0);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray61 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int63 = huffmanTree50.search_for_value(intArray61, 0);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int[] intArray70 = huffmanTree36.create_huffman_tree(intArray61, intArray67);
        java.lang.Class<?> wildcardClass71 = intArray67.getClass();
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        java.lang.Class<?> wildcardClass78 = huffmanTree72.getClass();
        HuffmanTree huffmanTree79 = new HuffmanTree();
        int[] intArray82 = new int[] { '4', (byte) 10 };
        int[] intArray84 = huffmanTree79.expand_array(intArray82, (-1));
        int[] intArray90 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int92 = huffmanTree79.search_for_value(intArray90, 0);
        java.lang.Class<?> wildcardClass93 = intArray90.getClass();
        int int95 = huffmanTree72.search_for_value(intArray90, 0);
        try {
            int[] intArray96 = huffmanTree0.create_huffman_tree(intArray67, intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 4 + "'", int92 == 4);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray33 = new int[] { '4', '#', 0, 4 };
        int[] intArray35 = huffmanTree23.expand_array(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree9.create_huffman_tree(intArray33, intArray41);
        int int44 = huffmanTree0.search_for_value(intArray42, (int) (short) 10);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        java.lang.Class<?> wildcardClass51 = huffmanTree45.getClass();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray63 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int65 = huffmanTree52.search_for_value(intArray63, 0);
        int int67 = huffmanTree45.search_for_value(intArray63, 0);
        int[] intArray69 = huffmanTree0.expand_array(intArray63, (int) (short) 1);
        int[] intArray70 = null;
        try {
            int int72 = huffmanTree0.search_for_value(intArray70, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        java.lang.Class<?> wildcardClass8 = huffmanTree2.getClass();
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        int int24 = huffmanTree2.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        HuffmanTree huffmanTree31 = new HuffmanTree();
        int[] intArray34 = new int[] { '4', (byte) 10 };
        int[] intArray36 = huffmanTree31.expand_array(intArray34, (-1));
        int[] intArray38 = huffmanTree25.expand_array(intArray34, (int) (short) 1);
        int[] intArray40 = new int[] { 4 };
        int int42 = huffmanTree25.search_for_value(intArray40, 4);
        int[] intArray43 = huffmanTree0.create_huffman_tree(intArray20, intArray40);
        HuffmanTree huffmanTree44 = new HuffmanTree();
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int int52 = huffmanTree44.search_for_value(intArray50, (int) (short) 10);
        java.lang.Class<?> wildcardClass53 = intArray50.getClass();
        try {
            int[] intArray55 = huffmanTree0.expand_array(intArray50, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        int[] intArray31 = new int[] { '4', '#', 0, 4 };
        int[] intArray33 = huffmanTree21.expand_array(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree7.create_huffman_tree(intArray31, intArray39);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int int49 = huffmanTree41.search_for_value(intArray47, (int) (short) 10);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray60 = new int[] { '4', '#', 0, 4 };
        int[] intArray62 = huffmanTree50.expand_array(intArray60, 0);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int int71 = huffmanTree63.search_for_value(intArray69, (int) (short) 10);
        java.lang.Class<?> wildcardClass72 = intArray69.getClass();
        int[] intArray73 = huffmanTree41.create_huffman_tree(intArray60, intArray69);
        int int75 = huffmanTree7.search_for_value(intArray73, 10);
        int int77 = huffmanTree0.search_for_value(intArray73, (int) (short) 10);
        int[] intArray78 = null;
        try {
            int int80 = huffmanTree0.search_for_value(intArray78, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass37 = huffmanTree0.getClass();
        int[] intArray42 = new int[] { (-1), 4, 3, (short) 0 };
        try {
            int int44 = huffmanTree0.search_for_value(intArray42, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(intArray42);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int[] intArray12 = new int[] { '4', '#', 0, 4 };
        int[] intArray14 = huffmanTree2.expand_array(intArray12, 0);
        java.lang.Class<?> wildcardClass15 = intArray14.getClass();
        int[] intArray17 = huffmanTree0.expand_array(intArray14, 1);
        HuffmanTree huffmanTree18 = new HuffmanTree();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int int26 = huffmanTree18.search_for_value(intArray24, (int) (short) 10);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray37 = new int[] { '4', '#', 0, 4 };
        int[] intArray39 = huffmanTree27.expand_array(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int int48 = huffmanTree40.search_for_value(intArray46, (int) (short) 10);
        java.lang.Class<?> wildcardClass49 = intArray46.getClass();
        int[] intArray50 = huffmanTree18.create_huffman_tree(intArray37, intArray46);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        java.lang.Class<?> wildcardClass52 = huffmanTree51.getClass();
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        java.lang.Class<?> wildcardClass59 = huffmanTree53.getClass();
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray71 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int73 = huffmanTree60.search_for_value(intArray71, 0);
        int int75 = huffmanTree53.search_for_value(intArray71, 0);
        HuffmanTree huffmanTree76 = new HuffmanTree();
        int[] intArray79 = new int[] { '4', (byte) 10 };
        int[] intArray81 = huffmanTree76.expand_array(intArray79, (-1));
        HuffmanTree huffmanTree82 = new HuffmanTree();
        int[] intArray85 = new int[] { '4', (byte) 10 };
        int[] intArray87 = huffmanTree82.expand_array(intArray85, (-1));
        int[] intArray89 = huffmanTree76.expand_array(intArray85, (int) (short) 1);
        int[] intArray91 = new int[] { 4 };
        int int93 = huffmanTree76.search_for_value(intArray91, 4);
        int[] intArray94 = huffmanTree51.create_huffman_tree(intArray71, intArray91);
        java.lang.Class<?> wildcardClass95 = intArray71.getClass();
        int[] intArray97 = huffmanTree18.expand_array(intArray71, (int) (short) 1);
        try {
            int[] intArray99 = huffmanTree0.expand_array(intArray71, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        java.lang.Class<?> wildcardClass10 = huffmanTree0.getClass();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        int[] intArray14 = new int[] { '4', (byte) 10 };
        int[] intArray16 = huffmanTree11.expand_array(intArray14, (-1));
        HuffmanTree huffmanTree17 = new HuffmanTree();
        int[] intArray20 = new int[] { '4', (byte) 10 };
        int[] intArray22 = huffmanTree17.expand_array(intArray20, (-1));
        int[] intArray24 = huffmanTree11.expand_array(intArray20, (int) (short) 1);
        int[] intArray25 = null;
        int[] intArray27 = huffmanTree11.expand_array(intArray25, (int) (short) 1);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        java.lang.Class<?> wildcardClass29 = huffmanTree28.getClass();
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        java.lang.Class<?> wildcardClass36 = huffmanTree30.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        int[] intArray48 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int50 = huffmanTree37.search_for_value(intArray48, 0);
        int int52 = huffmanTree30.search_for_value(intArray48, 0);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray66 = huffmanTree53.expand_array(intArray62, (int) (short) 1);
        int[] intArray68 = new int[] { 4 };
        int int70 = huffmanTree53.search_for_value(intArray68, 4);
        int[] intArray71 = huffmanTree28.create_huffman_tree(intArray48, intArray68);
        java.lang.Class<?> wildcardClass72 = intArray68.getClass();
        java.lang.Class<?> wildcardClass73 = intArray68.getClass();
        int[] intArray75 = huffmanTree11.expand_array(intArray68, 0);
        try {
            int int77 = huffmanTree0.search_for_value(intArray75, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNull(intArray27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        int int44 = huffmanTree36.search_for_value(intArray42, (int) (short) 10);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray55 = new int[] { '4', '#', 0, 4 };
        int[] intArray57 = huffmanTree45.expand_array(intArray55, 0);
        HuffmanTree huffmanTree58 = new HuffmanTree();
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int int66 = huffmanTree58.search_for_value(intArray64, (int) (short) 10);
        java.lang.Class<?> wildcardClass67 = intArray64.getClass();
        int[] intArray68 = huffmanTree36.create_huffman_tree(intArray55, intArray64);
        java.lang.Class<?> wildcardClass69 = huffmanTree36.getClass();
        java.lang.Class<?> wildcardClass70 = huffmanTree36.getClass();
        HuffmanTree huffmanTree71 = new HuffmanTree();
        int[] intArray74 = new int[] { '4', (byte) 10 };
        int[] intArray76 = huffmanTree71.expand_array(intArray74, (-1));
        int[] intArray82 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int84 = huffmanTree71.search_for_value(intArray82, 0);
        int[] intArray86 = huffmanTree36.expand_array(intArray82, 0);
        java.lang.Class<?> wildcardClass87 = intArray82.getClass();
        try {
            int[] intArray89 = huffmanTree0.expand_array(intArray82, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray54 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int56 = huffmanTree43.search_for_value(intArray54, 0);
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int[] intArray68 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int70 = huffmanTree57.search_for_value(intArray68, 0);
        HuffmanTree huffmanTree71 = new HuffmanTree();
        int[] intArray74 = new int[] { '4', (byte) 10 };
        int[] intArray76 = huffmanTree71.expand_array(intArray74, (-1));
        int[] intArray77 = huffmanTree43.create_huffman_tree(intArray68, intArray74);
        int[] intArray79 = huffmanTree37.expand_array(intArray68, (int) (byte) 1);
        int[] intArray81 = huffmanTree0.expand_array(intArray79, (-1));
        java.lang.Class<?> wildcardClass82 = intArray81.getClass();
        java.lang.Class<?> wildcardClass83 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray38 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int40 = huffmanTree27.search_for_value(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray52 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int54 = huffmanTree41.search_for_value(intArray52, 0);
        HuffmanTree huffmanTree55 = new HuffmanTree();
        int[] intArray58 = new int[] { '4', (byte) 10 };
        int[] intArray60 = huffmanTree55.expand_array(intArray58, (-1));
        int[] intArray61 = huffmanTree27.create_huffman_tree(intArray52, intArray58);
        int[] intArray63 = huffmanTree21.expand_array(intArray52, (int) (byte) 1);
        java.lang.Class<?> wildcardClass64 = intArray52.getClass();
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int[] intArray76 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int78 = huffmanTree65.search_for_value(intArray76, 0);
        java.lang.Class<?> wildcardClass79 = intArray76.getClass();
        int[] intArray80 = huffmanTree7.create_huffman_tree(intArray52, intArray76);
        HuffmanTree huffmanTree81 = new HuffmanTree();
        HuffmanTree huffmanTree82 = new HuffmanTree();
        int[] intArray85 = new int[] { '4', (byte) 10 };
        int[] intArray87 = huffmanTree82.expand_array(intArray85, (-1));
        int int89 = huffmanTree81.search_for_value(intArray87, (int) (short) 10);
        java.lang.Class<?> wildcardClass90 = intArray87.getClass();
        int[] intArray91 = huffmanTree6.create_huffman_tree(intArray80, intArray87);
        try {
            int[] intArray93 = huffmanTree0.expand_array(intArray87, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        HuffmanTree huffmanTree17 = new HuffmanTree();
        java.lang.Class<?> wildcardClass18 = huffmanTree17.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        java.lang.Class<?> wildcardClass25 = huffmanTree19.getClass();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int[] intArray37 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int39 = huffmanTree26.search_for_value(intArray37, 0);
        int int41 = huffmanTree19.search_for_value(intArray37, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray55 = huffmanTree42.expand_array(intArray51, (int) (short) 1);
        int[] intArray57 = new int[] { 4 };
        int int59 = huffmanTree42.search_for_value(intArray57, 4);
        int[] intArray60 = huffmanTree17.create_huffman_tree(intArray37, intArray57);
        java.lang.Class<?> wildcardClass61 = intArray57.getClass();
        java.lang.Class<?> wildcardClass62 = intArray57.getClass();
        int[] intArray64 = huffmanTree0.expand_array(intArray57, 0);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        try {
            int int72 = huffmanTree0.search_for_value(intArray70, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        int int38 = huffmanTree0.search_for_value(intArray32, (int) (short) 10);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        int[] intArray40 = null;
        HuffmanTree huffmanTree41 = new HuffmanTree();
        java.lang.Class<?> wildcardClass42 = huffmanTree41.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray60 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int62 = huffmanTree49.search_for_value(intArray60, 0);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray74 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int76 = huffmanTree63.search_for_value(intArray74, 0);
        HuffmanTree huffmanTree77 = new HuffmanTree();
        int[] intArray80 = new int[] { '4', (byte) 10 };
        int[] intArray82 = huffmanTree77.expand_array(intArray80, (-1));
        int[] intArray83 = huffmanTree49.create_huffman_tree(intArray74, intArray80);
        int[] intArray85 = huffmanTree43.expand_array(intArray74, (int) (byte) 1);
        int[] intArray87 = huffmanTree41.expand_array(intArray74, (int) (short) 0);
        try {
            int[] intArray88 = huffmanTree0.create_huffman_tree(intArray40, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int int14 = huffmanTree6.search_for_value(intArray12, (int) (short) 10);
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray26 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int28 = huffmanTree15.search_for_value(intArray26, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray39 = new int[] { '4', '#', 0, 4 };
        int[] intArray41 = huffmanTree29.expand_array(intArray39, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int[] intArray48 = huffmanTree15.create_huffman_tree(intArray39, intArray47);
        int int50 = huffmanTree6.search_for_value(intArray48, (int) (short) 10);
        int[] intArray52 = huffmanTree0.expand_array(intArray48, (int) (byte) -1);
        int[] intArray53 = null;
        try {
            int[] intArray55 = huffmanTree0.expand_array(intArray53, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray52);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        java.lang.Class<?> wildcardClass12 = huffmanTree6.getClass();
        HuffmanTree huffmanTree13 = new HuffmanTree();
        int[] intArray16 = new int[] { '4', (byte) 10 };
        int[] intArray18 = huffmanTree13.expand_array(intArray16, (-1));
        int[] intArray24 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int26 = huffmanTree13.search_for_value(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray37 = new int[] { '4', '#', 0, 4 };
        int[] intArray39 = huffmanTree27.expand_array(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray46 = huffmanTree13.create_huffman_tree(intArray37, intArray45);
        HuffmanTree huffmanTree47 = new HuffmanTree();
        java.lang.Class<?> wildcardClass48 = huffmanTree47.getClass();
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        java.lang.Class<?> wildcardClass55 = huffmanTree49.getClass();
        HuffmanTree huffmanTree56 = new HuffmanTree();
        int[] intArray59 = new int[] { '4', (byte) 10 };
        int[] intArray61 = huffmanTree56.expand_array(intArray59, (-1));
        int[] intArray67 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int69 = huffmanTree56.search_for_value(intArray67, 0);
        int int71 = huffmanTree49.search_for_value(intArray67, 0);
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        int[] intArray85 = huffmanTree72.expand_array(intArray81, (int) (short) 1);
        int[] intArray87 = new int[] { 4 };
        int int89 = huffmanTree72.search_for_value(intArray87, 4);
        int[] intArray90 = huffmanTree47.create_huffman_tree(intArray67, intArray87);
        int[] intArray91 = huffmanTree6.create_huffman_tree(intArray37, intArray87);
        try {
            int int93 = huffmanTree0.search_for_value(intArray87, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass23 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass24 = huffmanTree0.getClass();
        HuffmanTree huffmanTree25 = new HuffmanTree();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int int33 = huffmanTree25.search_for_value(intArray31, (int) (short) 10);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray44 = new int[] { '4', '#', 0, 4 };
        int[] intArray46 = huffmanTree34.expand_array(intArray44, 0);
        HuffmanTree huffmanTree47 = new HuffmanTree();
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int int55 = huffmanTree47.search_for_value(intArray53, (int) (short) 10);
        java.lang.Class<?> wildcardClass56 = intArray53.getClass();
        int[] intArray57 = huffmanTree25.create_huffman_tree(intArray44, intArray53);
        java.lang.Class<?> wildcardClass58 = huffmanTree25.getClass();
        java.lang.Class<?> wildcardClass59 = huffmanTree25.getClass();
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray71 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int73 = huffmanTree60.search_for_value(intArray71, 0);
        int[] intArray75 = huffmanTree25.expand_array(intArray71, 0);
        HuffmanTree huffmanTree76 = new HuffmanTree();
        int[] intArray79 = new int[] { '4', (byte) 10 };
        int[] intArray81 = huffmanTree76.expand_array(intArray79, (-1));
        java.lang.Class<?> wildcardClass82 = huffmanTree76.getClass();
        HuffmanTree huffmanTree83 = new HuffmanTree();
        int[] intArray86 = new int[] { '4', (byte) 10 };
        int[] intArray88 = huffmanTree83.expand_array(intArray86, (-1));
        int[] intArray94 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int96 = huffmanTree83.search_for_value(intArray94, 0);
        int int98 = huffmanTree76.search_for_value(intArray94, 0);
        int[] intArray99 = huffmanTree0.create_huffman_tree(intArray71, intArray94);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 4 + "'", int96 == 4);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 4 + "'", int98 == 4);
        org.junit.Assert.assertNotNull(intArray99);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass34 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        int int44 = huffmanTree36.search_for_value(intArray42, (int) (short) 10);
        java.lang.Class<?> wildcardClass45 = intArray42.getClass();
        try {
            int int47 = huffmanTree0.search_for_value(intArray42, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        java.lang.Class<?> wildcardClass10 = huffmanTree0.getClass();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        HuffmanTree huffmanTree12 = new HuffmanTree();
        int[] intArray15 = new int[] { '4', (byte) 10 };
        int[] intArray17 = huffmanTree12.expand_array(intArray15, (-1));
        int int19 = huffmanTree11.search_for_value(intArray17, (int) (short) 10);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int int41 = huffmanTree33.search_for_value(intArray39, (int) (short) 10);
        java.lang.Class<?> wildcardClass42 = intArray39.getClass();
        int[] intArray43 = huffmanTree11.create_huffman_tree(intArray30, intArray39);
        java.lang.Class<?> wildcardClass44 = intArray39.getClass();
        try {
            int[] intArray46 = huffmanTree0.expand_array(intArray39, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass21 = intArray18.getClass();
        int int23 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        int[] intArray37 = huffmanTree24.expand_array(intArray33, (int) (short) 1);
        int[] intArray39 = new int[] { 4 };
        int int41 = huffmanTree24.search_for_value(intArray39, 4);
        java.lang.Class<?> wildcardClass42 = intArray39.getClass();
        int[] intArray44 = huffmanTree0.expand_array(intArray39, 0);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        java.lang.Class<?> wildcardClass51 = huffmanTree45.getClass();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray63 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int65 = huffmanTree52.search_for_value(intArray63, 0);
        int int67 = huffmanTree45.search_for_value(intArray63, 0);
        java.lang.Class<?> wildcardClass68 = intArray63.getClass();
        java.lang.Class<?> wildcardClass69 = intArray63.getClass();
        try {
            int int71 = huffmanTree0.search_for_value(intArray63, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray45 = new int[] { '4', '#', 0, 4 };
        int[] intArray47 = huffmanTree35.expand_array(intArray45, 0);
        java.lang.Class<?> wildcardClass48 = intArray47.getClass();
        int[] intArray50 = huffmanTree0.expand_array(intArray47, (int) (byte) -1);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int[] intArray68 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int70 = huffmanTree57.search_for_value(intArray68, 0);
        HuffmanTree huffmanTree71 = new HuffmanTree();
        int[] intArray74 = new int[] { '4', (byte) 10 };
        int[] intArray76 = huffmanTree71.expand_array(intArray74, (-1));
        int[] intArray82 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int84 = huffmanTree71.search_for_value(intArray82, 0);
        HuffmanTree huffmanTree85 = new HuffmanTree();
        int[] intArray88 = new int[] { '4', (byte) 10 };
        int[] intArray90 = huffmanTree85.expand_array(intArray88, (-1));
        int[] intArray91 = huffmanTree57.create_huffman_tree(intArray82, intArray88);
        int[] intArray93 = huffmanTree51.expand_array(intArray82, (int) (byte) 1);
        java.lang.Class<?> wildcardClass94 = intArray82.getClass();
        java.lang.Class<?> wildcardClass95 = intArray82.getClass();
        try {
            int int97 = huffmanTree0.search_for_value(intArray82, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray26 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int28 = huffmanTree15.search_for_value(intArray26, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray40 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int42 = huffmanTree29.search_for_value(intArray40, 0);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray49 = huffmanTree15.create_huffman_tree(intArray40, intArray46);
        int[] intArray51 = huffmanTree9.expand_array(intArray40, (int) (byte) 1);
        java.lang.Class<?> wildcardClass52 = intArray40.getClass();
        int[] intArray53 = null;
        try {
            int[] intArray54 = huffmanTree0.create_huffman_tree(intArray40, intArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass21 = intArray18.getClass();
        int int23 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        int[] intArray37 = huffmanTree24.expand_array(intArray33, (int) (short) 1);
        int[] intArray38 = null;
        int[] intArray40 = huffmanTree24.expand_array(intArray38, (int) (short) 1);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        java.lang.Class<?> wildcardClass42 = huffmanTree41.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        java.lang.Class<?> wildcardClass49 = huffmanTree43.getClass();
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray61 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int63 = huffmanTree50.search_for_value(intArray61, 0);
        int int65 = huffmanTree43.search_for_value(intArray61, 0);
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        int[] intArray79 = huffmanTree66.expand_array(intArray75, (int) (short) 1);
        int[] intArray81 = new int[] { 4 };
        int int83 = huffmanTree66.search_for_value(intArray81, 4);
        int[] intArray84 = huffmanTree41.create_huffman_tree(intArray61, intArray81);
        java.lang.Class<?> wildcardClass85 = intArray81.getClass();
        java.lang.Class<?> wildcardClass86 = intArray81.getClass();
        int[] intArray88 = huffmanTree24.expand_array(intArray81, 0);
        try {
            int[] intArray90 = huffmanTree0.expand_array(intArray88, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNull(intArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        HuffmanTree huffmanTree17 = new HuffmanTree();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        int int25 = huffmanTree17.search_for_value(intArray23, (int) (short) 10);
        HuffmanTree huffmanTree26 = new HuffmanTree();
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray37 = new int[] { '4', '#', 0, 4 };
        int[] intArray39 = huffmanTree27.expand_array(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray50 = new int[] { '4', '#', 0, 4 };
        int[] intArray52 = huffmanTree40.expand_array(intArray50, 0);
        int[] intArray53 = huffmanTree26.create_huffman_tree(intArray37, intArray52);
        int[] intArray55 = huffmanTree17.expand_array(intArray53, (int) (short) 1);
        try {
            int int57 = huffmanTree0.search_for_value(intArray55, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        java.lang.Class<?> wildcardClass25 = huffmanTree19.getClass();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int[] intArray37 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int39 = huffmanTree26.search_for_value(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray50 = new int[] { '4', '#', 0, 4 };
        int[] intArray52 = huffmanTree40.expand_array(intArray50, 0);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray59 = huffmanTree26.create_huffman_tree(intArray50, intArray58);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int int68 = huffmanTree60.search_for_value(intArray66, (int) (short) 10);
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        int[] intArray79 = new int[] { '4', '#', 0, 4 };
        int[] intArray81 = huffmanTree69.expand_array(intArray79, 0);
        HuffmanTree huffmanTree82 = new HuffmanTree();
        HuffmanTree huffmanTree83 = new HuffmanTree();
        int[] intArray86 = new int[] { '4', (byte) 10 };
        int[] intArray88 = huffmanTree83.expand_array(intArray86, (-1));
        int int90 = huffmanTree82.search_for_value(intArray88, (int) (short) 10);
        java.lang.Class<?> wildcardClass91 = intArray88.getClass();
        int[] intArray92 = huffmanTree60.create_huffman_tree(intArray79, intArray88);
        int int94 = huffmanTree26.search_for_value(intArray92, 10);
        int int96 = huffmanTree19.search_for_value(intArray92, (int) (short) 10);
        java.lang.Class<?> wildcardClass97 = intArray92.getClass();
        try {
            int[] intArray99 = huffmanTree0.expand_array(intArray92, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        java.lang.Class<?> wildcardClass8 = huffmanTree7.getClass();
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int int16 = huffmanTree7.search_for_value(intArray12, (int) (byte) 10);
        HuffmanTree huffmanTree17 = new HuffmanTree();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        int int25 = huffmanTree17.search_for_value(intArray23, (int) (short) 10);
        HuffmanTree huffmanTree26 = new HuffmanTree();
        java.lang.Class<?> wildcardClass27 = huffmanTree26.getClass();
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        java.lang.Class<?> wildcardClass34 = huffmanTree28.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        int int50 = huffmanTree28.search_for_value(intArray46, 0);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int[] intArray64 = huffmanTree51.expand_array(intArray60, (int) (short) 1);
        int[] intArray66 = new int[] { 4 };
        int int68 = huffmanTree51.search_for_value(intArray66, 4);
        int[] intArray69 = huffmanTree26.create_huffman_tree(intArray46, intArray66);
        HuffmanTree huffmanTree70 = new HuffmanTree();
        int[] intArray73 = new int[] { '4', (byte) 10 };
        int[] intArray75 = huffmanTree70.expand_array(intArray73, (-1));
        HuffmanTree huffmanTree76 = new HuffmanTree();
        int[] intArray79 = new int[] { '4', (byte) 10 };
        int[] intArray81 = huffmanTree76.expand_array(intArray79, (-1));
        int[] intArray83 = huffmanTree70.expand_array(intArray79, (int) (short) 1);
        int[] intArray85 = new int[] { 4 };
        int int87 = huffmanTree70.search_for_value(intArray85, 4);
        java.lang.Class<?> wildcardClass88 = intArray85.getClass();
        int[] intArray89 = huffmanTree17.create_huffman_tree(intArray46, intArray85);
        int[] intArray91 = huffmanTree7.expand_array(intArray46, 0);
        try {
            int int93 = huffmanTree0.search_for_value(intArray46, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int int43 = huffmanTree35.search_for_value(intArray41, (int) (short) 10);
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray54 = new int[] { '4', '#', 0, 4 };
        int[] intArray56 = huffmanTree44.expand_array(intArray54, 0);
        HuffmanTree huffmanTree57 = new HuffmanTree();
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int int65 = huffmanTree57.search_for_value(intArray63, (int) (short) 10);
        java.lang.Class<?> wildcardClass66 = intArray63.getClass();
        int[] intArray67 = huffmanTree35.create_huffman_tree(intArray54, intArray63);
        java.lang.Class<?> wildcardClass68 = intArray54.getClass();
        java.lang.Class<?> wildcardClass69 = intArray54.getClass();
        int int71 = huffmanTree0.search_for_value(intArray54, (int) (short) 0);
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        try {
            int[] intArray79 = huffmanTree0.expand_array(intArray75, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray47 = huffmanTree34.expand_array(intArray43, (int) (short) 1);
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray58 = new int[] { '4', '#', 0, 4 };
        int[] intArray60 = huffmanTree48.expand_array(intArray58, 0);
        HuffmanTree huffmanTree61 = new HuffmanTree();
        java.lang.Class<?> wildcardClass62 = huffmanTree61.getClass();
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int int70 = huffmanTree61.search_for_value(intArray66, (int) (byte) 10);
        int[] intArray71 = huffmanTree34.create_huffman_tree(intArray58, intArray66);
        HuffmanTree huffmanTree72 = new HuffmanTree();
        java.lang.Class<?> wildcardClass73 = huffmanTree72.getClass();
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int int81 = huffmanTree72.search_for_value(intArray77, (int) (byte) 10);
        int[] intArray83 = huffmanTree34.expand_array(intArray77, (int) (short) 1);
        try {
            int[] intArray85 = huffmanTree0.expand_array(intArray77, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        java.lang.Class<?> wildcardClass43 = huffmanTree0.getClass();
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray57 = huffmanTree44.expand_array(intArray53, (int) (short) 1);
        int[] intArray59 = new int[] { 4 };
        int int61 = huffmanTree44.search_for_value(intArray59, 4);
        int[] intArray63 = huffmanTree0.expand_array(intArray59, (int) (byte) 1);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int int72 = huffmanTree64.search_for_value(intArray70, (int) (short) 10);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray83 = new int[] { '4', '#', 0, 4 };
        int[] intArray85 = huffmanTree73.expand_array(intArray83, 0);
        HuffmanTree huffmanTree86 = new HuffmanTree();
        HuffmanTree huffmanTree87 = new HuffmanTree();
        int[] intArray90 = new int[] { '4', (byte) 10 };
        int[] intArray92 = huffmanTree87.expand_array(intArray90, (-1));
        int int94 = huffmanTree86.search_for_value(intArray92, (int) (short) 10);
        java.lang.Class<?> wildcardClass95 = intArray92.getClass();
        int[] intArray96 = huffmanTree64.create_huffman_tree(intArray83, intArray92);
        int[] intArray98 = huffmanTree0.expand_array(intArray96, (int) (short) 0);
        java.lang.Class<?> wildcardClass99 = huffmanTree0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        int int37 = huffmanTree29.search_for_value(intArray35, (int) (short) 10);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        int[] intArray49 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int51 = huffmanTree38.search_for_value(intArray49, 0);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray62 = new int[] { '4', '#', 0, 4 };
        int[] intArray64 = huffmanTree52.expand_array(intArray62, 0);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int[] intArray71 = huffmanTree38.create_huffman_tree(intArray62, intArray70);
        int int73 = huffmanTree29.search_for_value(intArray71, (int) (short) 10);
        int[] intArray75 = huffmanTree23.expand_array(intArray71, (int) (byte) -1);
        try {
            int int77 = huffmanTree0.search_for_value(intArray71, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        java.lang.Class<?> wildcardClass19 = huffmanTree18.getClass();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        java.lang.Class<?> wildcardClass33 = intArray32.getClass();
        int[] intArray35 = huffmanTree18.expand_array(intArray32, 1);
        java.lang.Class<?> wildcardClass36 = intArray35.getClass();
        int int38 = huffmanTree0.search_for_value(intArray35, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        java.lang.Class<?> wildcardClass40 = huffmanTree39.getClass();
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        java.lang.Class<?> wildcardClass47 = huffmanTree41.getClass();
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray59 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int61 = huffmanTree48.search_for_value(intArray59, 0);
        int int63 = huffmanTree41.search_for_value(intArray59, 0);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        HuffmanTree huffmanTree70 = new HuffmanTree();
        int[] intArray73 = new int[] { '4', (byte) 10 };
        int[] intArray75 = huffmanTree70.expand_array(intArray73, (-1));
        int[] intArray77 = huffmanTree64.expand_array(intArray73, (int) (short) 1);
        int[] intArray79 = new int[] { 4 };
        int int81 = huffmanTree64.search_for_value(intArray79, 4);
        int[] intArray82 = huffmanTree39.create_huffman_tree(intArray59, intArray79);
        try {
            int int84 = huffmanTree0.search_for_value(intArray82, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        HuffmanTree huffmanTree17 = new HuffmanTree();
        int[] intArray20 = new int[] { '4', (byte) 10 };
        int[] intArray22 = huffmanTree17.expand_array(intArray20, (-1));
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray30 = huffmanTree17.expand_array(intArray26, (int) (short) 1);
        int[] intArray31 = null;
        int[] intArray33 = huffmanTree17.expand_array(intArray31, (int) (short) 1);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        java.lang.Class<?> wildcardClass35 = huffmanTree34.getClass();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        java.lang.Class<?> wildcardClass42 = huffmanTree36.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray54 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int56 = huffmanTree43.search_for_value(intArray54, 0);
        int int58 = huffmanTree36.search_for_value(intArray54, 0);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int[] intArray72 = huffmanTree59.expand_array(intArray68, (int) (short) 1);
        int[] intArray74 = new int[] { 4 };
        int int76 = huffmanTree59.search_for_value(intArray74, 4);
        int[] intArray77 = huffmanTree34.create_huffman_tree(intArray54, intArray74);
        java.lang.Class<?> wildcardClass78 = intArray74.getClass();
        java.lang.Class<?> wildcardClass79 = intArray74.getClass();
        int[] intArray81 = huffmanTree17.expand_array(intArray74, 0);
        HuffmanTree huffmanTree82 = new HuffmanTree();
        java.lang.Class<?> wildcardClass83 = huffmanTree82.getClass();
        HuffmanTree huffmanTree84 = new HuffmanTree();
        int[] intArray87 = new int[] { '4', (byte) 10 };
        int[] intArray89 = huffmanTree84.expand_array(intArray87, (-1));
        int int91 = huffmanTree82.search_for_value(intArray87, (int) (byte) 10);
        java.lang.Class<?> wildcardClass92 = intArray87.getClass();
        java.lang.Class<?> wildcardClass93 = intArray87.getClass();
        int[] intArray95 = huffmanTree17.expand_array(intArray87, 0);
        try {
            int int97 = huffmanTree0.search_for_value(intArray87, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNull(intArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass7 = huffmanTree0.getClass();
        HuffmanTree huffmanTree8 = new HuffmanTree();
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int int16 = huffmanTree8.search_for_value(intArray14, (int) (short) 10);
        HuffmanTree huffmanTree17 = new HuffmanTree();
        int[] intArray20 = new int[] { '4', (byte) 10 };
        int[] intArray22 = huffmanTree17.expand_array(intArray20, (-1));
        int[] intArray27 = new int[] { '4', '#', 0, 4 };
        int[] intArray29 = huffmanTree17.expand_array(intArray27, 0);
        HuffmanTree huffmanTree30 = new HuffmanTree();
        HuffmanTree huffmanTree31 = new HuffmanTree();
        int[] intArray34 = new int[] { '4', (byte) 10 };
        int[] intArray36 = huffmanTree31.expand_array(intArray34, (-1));
        int int38 = huffmanTree30.search_for_value(intArray36, (int) (short) 10);
        java.lang.Class<?> wildcardClass39 = intArray36.getClass();
        int[] intArray40 = huffmanTree8.create_huffman_tree(intArray27, intArray36);
        java.lang.Class<?> wildcardClass41 = huffmanTree8.getClass();
        java.lang.Class<?> wildcardClass42 = huffmanTree8.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray54 = new int[] { '4', '#', 0, 4 };
        int[] intArray56 = huffmanTree44.expand_array(intArray54, 0);
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int[] intArray67 = new int[] { '4', '#', 0, 4 };
        int[] intArray69 = huffmanTree57.expand_array(intArray67, 0);
        int[] intArray70 = huffmanTree43.create_huffman_tree(intArray54, intArray69);
        java.lang.Class<?> wildcardClass71 = intArray69.getClass();
        int[] intArray73 = huffmanTree8.expand_array(intArray69, (int) (short) 1);
        try {
            int int75 = huffmanTree0.search_for_value(intArray73, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(intArray73);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        java.lang.Class<?> wildcardClass39 = huffmanTree38.getClass();
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        java.lang.Class<?> wildcardClass46 = huffmanTree40.getClass();
        HuffmanTree huffmanTree47 = new HuffmanTree();
        int[] intArray50 = new int[] { '4', (byte) 10 };
        int[] intArray52 = huffmanTree47.expand_array(intArray50, (-1));
        int[] intArray58 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int60 = huffmanTree47.search_for_value(intArray58, 0);
        int int62 = huffmanTree40.search_for_value(intArray58, 0);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        int[] intArray76 = huffmanTree63.expand_array(intArray72, (int) (short) 1);
        int[] intArray78 = new int[] { 4 };
        int int80 = huffmanTree63.search_for_value(intArray78, 4);
        int[] intArray81 = huffmanTree38.create_huffman_tree(intArray58, intArray78);
        try {
            int[] intArray83 = huffmanTree0.expand_array(intArray78, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray33 = new int[] { '4', '#', 0, 4 };
        int[] intArray35 = huffmanTree23.expand_array(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree9.create_huffman_tree(intArray33, intArray41);
        int int44 = huffmanTree0.search_for_value(intArray42, (int) (short) 10);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int int53 = huffmanTree45.search_for_value(intArray51, (int) (short) 10);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray64 = new int[] { '4', '#', 0, 4 };
        int[] intArray66 = huffmanTree54.expand_array(intArray64, 0);
        HuffmanTree huffmanTree67 = new HuffmanTree();
        HuffmanTree huffmanTree68 = new HuffmanTree();
        int[] intArray71 = new int[] { '4', (byte) 10 };
        int[] intArray73 = huffmanTree68.expand_array(intArray71, (-1));
        int int75 = huffmanTree67.search_for_value(intArray73, (int) (short) 10);
        java.lang.Class<?> wildcardClass76 = intArray73.getClass();
        int[] intArray77 = huffmanTree45.create_huffman_tree(intArray64, intArray73);
        java.lang.Class<?> wildcardClass78 = huffmanTree45.getClass();
        java.lang.Class<?> wildcardClass79 = huffmanTree45.getClass();
        HuffmanTree huffmanTree80 = new HuffmanTree();
        int[] intArray83 = new int[] { '4', (byte) 10 };
        int[] intArray85 = huffmanTree80.expand_array(intArray83, (-1));
        int[] intArray91 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int93 = huffmanTree80.search_for_value(intArray91, 0);
        int[] intArray95 = huffmanTree45.expand_array(intArray91, 0);
        java.lang.Class<?> wildcardClass96 = intArray91.getClass();
        int int98 = huffmanTree0.search_for_value(intArray91, (int) (short) 10);
        java.lang.Class<?> wildcardClass99 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 4 + "'", int93 == 4);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 3 + "'", int98 == 3);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray38 = new int[] { '4', '#', 0, 4 };
        int[] intArray40 = huffmanTree28.expand_array(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray47 = huffmanTree14.create_huffman_tree(intArray38, intArray46);
        java.lang.Class<?> wildcardClass48 = intArray47.getClass();
        try {
            int int50 = huffmanTree0.search_for_value(intArray47, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray18 = new int[] { '4', '#', 0, 4 };
        int[] intArray20 = huffmanTree8.expand_array(intArray18, 0);
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        int[] intArray31 = new int[] { '4', '#', 0, 4 };
        int[] intArray33 = huffmanTree21.expand_array(intArray31, 0);
        int[] intArray34 = huffmanTree7.create_huffman_tree(intArray18, intArray33);
        java.lang.Class<?> wildcardClass35 = intArray34.getClass();
        try {
            int int37 = huffmanTree0.search_for_value(intArray34, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray59 = new int[] { '4', '#', 0, 4 };
        int[] intArray61 = huffmanTree49.expand_array(intArray59, 0);
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        int[] intArray68 = huffmanTree35.create_huffman_tree(intArray59, intArray67);
        int[] intArray70 = huffmanTree0.expand_array(intArray68, (-1));
        java.lang.Class<?> wildcardClass71 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass72 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass73 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass74 = huffmanTree0.getClass();
        int[] intArray75 = null;
        try {
            int int77 = huffmanTree0.search_for_value(intArray75, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        java.lang.Class<?> wildcardClass19 = huffmanTree18.getClass();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        java.lang.Class<?> wildcardClass33 = intArray32.getClass();
        int[] intArray35 = huffmanTree18.expand_array(intArray32, 1);
        java.lang.Class<?> wildcardClass36 = intArray35.getClass();
        int int38 = huffmanTree0.search_for_value(intArray35, 0);
        int[] intArray39 = null;
        try {
            int[] intArray41 = huffmanTree0.expand_array(intArray39, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray51 = huffmanTree38.expand_array(intArray47, (int) (short) 1);
        int int53 = huffmanTree0.search_for_value(intArray47, 10);
        java.lang.Class<?> wildcardClass54 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass55 = huffmanTree0.getClass();
        int[] intArray56 = null;
        try {
            int[] intArray58 = huffmanTree0.expand_array(intArray56, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        HuffmanTree huffmanTree17 = new HuffmanTree();
        int[] intArray20 = new int[] { '4', (byte) 10 };
        int[] intArray22 = huffmanTree17.expand_array(intArray20, (-1));
        try {
            int int24 = huffmanTree0.search_for_value(intArray22, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        int[] intArray32 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int34 = huffmanTree21.search_for_value(intArray32, 0);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray41 = huffmanTree7.create_huffman_tree(intArray32, intArray38);
        try {
            int[] intArray43 = huffmanTree0.expand_array(intArray41, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray15 = new int[] { 4 };
        int int17 = huffmanTree0.search_for_value(intArray15, 4);
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        java.lang.Class<?> wildcardClass24 = huffmanTree18.getClass();
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        int[] intArray36 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int38 = huffmanTree25.search_for_value(intArray36, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray49 = new int[] { '4', '#', 0, 4 };
        int[] intArray51 = huffmanTree39.expand_array(intArray49, 0);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray58 = huffmanTree25.create_huffman_tree(intArray49, intArray57);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int int67 = huffmanTree59.search_for_value(intArray65, (int) (short) 10);
        HuffmanTree huffmanTree68 = new HuffmanTree();
        int[] intArray71 = new int[] { '4', (byte) 10 };
        int[] intArray73 = huffmanTree68.expand_array(intArray71, (-1));
        int[] intArray78 = new int[] { '4', '#', 0, 4 };
        int[] intArray80 = huffmanTree68.expand_array(intArray78, 0);
        HuffmanTree huffmanTree81 = new HuffmanTree();
        HuffmanTree huffmanTree82 = new HuffmanTree();
        int[] intArray85 = new int[] { '4', (byte) 10 };
        int[] intArray87 = huffmanTree82.expand_array(intArray85, (-1));
        int int89 = huffmanTree81.search_for_value(intArray87, (int) (short) 10);
        java.lang.Class<?> wildcardClass90 = intArray87.getClass();
        int[] intArray91 = huffmanTree59.create_huffman_tree(intArray78, intArray87);
        int int93 = huffmanTree25.search_for_value(intArray91, 10);
        int int95 = huffmanTree18.search_for_value(intArray91, (int) (short) 10);
        java.lang.Class<?> wildcardClass96 = intArray91.getClass();
        try {
            int int98 = huffmanTree0.search_for_value(intArray91, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        java.lang.Class<?> wildcardClass43 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass44 = huffmanTree0.getClass();
        HuffmanTree huffmanTree45 = new HuffmanTree();
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray56 = new int[] { '4', '#', 0, 4 };
        int[] intArray58 = huffmanTree46.expand_array(intArray56, 0);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray69 = new int[] { '4', '#', 0, 4 };
        int[] intArray71 = huffmanTree59.expand_array(intArray69, 0);
        int[] intArray72 = huffmanTree45.create_huffman_tree(intArray56, intArray71);
        java.lang.Class<?> wildcardClass73 = intArray72.getClass();
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray84 = new int[] { '4', '#', 0, 4 };
        int[] intArray86 = huffmanTree74.expand_array(intArray84, 0);
        int[] intArray87 = huffmanTree0.create_huffman_tree(intArray72, intArray86);
        HuffmanTree huffmanTree88 = new HuffmanTree();
        HuffmanTree huffmanTree89 = new HuffmanTree();
        int[] intArray92 = new int[] { '4', (byte) 10 };
        int[] intArray94 = huffmanTree89.expand_array(intArray92, (-1));
        int int96 = huffmanTree88.search_for_value(intArray94, (int) (short) 10);
        java.lang.Class<?> wildcardClass97 = intArray94.getClass();
        try {
            int int99 = huffmanTree0.search_for_value(intArray94, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        java.lang.Class<?> wildcardClass43 = huffmanTree0.getClass();
        HuffmanTree huffmanTree44 = new HuffmanTree();
        java.lang.Class<?> wildcardClass45 = huffmanTree44.getClass();
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        java.lang.Class<?> wildcardClass52 = huffmanTree46.getClass();
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray64 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int66 = huffmanTree53.search_for_value(intArray64, 0);
        int int68 = huffmanTree46.search_for_value(intArray64, 0);
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        int[] intArray82 = huffmanTree69.expand_array(intArray78, (int) (short) 1);
        int[] intArray84 = new int[] { 4 };
        int int86 = huffmanTree69.search_for_value(intArray84, 4);
        int[] intArray87 = huffmanTree44.create_huffman_tree(intArray64, intArray84);
        java.lang.Class<?> wildcardClass88 = intArray84.getClass();
        java.lang.Class<?> wildcardClass89 = intArray84.getClass();
        java.lang.Class<?> wildcardClass90 = intArray84.getClass();
        try {
            int int92 = huffmanTree0.search_for_value(intArray84, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int[] intArray31 = huffmanTree18.expand_array(intArray27, (int) (short) 1);
        int[] intArray32 = null;
        int[] intArray34 = huffmanTree18.expand_array(intArray32, (int) (short) 1);
        java.lang.Class<?> wildcardClass35 = huffmanTree18.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree18.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray50 = huffmanTree37.expand_array(intArray46, (int) (short) 1);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int[] intArray61 = new int[] { '4', '#', 0, 4 };
        int[] intArray63 = huffmanTree51.expand_array(intArray61, 0);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        java.lang.Class<?> wildcardClass65 = huffmanTree64.getClass();
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int int73 = huffmanTree64.search_for_value(intArray69, (int) (byte) 10);
        int[] intArray74 = huffmanTree37.create_huffman_tree(intArray61, intArray69);
        int[] intArray76 = huffmanTree18.expand_array(intArray61, (int) (short) 0);
        try {
            int int78 = huffmanTree0.search_for_value(intArray61, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        int[] intArray43 = new int[] { '4', '#', 0, 4 };
        int[] intArray45 = huffmanTree33.expand_array(intArray43, 0);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray59 = huffmanTree46.expand_array(intArray55, (int) (short) 1);
        int[] intArray61 = new int[] { 4 };
        int int63 = huffmanTree46.search_for_value(intArray61, 4);
        int[] intArray64 = huffmanTree0.create_huffman_tree(intArray43, intArray61);
        java.lang.Class<?> wildcardClass65 = huffmanTree0.getClass();
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        java.lang.Class<?> wildcardClass72 = huffmanTree66.getClass();
        java.lang.Class<?> wildcardClass73 = huffmanTree66.getClass();
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        HuffmanTree huffmanTree80 = new HuffmanTree();
        int[] intArray83 = new int[] { '4', (byte) 10 };
        int[] intArray85 = huffmanTree80.expand_array(intArray83, (-1));
        int[] intArray87 = huffmanTree74.expand_array(intArray83, (int) (short) 1);
        int[] intArray89 = new int[] { 4 };
        int int91 = huffmanTree74.search_for_value(intArray89, 4);
        int[] intArray93 = huffmanTree66.expand_array(intArray89, (int) (byte) -1);
        try {
            int int95 = huffmanTree0.search_for_value(intArray93, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray51 = huffmanTree38.expand_array(intArray47, (int) (short) 1);
        int int53 = huffmanTree0.search_for_value(intArray47, 10);
        java.lang.Class<?> wildcardClass54 = huffmanTree0.getClass();
        HuffmanTree huffmanTree55 = new HuffmanTree();
        int[] intArray58 = new int[] { '4', (byte) 10 };
        int[] intArray60 = huffmanTree55.expand_array(intArray58, (-1));
        java.lang.Class<?> wildcardClass61 = huffmanTree55.getClass();
        java.lang.Class<?> wildcardClass62 = huffmanTree55.getClass();
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        int[] intArray76 = huffmanTree63.expand_array(intArray72, (int) (short) 1);
        int[] intArray78 = new int[] { 4 };
        int int80 = huffmanTree63.search_for_value(intArray78, 4);
        int[] intArray82 = huffmanTree55.expand_array(intArray78, (int) (byte) -1);
        java.lang.Class<?> wildcardClass83 = intArray82.getClass();
        try {
            int int85 = huffmanTree0.search_for_value(intArray82, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray50 = huffmanTree37.expand_array(intArray46, (int) (short) 1);
        java.lang.Class<?> wildcardClass51 = intArray46.getClass();
        int[] intArray53 = huffmanTree0.expand_array(intArray46, (int) (short) 1);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray65 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int67 = huffmanTree54.search_for_value(intArray65, 0);
        HuffmanTree huffmanTree68 = new HuffmanTree();
        int[] intArray71 = new int[] { '4', (byte) 10 };
        int[] intArray73 = huffmanTree68.expand_array(intArray71, (-1));
        int[] intArray78 = new int[] { '4', '#', 0, 4 };
        int[] intArray80 = huffmanTree68.expand_array(intArray78, 0);
        HuffmanTree huffmanTree81 = new HuffmanTree();
        int[] intArray84 = new int[] { '4', (byte) 10 };
        int[] intArray86 = huffmanTree81.expand_array(intArray84, (-1));
        int[] intArray87 = huffmanTree54.create_huffman_tree(intArray78, intArray86);
        try {
            int[] intArray89 = huffmanTree0.expand_array(intArray86, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass7 = huffmanTree0.getClass();
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray21 = huffmanTree8.expand_array(intArray17, (int) (short) 1);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray33 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int35 = huffmanTree22.search_for_value(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray46 = new int[] { '4', '#', 0, 4 };
        int[] intArray48 = huffmanTree36.expand_array(intArray46, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray55 = huffmanTree22.create_huffman_tree(intArray46, intArray54);
        java.lang.Class<?> wildcardClass56 = intArray46.getClass();
        HuffmanTree huffmanTree57 = new HuffmanTree();
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int[] intArray68 = new int[] { '4', '#', 0, 4 };
        int[] intArray70 = huffmanTree58.expand_array(intArray68, 0);
        HuffmanTree huffmanTree71 = new HuffmanTree();
        int[] intArray74 = new int[] { '4', (byte) 10 };
        int[] intArray76 = huffmanTree71.expand_array(intArray74, (-1));
        int[] intArray81 = new int[] { '4', '#', 0, 4 };
        int[] intArray83 = huffmanTree71.expand_array(intArray81, 0);
        int[] intArray84 = huffmanTree57.create_huffman_tree(intArray68, intArray83);
        int[] intArray85 = huffmanTree8.create_huffman_tree(intArray46, intArray84);
        java.lang.Class<?> wildcardClass86 = intArray85.getClass();
        try {
            int[] intArray88 = huffmanTree0.expand_array(intArray85, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        java.lang.Class<?> wildcardClass10 = huffmanTree0.getClass();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        HuffmanTree huffmanTree12 = new HuffmanTree();
        int[] intArray15 = new int[] { '4', (byte) 10 };
        int[] intArray17 = huffmanTree12.expand_array(intArray15, (-1));
        int int19 = huffmanTree11.search_for_value(intArray17, (int) (short) 10);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int int41 = huffmanTree33.search_for_value(intArray39, (int) (short) 10);
        java.lang.Class<?> wildcardClass42 = intArray39.getClass();
        int[] intArray43 = huffmanTree11.create_huffman_tree(intArray30, intArray39);
        java.lang.Class<?> wildcardClass44 = huffmanTree11.getClass();
        java.lang.Class<?> wildcardClass45 = huffmanTree11.getClass();
        HuffmanTree huffmanTree46 = new HuffmanTree();
        HuffmanTree huffmanTree47 = new HuffmanTree();
        int[] intArray50 = new int[] { '4', (byte) 10 };
        int[] intArray52 = huffmanTree47.expand_array(intArray50, (-1));
        int[] intArray57 = new int[] { '4', '#', 0, 4 };
        int[] intArray59 = huffmanTree47.expand_array(intArray57, 0);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray70 = new int[] { '4', '#', 0, 4 };
        int[] intArray72 = huffmanTree60.expand_array(intArray70, 0);
        int[] intArray73 = huffmanTree46.create_huffman_tree(intArray57, intArray72);
        java.lang.Class<?> wildcardClass74 = intArray72.getClass();
        int[] intArray76 = huffmanTree11.expand_array(intArray72, (int) (short) 1);
        try {
            int[] intArray78 = huffmanTree0.expand_array(intArray72, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int[] intArray13 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int15 = huffmanTree2.search_for_value(intArray13, 0);
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray33 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int35 = huffmanTree22.search_for_value(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray47 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int49 = huffmanTree36.search_for_value(intArray47, 0);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray56 = huffmanTree22.create_huffman_tree(intArray47, intArray53);
        int[] intArray58 = huffmanTree16.expand_array(intArray47, (int) (byte) 1);
        java.lang.Class<?> wildcardClass59 = intArray47.getClass();
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray71 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int73 = huffmanTree60.search_for_value(intArray71, 0);
        java.lang.Class<?> wildcardClass74 = intArray71.getClass();
        int[] intArray75 = huffmanTree2.create_huffman_tree(intArray47, intArray71);
        HuffmanTree huffmanTree76 = new HuffmanTree();
        int[] intArray79 = new int[] { '4', (byte) 10 };
        int[] intArray81 = huffmanTree76.expand_array(intArray79, (-1));
        int[] intArray83 = huffmanTree2.expand_array(intArray79, (int) (short) 1);
        java.lang.Class<?> wildcardClass84 = intArray83.getClass();
        java.lang.Class<?> wildcardClass85 = intArray83.getClass();
        try {
            int int87 = huffmanTree0.search_for_value(intArray83, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray15 = new int[] { 4 };
        int int17 = huffmanTree0.search_for_value(intArray15, 4);
        HuffmanTree huffmanTree18 = new HuffmanTree();
        java.lang.Class<?> wildcardClass19 = huffmanTree18.getClass();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int int27 = huffmanTree18.search_for_value(intArray23, (int) (byte) 10);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree28.search_for_value(intArray34, (int) (short) 10);
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        int[] intArray48 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int50 = huffmanTree37.search_for_value(intArray48, 0);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int[] intArray61 = new int[] { '4', '#', 0, 4 };
        int[] intArray63 = huffmanTree51.expand_array(intArray61, 0);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int[] intArray70 = huffmanTree37.create_huffman_tree(intArray61, intArray69);
        int int72 = huffmanTree28.search_for_value(intArray70, (int) (short) 10);
        try {
            int[] intArray73 = huffmanTree0.create_huffman_tree(intArray23, intArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass7 = huffmanTree0.getClass();
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray21 = huffmanTree8.expand_array(intArray17, (int) (short) 1);
        int[] intArray23 = new int[] { 4 };
        int int25 = huffmanTree8.search_for_value(intArray23, 4);
        int[] intArray27 = huffmanTree0.expand_array(intArray23, (int) (byte) -1);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray51 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int53 = huffmanTree40.search_for_value(intArray51, 0);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray65 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int67 = huffmanTree54.search_for_value(intArray65, 0);
        HuffmanTree huffmanTree68 = new HuffmanTree();
        int[] intArray71 = new int[] { '4', (byte) 10 };
        int[] intArray73 = huffmanTree68.expand_array(intArray71, (-1));
        int[] intArray74 = huffmanTree40.create_huffman_tree(intArray65, intArray71);
        int[] intArray76 = huffmanTree34.expand_array(intArray65, (int) (byte) 1);
        try {
            int[] intArray77 = huffmanTree0.create_huffman_tree(intArray33, intArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        java.lang.Class<?> wildcardClass36 = huffmanTree35.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        int[] intArray47 = new int[] { '4', '#', 0, 4 };
        int[] intArray49 = huffmanTree37.expand_array(intArray47, 0);
        java.lang.Class<?> wildcardClass50 = intArray49.getClass();
        int[] intArray52 = huffmanTree35.expand_array(intArray49, 1);
        try {
            int[] intArray54 = huffmanTree0.expand_array(intArray52, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(intArray52);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        int[] intArray33 = null;
        int[] intArray35 = huffmanTree0.expand_array(intArray33, (-1));
        try {
            java.lang.Class<?> wildcardClass36 = intArray35.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNull(intArray35);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray15 = new int[] { 4 };
        int int17 = huffmanTree0.search_for_value(intArray15, 4);
        HuffmanTree huffmanTree18 = new HuffmanTree();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int int26 = huffmanTree18.search_for_value(intArray24, (int) (short) 10);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray37 = new int[] { '4', '#', 0, 4 };
        int[] intArray39 = huffmanTree27.expand_array(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int int48 = huffmanTree40.search_for_value(intArray46, (int) (short) 10);
        java.lang.Class<?> wildcardClass49 = intArray46.getClass();
        int[] intArray50 = huffmanTree18.create_huffman_tree(intArray37, intArray46);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        java.lang.Class<?> wildcardClass52 = huffmanTree51.getClass();
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int int60 = huffmanTree51.search_for_value(intArray56, (int) (byte) 10);
        int int62 = huffmanTree18.search_for_value(intArray56, (int) (short) 10);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int[] intArray74 = new int[] { '4', '#', 0, 4 };
        int[] intArray76 = huffmanTree64.expand_array(intArray74, 0);
        HuffmanTree huffmanTree77 = new HuffmanTree();
        int[] intArray80 = new int[] { '4', (byte) 10 };
        int[] intArray82 = huffmanTree77.expand_array(intArray80, (-1));
        int[] intArray87 = new int[] { '4', '#', 0, 4 };
        int[] intArray89 = huffmanTree77.expand_array(intArray87, 0);
        int[] intArray90 = huffmanTree63.create_huffman_tree(intArray74, intArray89);
        int int92 = huffmanTree18.search_for_value(intArray74, 4);
        java.lang.Class<?> wildcardClass93 = intArray74.getClass();
        int int95 = huffmanTree0.search_for_value(intArray74, 0);
        int[] intArray96 = null;
        try {
            int int98 = huffmanTree0.search_for_value(intArray96, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 3 + "'", int92 == 3);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray45 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int47 = huffmanTree34.search_for_value(intArray45, 0);
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray54 = huffmanTree20.create_huffman_tree(intArray45, intArray51);
        int[] intArray56 = huffmanTree14.expand_array(intArray45, (int) (byte) 1);
        java.lang.Class<?> wildcardClass57 = intArray45.getClass();
        java.lang.Class<?> wildcardClass58 = intArray45.getClass();
        try {
            int[] intArray60 = huffmanTree0.expand_array(intArray45, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        java.lang.Class<?> wildcardClass23 = huffmanTree9.getClass();
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray43 = huffmanTree30.expand_array(intArray39, (int) (short) 1);
        int[] intArray44 = null;
        int[] intArray46 = huffmanTree30.expand_array(intArray44, (int) (short) 1);
        java.lang.Class<?> wildcardClass47 = huffmanTree30.getClass();
        HuffmanTree huffmanTree48 = new HuffmanTree();
        java.lang.Class<?> wildcardClass49 = huffmanTree48.getClass();
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray60 = new int[] { '4', '#', 0, 4 };
        int[] intArray62 = huffmanTree50.expand_array(intArray60, 0);
        java.lang.Class<?> wildcardClass63 = intArray62.getClass();
        int[] intArray65 = huffmanTree48.expand_array(intArray62, 1);
        java.lang.Class<?> wildcardClass66 = intArray65.getClass();
        int int68 = huffmanTree30.search_for_value(intArray65, 0);
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        int[] intArray82 = huffmanTree69.expand_array(intArray78, (int) (short) 1);
        int[] intArray83 = huffmanTree24.create_huffman_tree(intArray65, intArray78);
        int int85 = huffmanTree9.search_for_value(intArray78, (int) (byte) 10);
        try {
            int int87 = huffmanTree0.search_for_value(intArray78, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNull(intArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray45 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int47 = huffmanTree34.search_for_value(intArray45, 0);
        java.lang.Class<?> wildcardClass48 = intArray45.getClass();
        java.lang.Class<?> wildcardClass49 = intArray45.getClass();
        java.lang.Class<?> wildcardClass50 = intArray45.getClass();
        int[] intArray52 = huffmanTree0.expand_array(intArray45, 0);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray70 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int72 = huffmanTree59.search_for_value(intArray70, 0);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray84 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int86 = huffmanTree73.search_for_value(intArray84, 0);
        HuffmanTree huffmanTree87 = new HuffmanTree();
        int[] intArray90 = new int[] { '4', (byte) 10 };
        int[] intArray92 = huffmanTree87.expand_array(intArray90, (-1));
        int[] intArray93 = huffmanTree59.create_huffman_tree(intArray84, intArray90);
        int[] intArray95 = huffmanTree53.expand_array(intArray84, (int) (byte) 1);
        java.lang.Class<?> wildcardClass96 = intArray84.getClass();
        try {
            int[] intArray98 = huffmanTree0.expand_array(intArray84, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        int[] intArray33 = null;
        int[] intArray35 = huffmanTree0.expand_array(intArray33, (-1));
        int[] intArray36 = null;
        try {
            int int38 = huffmanTree0.search_for_value(intArray36, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNull(intArray35);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int int26 = huffmanTree18.search_for_value(intArray24, (int) (short) 10);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray38 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int40 = huffmanTree27.search_for_value(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray51 = new int[] { '4', '#', 0, 4 };
        int[] intArray53 = huffmanTree41.expand_array(intArray51, 0);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray60 = huffmanTree27.create_huffman_tree(intArray51, intArray59);
        int int62 = huffmanTree18.search_for_value(intArray60, (int) (short) 10);
        java.lang.Class<?> wildcardClass63 = intArray60.getClass();
        try {
            int[] intArray65 = huffmanTree0.expand_array(intArray60, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        int[] intArray23 = huffmanTree10.expand_array(intArray19, (int) (short) 1);
        int[] intArray24 = null;
        int[] intArray26 = huffmanTree10.expand_array(intArray24, (int) (short) 1);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        java.lang.Class<?> wildcardClass35 = huffmanTree29.getClass();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray47 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int49 = huffmanTree36.search_for_value(intArray47, 0);
        int int51 = huffmanTree29.search_for_value(intArray47, 0);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int[] intArray65 = huffmanTree52.expand_array(intArray61, (int) (short) 1);
        int[] intArray67 = new int[] { 4 };
        int int69 = huffmanTree52.search_for_value(intArray67, 4);
        int[] intArray70 = huffmanTree27.create_huffman_tree(intArray47, intArray67);
        java.lang.Class<?> wildcardClass71 = intArray67.getClass();
        java.lang.Class<?> wildcardClass72 = intArray67.getClass();
        int[] intArray74 = huffmanTree10.expand_array(intArray67, 0);
        int[] intArray76 = huffmanTree0.expand_array(intArray67, (int) (short) 1);
        HuffmanTree huffmanTree77 = new HuffmanTree();
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        int int85 = huffmanTree77.search_for_value(intArray83, (int) (short) 10);
        java.lang.Class<?> wildcardClass86 = intArray83.getClass();
        try {
            int int88 = huffmanTree0.search_for_value(intArray83, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray10 = new int[] { '4', '#', 0, 4 };
        int[] intArray12 = huffmanTree0.expand_array(intArray10, 0);
        HuffmanTree huffmanTree13 = new HuffmanTree();
        int[] intArray16 = new int[] { '4', (byte) 10 };
        int[] intArray18 = huffmanTree13.expand_array(intArray16, (-1));
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int[] intArray26 = huffmanTree13.expand_array(intArray22, (int) (short) 1);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray37 = new int[] { '4', '#', 0, 4 };
        int[] intArray39 = huffmanTree27.expand_array(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        java.lang.Class<?> wildcardClass41 = huffmanTree40.getClass();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int int49 = huffmanTree40.search_for_value(intArray45, (int) (byte) 10);
        int[] intArray50 = huffmanTree13.create_huffman_tree(intArray37, intArray45);
        java.lang.Class<?> wildcardClass51 = intArray45.getClass();
        java.lang.Class<?> wildcardClass52 = intArray45.getClass();
        int[] intArray54 = huffmanTree0.expand_array(intArray45, (int) (short) -1);
        java.lang.Class<?> wildcardClass55 = intArray45.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        int[] intArray33 = null;
        int[] intArray35 = huffmanTree0.expand_array(intArray33, (-1));
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        java.lang.Class<?> wildcardClass42 = huffmanTree36.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray54 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int56 = huffmanTree43.search_for_value(intArray54, 0);
        java.lang.Class<?> wildcardClass57 = intArray54.getClass();
        int int59 = huffmanTree36.search_for_value(intArray54, 0);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int[] intArray73 = huffmanTree60.expand_array(intArray69, (int) (short) 1);
        int[] intArray75 = new int[] { 4 };
        int int77 = huffmanTree60.search_for_value(intArray75, 4);
        java.lang.Class<?> wildcardClass78 = intArray75.getClass();
        int[] intArray80 = huffmanTree36.expand_array(intArray75, 0);
        try {
            int int82 = huffmanTree0.search_for_value(intArray75, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree1.search_for_value(intArray7, (int) (short) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        int[] intArray20 = new int[] { '4', '#', 0, 4 };
        int[] intArray22 = huffmanTree10.expand_array(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int int31 = huffmanTree23.search_for_value(intArray29, (int) (short) 10);
        java.lang.Class<?> wildcardClass32 = intArray29.getClass();
        int[] intArray33 = huffmanTree1.create_huffman_tree(intArray20, intArray29);
        int[] intArray35 = huffmanTree0.expand_array(intArray20, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        java.lang.Class<?> wildcardClass42 = huffmanTree36.getClass();
        java.lang.Class<?> wildcardClass43 = huffmanTree36.getClass();
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray57 = huffmanTree44.expand_array(intArray53, (int) (short) 1);
        int[] intArray59 = new int[] { 4 };
        int int61 = huffmanTree44.search_for_value(intArray59, 4);
        int[] intArray63 = huffmanTree36.expand_array(intArray59, (int) (byte) -1);
        try {
            int int65 = huffmanTree0.search_for_value(intArray59, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        java.lang.Class<?> wildcardClass3 = huffmanTree2.getClass();
        HuffmanTree huffmanTree4 = new HuffmanTree();
        int[] intArray7 = new int[] { '4', (byte) 10 };
        int[] intArray9 = huffmanTree4.expand_array(intArray7, (-1));
        int int11 = huffmanTree2.search_for_value(intArray7, (int) (byte) 10);
        HuffmanTree huffmanTree12 = new HuffmanTree();
        int[] intArray15 = new int[] { '4', (byte) 10 };
        int[] intArray17 = huffmanTree12.expand_array(intArray15, (-1));
        int[] intArray22 = new int[] { '4', '#', 0, 4 };
        int[] intArray24 = huffmanTree12.expand_array(intArray22, 0);
        java.lang.Class<?> wildcardClass25 = intArray24.getClass();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int[] intArray37 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int39 = huffmanTree26.search_for_value(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray51 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int53 = huffmanTree40.search_for_value(intArray51, 0);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray60 = huffmanTree26.create_huffman_tree(intArray51, intArray57);
        java.lang.Class<?> wildcardClass61 = huffmanTree26.getClass();
        java.lang.Class<?> wildcardClass62 = huffmanTree26.getClass();
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        int[] intArray76 = huffmanTree63.expand_array(intArray72, (int) (short) 1);
        java.lang.Class<?> wildcardClass77 = intArray72.getClass();
        int[] intArray79 = huffmanTree26.expand_array(intArray72, (int) (short) 1);
        int[] intArray80 = huffmanTree2.create_huffman_tree(intArray24, intArray72);
        int[] intArray82 = huffmanTree0.expand_array(intArray80, 0);
        HuffmanTree huffmanTree83 = new HuffmanTree();
        int[] intArray86 = new int[] { '4', (byte) 10 };
        int[] intArray88 = huffmanTree83.expand_array(intArray86, (-1));
        int[] intArray93 = new int[] { '4', '#', 0, 4 };
        int[] intArray95 = huffmanTree83.expand_array(intArray93, 0);
        java.lang.Class<?> wildcardClass96 = intArray93.getClass();
        try {
            int[] intArray98 = huffmanTree0.expand_array(intArray93, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass34 = huffmanTree0.getClass();
        int[] intArray35 = null;
        int[] intArray36 = null;
        try {
            int[] intArray37 = huffmanTree0.create_huffman_tree(intArray35, intArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        int[] intArray36 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int38 = huffmanTree25.search_for_value(intArray36, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray50 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int52 = huffmanTree39.search_for_value(intArray50, 0);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray59 = huffmanTree25.create_huffman_tree(intArray50, intArray56);
        int[] intArray61 = huffmanTree19.expand_array(intArray50, (int) (byte) 1);
        java.lang.Class<?> wildcardClass62 = intArray50.getClass();
        java.lang.Class<?> wildcardClass63 = intArray50.getClass();
        try {
            int[] intArray65 = huffmanTree0.expand_array(intArray50, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray33 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray51 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int53 = huffmanTree40.search_for_value(intArray51, 0);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray65 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int67 = huffmanTree54.search_for_value(intArray65, 0);
        HuffmanTree huffmanTree68 = new HuffmanTree();
        int[] intArray71 = new int[] { '4', (byte) 10 };
        int[] intArray73 = huffmanTree68.expand_array(intArray71, (-1));
        int[] intArray74 = huffmanTree40.create_huffman_tree(intArray65, intArray71);
        int[] intArray76 = huffmanTree34.expand_array(intArray65, (int) (byte) 1);
        java.lang.Class<?> wildcardClass77 = huffmanTree34.getClass();
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        HuffmanTree huffmanTree84 = new HuffmanTree();
        int[] intArray87 = new int[] { '4', (byte) 10 };
        int[] intArray89 = huffmanTree84.expand_array(intArray87, (-1));
        int[] intArray91 = huffmanTree78.expand_array(intArray87, (int) (short) 1);
        int[] intArray93 = new int[] { 4 };
        int int95 = huffmanTree78.search_for_value(intArray93, 4);
        int[] intArray97 = huffmanTree34.expand_array(intArray93, (int) (byte) 1);
        try {
            int[] intArray99 = huffmanTree0.expand_array(intArray93, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        java.lang.Class<?> wildcardClass8 = huffmanTree2.getClass();
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        int int24 = huffmanTree2.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        HuffmanTree huffmanTree31 = new HuffmanTree();
        int[] intArray34 = new int[] { '4', (byte) 10 };
        int[] intArray36 = huffmanTree31.expand_array(intArray34, (-1));
        int[] intArray38 = huffmanTree25.expand_array(intArray34, (int) (short) 1);
        int[] intArray40 = new int[] { 4 };
        int int42 = huffmanTree25.search_for_value(intArray40, 4);
        int[] intArray43 = huffmanTree0.create_huffman_tree(intArray20, intArray40);
        HuffmanTree huffmanTree44 = new HuffmanTree();
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray55 = new int[] { '4', '#', 0, 4 };
        int[] intArray57 = huffmanTree45.expand_array(intArray55, 0);
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int[] intArray68 = new int[] { '4', '#', 0, 4 };
        int[] intArray70 = huffmanTree58.expand_array(intArray68, 0);
        int[] intArray71 = huffmanTree44.create_huffman_tree(intArray55, intArray70);
        try {
            int[] intArray73 = huffmanTree0.expand_array(intArray70, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray10 = new int[] { '4', '#', 0, 4 };
        int[] intArray12 = huffmanTree0.expand_array(intArray10, 0);
        HuffmanTree huffmanTree13 = new HuffmanTree();
        int[] intArray16 = new int[] { '4', (byte) 10 };
        int[] intArray18 = huffmanTree13.expand_array(intArray16, (-1));
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int[] intArray26 = huffmanTree13.expand_array(intArray22, (int) (short) 1);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray37 = new int[] { '4', '#', 0, 4 };
        int[] intArray39 = huffmanTree27.expand_array(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        java.lang.Class<?> wildcardClass41 = huffmanTree40.getClass();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int int49 = huffmanTree40.search_for_value(intArray45, (int) (byte) 10);
        int[] intArray50 = huffmanTree13.create_huffman_tree(intArray37, intArray45);
        int[] intArray51 = null;
        try {
            int[] intArray52 = huffmanTree0.create_huffman_tree(intArray45, intArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray50);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        java.lang.Class<?> wildcardClass15 = huffmanTree14.getClass();
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        int int23 = huffmanTree14.search_for_value(intArray19, (int) (byte) 10);
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int[] intArray34 = new int[] { '4', '#', 0, 4 };
        int[] intArray36 = huffmanTree24.expand_array(intArray34, 0);
        java.lang.Class<?> wildcardClass37 = intArray36.getClass();
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        int[] intArray49 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int51 = huffmanTree38.search_for_value(intArray49, 0);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray63 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int65 = huffmanTree52.search_for_value(intArray63, 0);
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int[] intArray72 = huffmanTree38.create_huffman_tree(intArray63, intArray69);
        java.lang.Class<?> wildcardClass73 = huffmanTree38.getClass();
        java.lang.Class<?> wildcardClass74 = huffmanTree38.getClass();
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        HuffmanTree huffmanTree81 = new HuffmanTree();
        int[] intArray84 = new int[] { '4', (byte) 10 };
        int[] intArray86 = huffmanTree81.expand_array(intArray84, (-1));
        int[] intArray88 = huffmanTree75.expand_array(intArray84, (int) (short) 1);
        java.lang.Class<?> wildcardClass89 = intArray84.getClass();
        int[] intArray91 = huffmanTree38.expand_array(intArray84, (int) (short) 1);
        int[] intArray92 = huffmanTree14.create_huffman_tree(intArray36, intArray84);
        try {
            int int94 = huffmanTree0.search_for_value(intArray84, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        java.lang.Class<?> wildcardClass38 = huffmanTree0.getClass();
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray50 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int52 = huffmanTree39.search_for_value(intArray50, 0);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray64 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int66 = huffmanTree53.search_for_value(intArray64, 0);
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray73 = huffmanTree39.create_huffman_tree(intArray64, intArray70);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray84 = new int[] { '4', '#', 0, 4 };
        int[] intArray86 = huffmanTree74.expand_array(intArray84, 0);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        int[] intArray89 = huffmanTree39.expand_array(intArray86, (int) (byte) -1);
        java.lang.Class<?> wildcardClass90 = intArray86.getClass();
        java.lang.Class<?> wildcardClass91 = intArray86.getClass();
        int[] intArray93 = huffmanTree0.expand_array(intArray86, 1);
        int[] intArray94 = null;
        try {
            int[] intArray96 = huffmanTree0.expand_array(intArray94, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int int14 = huffmanTree6.search_for_value(intArray12, (int) (short) 10);
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray26 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int28 = huffmanTree15.search_for_value(intArray26, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray39 = new int[] { '4', '#', 0, 4 };
        int[] intArray41 = huffmanTree29.expand_array(intArray39, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int[] intArray48 = huffmanTree15.create_huffman_tree(intArray39, intArray47);
        int int50 = huffmanTree6.search_for_value(intArray48, (int) (short) 10);
        int[] intArray52 = huffmanTree0.expand_array(intArray48, (int) (byte) -1);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray64 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int66 = huffmanTree53.search_for_value(intArray64, 0);
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray77 = new int[] { '4', '#', 0, 4 };
        int[] intArray79 = huffmanTree67.expand_array(intArray77, 0);
        HuffmanTree huffmanTree80 = new HuffmanTree();
        int[] intArray83 = new int[] { '4', (byte) 10 };
        int[] intArray85 = huffmanTree80.expand_array(intArray83, (-1));
        int[] intArray86 = huffmanTree53.create_huffman_tree(intArray77, intArray85);
        try {
            int int88 = huffmanTree0.search_for_value(intArray77, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        HuffmanTree huffmanTree17 = new HuffmanTree();
        java.lang.Class<?> wildcardClass18 = huffmanTree17.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        java.lang.Class<?> wildcardClass25 = huffmanTree19.getClass();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int[] intArray37 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int39 = huffmanTree26.search_for_value(intArray37, 0);
        int int41 = huffmanTree19.search_for_value(intArray37, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray55 = huffmanTree42.expand_array(intArray51, (int) (short) 1);
        int[] intArray57 = new int[] { 4 };
        int int59 = huffmanTree42.search_for_value(intArray57, 4);
        int[] intArray60 = huffmanTree17.create_huffman_tree(intArray37, intArray57);
        java.lang.Class<?> wildcardClass61 = intArray57.getClass();
        java.lang.Class<?> wildcardClass62 = intArray57.getClass();
        int[] intArray64 = huffmanTree0.expand_array(intArray57, 0);
        java.lang.Class<?> wildcardClass65 = huffmanTree0.getClass();
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int[] intArray76 = new int[] { '4', '#', 0, 4 };
        int[] intArray78 = huffmanTree66.expand_array(intArray76, 0);
        try {
            int int80 = huffmanTree0.search_for_value(intArray76, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass37 = huffmanTree0.getClass();
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray51 = huffmanTree38.expand_array(intArray47, (int) (short) 1);
        int[] intArray52 = null;
        int[] intArray54 = huffmanTree38.expand_array(intArray52, (int) (short) 1);
        java.lang.Class<?> wildcardClass55 = huffmanTree38.getClass();
        HuffmanTree huffmanTree56 = new HuffmanTree();
        java.lang.Class<?> wildcardClass57 = huffmanTree56.getClass();
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int[] intArray68 = new int[] { '4', '#', 0, 4 };
        int[] intArray70 = huffmanTree58.expand_array(intArray68, 0);
        java.lang.Class<?> wildcardClass71 = intArray70.getClass();
        int[] intArray73 = huffmanTree56.expand_array(intArray70, 1);
        java.lang.Class<?> wildcardClass74 = intArray73.getClass();
        int int76 = huffmanTree38.search_for_value(intArray73, 0);
        try {
            int int78 = huffmanTree0.search_for_value(intArray73, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNull(intArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        int[] intArray32 = huffmanTree19.expand_array(intArray28, (int) (short) 1);
        java.lang.Class<?> wildcardClass33 = intArray28.getClass();
        java.lang.Class<?> wildcardClass34 = intArray28.getClass();
        try {
            int[] intArray36 = huffmanTree0.expand_array(intArray28, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int[] intArray13 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int15 = huffmanTree2.search_for_value(intArray13, 0);
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        int[] intArray26 = new int[] { '4', '#', 0, 4 };
        int[] intArray28 = huffmanTree16.expand_array(intArray26, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray35 = huffmanTree2.create_huffman_tree(intArray26, intArray34);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        int int44 = huffmanTree36.search_for_value(intArray42, (int) (short) 10);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray55 = new int[] { '4', '#', 0, 4 };
        int[] intArray57 = huffmanTree45.expand_array(intArray55, 0);
        HuffmanTree huffmanTree58 = new HuffmanTree();
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int int66 = huffmanTree58.search_for_value(intArray64, (int) (short) 10);
        java.lang.Class<?> wildcardClass67 = intArray64.getClass();
        int[] intArray68 = huffmanTree36.create_huffman_tree(intArray55, intArray64);
        try {
            int[] intArray69 = huffmanTree0.create_huffman_tree(intArray35, intArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        HuffmanTree huffmanTree17 = new HuffmanTree();
        java.lang.Class<?> wildcardClass18 = huffmanTree17.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int int26 = huffmanTree17.search_for_value(intArray22, (int) (byte) 10);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray37 = new int[] { '4', '#', 0, 4 };
        int[] intArray39 = huffmanTree27.expand_array(intArray37, 0);
        java.lang.Class<?> wildcardClass40 = intArray39.getClass();
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray52 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int54 = huffmanTree41.search_for_value(intArray52, 0);
        HuffmanTree huffmanTree55 = new HuffmanTree();
        int[] intArray58 = new int[] { '4', (byte) 10 };
        int[] intArray60 = huffmanTree55.expand_array(intArray58, (-1));
        int[] intArray66 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int68 = huffmanTree55.search_for_value(intArray66, 0);
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        int[] intArray75 = huffmanTree41.create_huffman_tree(intArray66, intArray72);
        java.lang.Class<?> wildcardClass76 = huffmanTree41.getClass();
        java.lang.Class<?> wildcardClass77 = huffmanTree41.getClass();
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        HuffmanTree huffmanTree84 = new HuffmanTree();
        int[] intArray87 = new int[] { '4', (byte) 10 };
        int[] intArray89 = huffmanTree84.expand_array(intArray87, (-1));
        int[] intArray91 = huffmanTree78.expand_array(intArray87, (int) (short) 1);
        java.lang.Class<?> wildcardClass92 = intArray87.getClass();
        int[] intArray94 = huffmanTree41.expand_array(intArray87, (int) (short) 1);
        int[] intArray95 = huffmanTree17.create_huffman_tree(intArray39, intArray87);
        java.lang.Class<?> wildcardClass96 = intArray87.getClass();
        try {
            int int98 = huffmanTree0.search_for_value(intArray87, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        java.lang.Class<?> wildcardClass43 = huffmanTree0.getClass();
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray57 = huffmanTree44.expand_array(intArray53, (int) (short) 1);
        int[] intArray59 = new int[] { 4 };
        int int61 = huffmanTree44.search_for_value(intArray59, 4);
        int[] intArray63 = huffmanTree0.expand_array(intArray59, (int) (byte) 1);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int int72 = huffmanTree64.search_for_value(intArray70, (int) (short) 10);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray83 = new int[] { '4', '#', 0, 4 };
        int[] intArray85 = huffmanTree73.expand_array(intArray83, 0);
        HuffmanTree huffmanTree86 = new HuffmanTree();
        HuffmanTree huffmanTree87 = new HuffmanTree();
        int[] intArray90 = new int[] { '4', (byte) 10 };
        int[] intArray92 = huffmanTree87.expand_array(intArray90, (-1));
        int int94 = huffmanTree86.search_for_value(intArray92, (int) (short) 10);
        java.lang.Class<?> wildcardClass95 = intArray92.getClass();
        int[] intArray96 = huffmanTree64.create_huffman_tree(intArray83, intArray92);
        int[] intArray98 = huffmanTree0.expand_array(intArray96, (int) (short) 0);
        java.lang.Class<?> wildcardClass99 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        java.lang.Class<?> wildcardClass7 = huffmanTree1.getClass();
        java.lang.Class<?> wildcardClass8 = huffmanTree1.getClass();
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray26 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int28 = huffmanTree15.search_for_value(intArray26, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray60 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int62 = huffmanTree49.search_for_value(intArray60, 0);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray69 = huffmanTree35.create_huffman_tree(intArray60, intArray66);
        int[] intArray71 = huffmanTree29.expand_array(intArray60, (int) (byte) 1);
        java.lang.Class<?> wildcardClass72 = intArray60.getClass();
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray84 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int86 = huffmanTree73.search_for_value(intArray84, 0);
        java.lang.Class<?> wildcardClass87 = intArray84.getClass();
        int[] intArray88 = huffmanTree15.create_huffman_tree(intArray60, intArray84);
        int[] intArray90 = huffmanTree9.expand_array(intArray84, 0);
        int[] intArray92 = huffmanTree1.expand_array(intArray84, (-1));
        try {
            int[] intArray94 = huffmanTree0.expand_array(intArray92, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray22 = huffmanTree9.expand_array(intArray18, (int) (short) 1);
        int[] intArray24 = new int[] { 4 };
        int int26 = huffmanTree9.search_for_value(intArray24, 4);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray46 = huffmanTree33.expand_array(intArray42, (int) (short) 1);
        int[] intArray47 = null;
        int[] intArray49 = huffmanTree33.expand_array(intArray47, (int) (short) 1);
        java.lang.Class<?> wildcardClass50 = huffmanTree33.getClass();
        HuffmanTree huffmanTree51 = new HuffmanTree();
        java.lang.Class<?> wildcardClass52 = huffmanTree51.getClass();
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray63 = new int[] { '4', '#', 0, 4 };
        int[] intArray65 = huffmanTree53.expand_array(intArray63, 0);
        java.lang.Class<?> wildcardClass66 = intArray65.getClass();
        int[] intArray68 = huffmanTree51.expand_array(intArray65, 1);
        java.lang.Class<?> wildcardClass69 = intArray68.getClass();
        int int71 = huffmanTree33.search_for_value(intArray68, 0);
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        int[] intArray85 = huffmanTree72.expand_array(intArray81, (int) (short) 1);
        int[] intArray86 = huffmanTree27.create_huffman_tree(intArray68, intArray81);
        java.lang.Class<?> wildcardClass87 = intArray81.getClass();
        try {
            int[] intArray88 = huffmanTree0.create_huffman_tree(intArray24, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNull(intArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray33 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int35 = huffmanTree22.search_for_value(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree8.create_huffman_tree(intArray33, intArray39);
        int[] intArray44 = huffmanTree2.expand_array(intArray33, (int) (byte) 1);
        int[] intArray46 = huffmanTree0.expand_array(intArray33, (int) (short) 0);
        java.lang.Class<?> wildcardClass47 = huffmanTree0.getClass();
        HuffmanTree huffmanTree48 = new HuffmanTree();
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int int56 = huffmanTree48.search_for_value(intArray54, (int) (short) 10);
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int[] intArray67 = new int[] { '4', '#', 0, 4 };
        int[] intArray69 = huffmanTree57.expand_array(intArray67, 0);
        HuffmanTree huffmanTree70 = new HuffmanTree();
        HuffmanTree huffmanTree71 = new HuffmanTree();
        int[] intArray74 = new int[] { '4', (byte) 10 };
        int[] intArray76 = huffmanTree71.expand_array(intArray74, (-1));
        int int78 = huffmanTree70.search_for_value(intArray76, (int) (short) 10);
        java.lang.Class<?> wildcardClass79 = intArray76.getClass();
        int[] intArray80 = huffmanTree48.create_huffman_tree(intArray67, intArray76);
        try {
            int[] intArray82 = huffmanTree0.expand_array(intArray67, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(intArray80);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        int int38 = huffmanTree0.search_for_value(intArray32, (int) (short) 10);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray50 = new int[] { '4', '#', 0, 4 };
        int[] intArray52 = huffmanTree40.expand_array(intArray50, 0);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray63 = new int[] { '4', '#', 0, 4 };
        int[] intArray65 = huffmanTree53.expand_array(intArray63, 0);
        int[] intArray66 = huffmanTree39.create_huffman_tree(intArray50, intArray65);
        java.lang.Class<?> wildcardClass67 = intArray66.getClass();
        try {
            int[] intArray69 = huffmanTree0.expand_array(intArray66, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        HuffmanTree huffmanTree12 = new HuffmanTree();
        HuffmanTree huffmanTree13 = new HuffmanTree();
        int[] intArray16 = new int[] { '4', (byte) 10 };
        int[] intArray18 = huffmanTree13.expand_array(intArray16, (-1));
        int int20 = huffmanTree12.search_for_value(intArray18, (int) (short) 10);
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        int[] intArray31 = new int[] { '4', '#', 0, 4 };
        int[] intArray33 = huffmanTree21.expand_array(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int int42 = huffmanTree34.search_for_value(intArray40, (int) (short) 10);
        java.lang.Class<?> wildcardClass43 = intArray40.getClass();
        int[] intArray44 = huffmanTree12.create_huffman_tree(intArray31, intArray40);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray55 = new int[] { '4', '#', 0, 4 };
        int[] intArray57 = huffmanTree45.expand_array(intArray55, 0);
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int[] intArray71 = huffmanTree58.expand_array(intArray67, (int) (short) 1);
        int[] intArray73 = new int[] { 4 };
        int int75 = huffmanTree58.search_for_value(intArray73, 4);
        int[] intArray76 = huffmanTree12.create_huffman_tree(intArray55, intArray73);
        java.lang.Class<?> wildcardClass77 = intArray73.getClass();
        try {
            int[] intArray78 = huffmanTree0.create_huffman_tree(intArray11, intArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray59 = new int[] { '4', '#', 0, 4 };
        int[] intArray61 = huffmanTree49.expand_array(intArray59, 0);
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        int[] intArray68 = huffmanTree35.create_huffman_tree(intArray59, intArray67);
        int[] intArray70 = huffmanTree0.expand_array(intArray68, (-1));
        java.lang.Class<?> wildcardClass71 = huffmanTree0.getClass();
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        int[] intArray82 = new int[] { '4', '#', 0, 4 };
        int[] intArray84 = huffmanTree72.expand_array(intArray82, 0);
        java.lang.Class<?> wildcardClass85 = intArray82.getClass();
        try {
            int[] intArray87 = huffmanTree0.expand_array(intArray82, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        HuffmanTree huffmanTree17 = new HuffmanTree();
        int[] intArray20 = new int[] { '4', (byte) 10 };
        int[] intArray22 = huffmanTree17.expand_array(intArray20, (-1));
        int[] intArray28 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int30 = huffmanTree17.search_for_value(intArray28, 0);
        HuffmanTree huffmanTree31 = new HuffmanTree();
        int[] intArray34 = new int[] { '4', (byte) 10 };
        int[] intArray36 = huffmanTree31.expand_array(intArray34, (-1));
        int[] intArray42 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int44 = huffmanTree31.search_for_value(intArray42, 0);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray51 = huffmanTree17.create_huffman_tree(intArray42, intArray48);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray63 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int65 = huffmanTree52.search_for_value(intArray63, 0);
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int[] intArray76 = new int[] { '4', '#', 0, 4 };
        int[] intArray78 = huffmanTree66.expand_array(intArray76, 0);
        HuffmanTree huffmanTree79 = new HuffmanTree();
        int[] intArray82 = new int[] { '4', (byte) 10 };
        int[] intArray84 = huffmanTree79.expand_array(intArray82, (-1));
        int[] intArray85 = huffmanTree52.create_huffman_tree(intArray76, intArray84);
        int[] intArray87 = huffmanTree17.expand_array(intArray85, (-1));
        try {
            int int89 = huffmanTree0.search_for_value(intArray87, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        java.lang.Class<?> wildcardClass14 = huffmanTree0.getClass();
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray26 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int28 = huffmanTree15.search_for_value(intArray26, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray40 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int42 = huffmanTree29.search_for_value(intArray40, 0);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray49 = huffmanTree15.create_huffman_tree(intArray40, intArray46);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray60 = new int[] { '4', '#', 0, 4 };
        int[] intArray62 = huffmanTree50.expand_array(intArray60, 0);
        java.lang.Class<?> wildcardClass63 = intArray62.getClass();
        int[] intArray65 = huffmanTree15.expand_array(intArray62, (int) (byte) -1);
        try {
            int[] intArray67 = huffmanTree0.expand_array(intArray62, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(intArray65);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass23 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass24 = huffmanTree0.getClass();
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        HuffmanTree huffmanTree31 = new HuffmanTree();
        int[] intArray34 = new int[] { '4', (byte) 10 };
        int[] intArray36 = huffmanTree31.expand_array(intArray34, (-1));
        int[] intArray38 = huffmanTree25.expand_array(intArray34, (int) (short) 1);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray49 = new int[] { '4', '#', 0, 4 };
        int[] intArray51 = huffmanTree39.expand_array(intArray49, 0);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        java.lang.Class<?> wildcardClass53 = huffmanTree52.getClass();
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int int61 = huffmanTree52.search_for_value(intArray57, (int) (byte) 10);
        int[] intArray62 = huffmanTree25.create_huffman_tree(intArray49, intArray57);
        try {
            int[] intArray64 = huffmanTree0.expand_array(intArray49, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(intArray62);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray39 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int41 = huffmanTree28.search_for_value(intArray39, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int[] intArray48 = huffmanTree14.create_huffman_tree(intArray39, intArray45);
        java.lang.Class<?> wildcardClass49 = huffmanTree14.getClass();
        java.lang.Class<?> wildcardClass50 = huffmanTree14.getClass();
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int[] intArray68 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int70 = huffmanTree57.search_for_value(intArray68, 0);
        HuffmanTree huffmanTree71 = new HuffmanTree();
        int[] intArray74 = new int[] { '4', (byte) 10 };
        int[] intArray76 = huffmanTree71.expand_array(intArray74, (-1));
        int[] intArray82 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int84 = huffmanTree71.search_for_value(intArray82, 0);
        HuffmanTree huffmanTree85 = new HuffmanTree();
        int[] intArray88 = new int[] { '4', (byte) 10 };
        int[] intArray90 = huffmanTree85.expand_array(intArray88, (-1));
        int[] intArray91 = huffmanTree57.create_huffman_tree(intArray82, intArray88);
        int[] intArray93 = huffmanTree51.expand_array(intArray82, (int) (byte) 1);
        int[] intArray95 = huffmanTree14.expand_array(intArray93, (-1));
        java.lang.Class<?> wildcardClass96 = intArray95.getClass();
        int[] intArray98 = huffmanTree0.expand_array(intArray95, 3);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        java.lang.Class<?> wildcardClass39 = huffmanTree38.getClass();
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int int47 = huffmanTree38.search_for_value(intArray43, (int) (byte) 10);
        int[] intArray49 = huffmanTree0.expand_array(intArray43, (int) (short) 1);
        int[] intArray50 = null;
        try {
            int int52 = huffmanTree0.search_for_value(intArray50, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray49);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass23 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass24 = huffmanTree0.getClass();
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        int[] intArray36 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int38 = huffmanTree25.search_for_value(intArray36, 0);
        java.lang.Class<?> wildcardClass39 = intArray36.getClass();
        java.lang.Class<?> wildcardClass40 = intArray36.getClass();
        try {
            int int42 = huffmanTree0.search_for_value(intArray36, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        int[] intArray40 = huffmanTree27.expand_array(intArray36, (int) (short) 1);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray51 = new int[] { '4', '#', 0, 4 };
        int[] intArray53 = huffmanTree41.expand_array(intArray51, 0);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        java.lang.Class<?> wildcardClass55 = huffmanTree54.getClass();
        HuffmanTree huffmanTree56 = new HuffmanTree();
        int[] intArray59 = new int[] { '4', (byte) 10 };
        int[] intArray61 = huffmanTree56.expand_array(intArray59, (-1));
        int int63 = huffmanTree54.search_for_value(intArray59, (int) (byte) 10);
        int[] intArray64 = huffmanTree27.create_huffman_tree(intArray51, intArray59);
        java.lang.Class<?> wildcardClass65 = intArray59.getClass();
        java.lang.Class<?> wildcardClass66 = intArray59.getClass();
        int[] intArray68 = huffmanTree14.expand_array(intArray59, (int) (short) -1);
        HuffmanTree huffmanTree69 = new HuffmanTree();
        java.lang.Class<?> wildcardClass70 = huffmanTree69.getClass();
        HuffmanTree huffmanTree71 = new HuffmanTree();
        int[] intArray74 = new int[] { '4', (byte) 10 };
        int[] intArray76 = huffmanTree71.expand_array(intArray74, (-1));
        int[] intArray81 = new int[] { '4', '#', 0, 4 };
        int[] intArray83 = huffmanTree71.expand_array(intArray81, 0);
        java.lang.Class<?> wildcardClass84 = intArray83.getClass();
        int[] intArray86 = huffmanTree69.expand_array(intArray83, 1);
        int[] intArray88 = huffmanTree14.expand_array(intArray86, 0);
        try {
            int int90 = huffmanTree0.search_for_value(intArray88, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray51 = huffmanTree38.expand_array(intArray47, (int) (short) 1);
        java.lang.Class<?> wildcardClass52 = intArray47.getClass();
        java.lang.Class<?> wildcardClass53 = intArray47.getClass();
        try {
            int int55 = huffmanTree0.search_for_value(intArray47, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray38 = new int[] { '4', '#', 0, 4 };
        int[] intArray40 = huffmanTree28.expand_array(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray47 = huffmanTree14.create_huffman_tree(intArray38, intArray46);
        int[] intArray49 = huffmanTree0.expand_array(intArray38, 0);
        java.lang.Class<?> wildcardClass50 = huffmanTree0.getClass();
        HuffmanTree huffmanTree51 = new HuffmanTree();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int int59 = huffmanTree51.search_for_value(intArray57, (int) (short) 10);
        java.lang.Class<?> wildcardClass60 = intArray57.getClass();
        java.lang.Class<?> wildcardClass61 = intArray57.getClass();
        try {
            int int63 = huffmanTree0.search_for_value(intArray57, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        java.lang.Class<?> wildcardClass8 = huffmanTree2.getClass();
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        int int24 = huffmanTree2.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        HuffmanTree huffmanTree31 = new HuffmanTree();
        int[] intArray34 = new int[] { '4', (byte) 10 };
        int[] intArray36 = huffmanTree31.expand_array(intArray34, (-1));
        int[] intArray38 = huffmanTree25.expand_array(intArray34, (int) (short) 1);
        int[] intArray40 = new int[] { 4 };
        int int42 = huffmanTree25.search_for_value(intArray40, 4);
        int[] intArray43 = huffmanTree0.create_huffman_tree(intArray20, intArray40);
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray54 = new int[] { '4', '#', 0, 4 };
        int[] intArray56 = huffmanTree44.expand_array(intArray54, 0);
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int[] intArray67 = new int[] { '4', '#', 0, 4 };
        int[] intArray69 = huffmanTree57.expand_array(intArray67, 0);
        java.lang.Class<?> wildcardClass70 = intArray69.getClass();
        int[] intArray71 = huffmanTree0.create_huffman_tree(intArray54, intArray69);
        int[] intArray72 = null;
        try {
            int[] intArray74 = huffmanTree0.expand_array(intArray72, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        java.lang.Class<?> wildcardClass14 = huffmanTree0.getClass();
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray26 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int28 = huffmanTree15.search_for_value(intArray26, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray40 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int42 = huffmanTree29.search_for_value(intArray40, 0);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray49 = huffmanTree15.create_huffman_tree(intArray40, intArray46);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray60 = new int[] { '4', '#', 0, 4 };
        int[] intArray62 = huffmanTree50.expand_array(intArray60, 0);
        java.lang.Class<?> wildcardClass63 = intArray62.getClass();
        int[] intArray65 = huffmanTree15.expand_array(intArray62, (int) (byte) -1);
        try {
            int int67 = huffmanTree0.search_for_value(intArray65, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(intArray65);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        int[] intArray20 = new int[] { '4', '#', 0, 4 };
        int[] intArray22 = huffmanTree10.expand_array(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray33 = new int[] { '4', '#', 0, 4 };
        int[] intArray35 = huffmanTree23.expand_array(intArray33, 0);
        int[] intArray36 = huffmanTree9.create_huffman_tree(intArray20, intArray35);
        int[] intArray38 = huffmanTree0.expand_array(intArray36, (int) (short) 1);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        HuffmanTree huffmanTree40 = new HuffmanTree();
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int int48 = huffmanTree40.search_for_value(intArray46, (int) (short) 10);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray59 = new int[] { '4', '#', 0, 4 };
        int[] intArray61 = huffmanTree49.expand_array(intArray59, 0);
        HuffmanTree huffmanTree62 = new HuffmanTree();
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int int70 = huffmanTree62.search_for_value(intArray68, (int) (short) 10);
        java.lang.Class<?> wildcardClass71 = intArray68.getClass();
        int[] intArray72 = huffmanTree40.create_huffman_tree(intArray59, intArray68);
        try {
            int[] intArray74 = huffmanTree0.expand_array(intArray59, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        java.lang.Class<?> wildcardClass19 = huffmanTree18.getClass();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        java.lang.Class<?> wildcardClass33 = intArray32.getClass();
        int[] intArray35 = huffmanTree18.expand_array(intArray32, 1);
        java.lang.Class<?> wildcardClass36 = intArray35.getClass();
        int int38 = huffmanTree0.search_for_value(intArray35, 0);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        HuffmanTree huffmanTree40 = new HuffmanTree();
        java.lang.Class<?> wildcardClass41 = huffmanTree40.getClass();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        java.lang.Class<?> wildcardClass48 = huffmanTree42.getClass();
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray60 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int62 = huffmanTree49.search_for_value(intArray60, 0);
        int int64 = huffmanTree42.search_for_value(intArray60, 0);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        HuffmanTree huffmanTree71 = new HuffmanTree();
        int[] intArray74 = new int[] { '4', (byte) 10 };
        int[] intArray76 = huffmanTree71.expand_array(intArray74, (-1));
        int[] intArray78 = huffmanTree65.expand_array(intArray74, (int) (short) 1);
        int[] intArray80 = new int[] { 4 };
        int int82 = huffmanTree65.search_for_value(intArray80, 4);
        int[] intArray83 = huffmanTree40.create_huffman_tree(intArray60, intArray80);
        java.lang.Class<?> wildcardClass84 = intArray80.getClass();
        java.lang.Class<?> wildcardClass85 = intArray80.getClass();
        try {
            int int87 = huffmanTree0.search_for_value(intArray80, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        java.lang.Class<?> wildcardClass34 = huffmanTree33.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        java.lang.Class<?> wildcardClass41 = huffmanTree35.getClass();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int[] intArray53 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int55 = huffmanTree42.search_for_value(intArray53, 0);
        int int57 = huffmanTree35.search_for_value(intArray53, 0);
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int[] intArray71 = huffmanTree58.expand_array(intArray67, (int) (short) 1);
        int[] intArray73 = new int[] { 4 };
        int int75 = huffmanTree58.search_for_value(intArray73, 4);
        int[] intArray76 = huffmanTree33.create_huffman_tree(intArray53, intArray73);
        java.lang.Class<?> wildcardClass77 = intArray53.getClass();
        int[] intArray79 = huffmanTree0.expand_array(intArray53, (int) (short) 1);
        HuffmanTree huffmanTree80 = new HuffmanTree();
        int[] intArray83 = new int[] { '4', (byte) 10 };
        int[] intArray85 = huffmanTree80.expand_array(intArray83, (-1));
        int[] intArray90 = new int[] { '4', '#', 0, 4 };
        int[] intArray92 = huffmanTree80.expand_array(intArray90, 0);
        try {
            int int94 = huffmanTree0.search_for_value(intArray90, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int[] intArray12 = new int[] { '4', '#', 0, 4 };
        int[] intArray14 = huffmanTree2.expand_array(intArray12, 0);
        java.lang.Class<?> wildcardClass15 = intArray14.getClass();
        int[] intArray17 = huffmanTree0.expand_array(intArray14, 1);
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int[] intArray31 = huffmanTree18.expand_array(intArray27, (int) (short) 1);
        HuffmanTree huffmanTree32 = new HuffmanTree();
        int[] intArray35 = new int[] { '4', (byte) 10 };
        int[] intArray37 = huffmanTree32.expand_array(intArray35, (-1));
        int[] intArray42 = new int[] { '4', '#', 0, 4 };
        int[] intArray44 = huffmanTree32.expand_array(intArray42, 0);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        java.lang.Class<?> wildcardClass46 = huffmanTree45.getClass();
        HuffmanTree huffmanTree47 = new HuffmanTree();
        int[] intArray50 = new int[] { '4', (byte) 10 };
        int[] intArray52 = huffmanTree47.expand_array(intArray50, (-1));
        int int54 = huffmanTree45.search_for_value(intArray50, (int) (byte) 10);
        int[] intArray55 = huffmanTree18.create_huffman_tree(intArray42, intArray50);
        java.lang.Class<?> wildcardClass56 = intArray42.getClass();
        try {
            int[] intArray58 = huffmanTree0.expand_array(intArray42, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int int27 = huffmanTree19.search_for_value(intArray25, (int) (short) 10);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray38 = new int[] { '4', '#', 0, 4 };
        int[] intArray40 = huffmanTree28.expand_array(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int int49 = huffmanTree41.search_for_value(intArray47, (int) (short) 10);
        java.lang.Class<?> wildcardClass50 = intArray47.getClass();
        int[] intArray51 = huffmanTree19.create_huffman_tree(intArray38, intArray47);
        java.lang.Class<?> wildcardClass52 = huffmanTree19.getClass();
        java.lang.Class<?> wildcardClass53 = huffmanTree19.getClass();
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray65 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int67 = huffmanTree54.search_for_value(intArray65, 0);
        int[] intArray69 = huffmanTree19.expand_array(intArray65, 0);
        java.lang.Class<?> wildcardClass70 = intArray65.getClass();
        java.lang.Class<?> wildcardClass71 = intArray65.getClass();
        try {
            int int73 = huffmanTree0.search_for_value(intArray65, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray15 = new int[] { 4 };
        int int17 = huffmanTree0.search_for_value(intArray15, 4);
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int[] intArray31 = huffmanTree18.expand_array(intArray27, (int) (short) 1);
        HuffmanTree huffmanTree32 = new HuffmanTree();
        int[] intArray35 = new int[] { '4', (byte) 10 };
        int[] intArray37 = huffmanTree32.expand_array(intArray35, (-1));
        int[] intArray43 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int45 = huffmanTree32.search_for_value(intArray43, 0);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray56 = new int[] { '4', '#', 0, 4 };
        int[] intArray58 = huffmanTree46.expand_array(intArray56, 0);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray65 = huffmanTree32.create_huffman_tree(intArray56, intArray64);
        java.lang.Class<?> wildcardClass66 = intArray56.getClass();
        HuffmanTree huffmanTree67 = new HuffmanTree();
        HuffmanTree huffmanTree68 = new HuffmanTree();
        int[] intArray71 = new int[] { '4', (byte) 10 };
        int[] intArray73 = huffmanTree68.expand_array(intArray71, (-1));
        int[] intArray78 = new int[] { '4', '#', 0, 4 };
        int[] intArray80 = huffmanTree68.expand_array(intArray78, 0);
        HuffmanTree huffmanTree81 = new HuffmanTree();
        int[] intArray84 = new int[] { '4', (byte) 10 };
        int[] intArray86 = huffmanTree81.expand_array(intArray84, (-1));
        int[] intArray91 = new int[] { '4', '#', 0, 4 };
        int[] intArray93 = huffmanTree81.expand_array(intArray91, 0);
        int[] intArray94 = huffmanTree67.create_huffman_tree(intArray78, intArray93);
        int[] intArray95 = huffmanTree18.create_huffman_tree(intArray56, intArray94);
        int[] intArray97 = huffmanTree0.expand_array(intArray94, (int) (byte) 0);
        java.lang.Class<?> wildcardClass98 = intArray94.getClass();
        java.lang.Class<?> wildcardClass99 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        java.lang.Class<?> wildcardClass14 = huffmanTree0.getClass();
        HuffmanTree huffmanTree15 = new HuffmanTree();
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        int int23 = huffmanTree15.search_for_value(intArray21, (int) (short) 10);
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int[] intArray34 = new int[] { '4', '#', 0, 4 };
        int[] intArray36 = huffmanTree24.expand_array(intArray34, 0);
        HuffmanTree huffmanTree37 = new HuffmanTree();
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        int int45 = huffmanTree37.search_for_value(intArray43, (int) (short) 10);
        java.lang.Class<?> wildcardClass46 = intArray43.getClass();
        int[] intArray47 = huffmanTree15.create_huffman_tree(intArray34, intArray43);
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray58 = new int[] { '4', '#', 0, 4 };
        int[] intArray60 = huffmanTree48.expand_array(intArray58, 0);
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray74 = huffmanTree61.expand_array(intArray70, (int) (short) 1);
        int[] intArray76 = new int[] { 4 };
        int int78 = huffmanTree61.search_for_value(intArray76, 4);
        int[] intArray79 = huffmanTree15.create_huffman_tree(intArray58, intArray76);
        java.lang.Class<?> wildcardClass80 = intArray58.getClass();
        java.lang.Class<?> wildcardClass81 = intArray58.getClass();
        try {
            int int83 = huffmanTree0.search_for_value(intArray58, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass23 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass24 = huffmanTree0.getClass();
        HuffmanTree huffmanTree25 = new HuffmanTree();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int int33 = huffmanTree25.search_for_value(intArray31, (int) (short) 10);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray44 = new int[] { '4', '#', 0, 4 };
        int[] intArray46 = huffmanTree34.expand_array(intArray44, 0);
        HuffmanTree huffmanTree47 = new HuffmanTree();
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int int55 = huffmanTree47.search_for_value(intArray53, (int) (short) 10);
        java.lang.Class<?> wildcardClass56 = intArray53.getClass();
        int[] intArray57 = huffmanTree25.create_huffman_tree(intArray44, intArray53);
        java.lang.Class<?> wildcardClass58 = intArray53.getClass();
        java.lang.Class<?> wildcardClass59 = intArray53.getClass();
        int int61 = huffmanTree0.search_for_value(intArray53, (int) (byte) 10);
        int[] intArray62 = null;
        try {
            int int64 = huffmanTree0.search_for_value(intArray62, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        java.lang.Class<?> wildcardClass20 = huffmanTree14.getClass();
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        int[] intArray32 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int34 = huffmanTree21.search_for_value(intArray32, 0);
        java.lang.Class<?> wildcardClass35 = intArray32.getClass();
        int int37 = huffmanTree14.search_for_value(intArray32, 0);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray51 = huffmanTree38.expand_array(intArray47, (int) (short) 1);
        int[] intArray53 = new int[] { 4 };
        int int55 = huffmanTree38.search_for_value(intArray53, 4);
        java.lang.Class<?> wildcardClass56 = intArray53.getClass();
        int[] intArray58 = huffmanTree14.expand_array(intArray53, 0);
        int[] intArray59 = null;
        try {
            int[] intArray60 = huffmanTree0.create_huffman_tree(intArray53, intArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(intArray58);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray33 = new int[] { '4', '#', 0, 4 };
        int[] intArray35 = huffmanTree23.expand_array(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree9.create_huffman_tree(intArray33, intArray41);
        java.lang.Class<?> wildcardClass43 = intArray42.getClass();
        int[] intArray45 = huffmanTree0.expand_array(intArray42, (int) (byte) 0);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        HuffmanTree huffmanTree47 = new HuffmanTree();
        int[] intArray50 = new int[] { '4', (byte) 10 };
        int[] intArray52 = huffmanTree47.expand_array(intArray50, (-1));
        int int54 = huffmanTree46.search_for_value(intArray52, (int) (short) 10);
        HuffmanTree huffmanTree55 = new HuffmanTree();
        HuffmanTree huffmanTree56 = new HuffmanTree();
        int[] intArray59 = new int[] { '4', (byte) 10 };
        int[] intArray61 = huffmanTree56.expand_array(intArray59, (-1));
        int[] intArray66 = new int[] { '4', '#', 0, 4 };
        int[] intArray68 = huffmanTree56.expand_array(intArray66, 0);
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        int[] intArray79 = new int[] { '4', '#', 0, 4 };
        int[] intArray81 = huffmanTree69.expand_array(intArray79, 0);
        int[] intArray82 = huffmanTree55.create_huffman_tree(intArray66, intArray81);
        int[] intArray84 = huffmanTree46.expand_array(intArray82, (int) (short) 1);
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        try {
            int[] intArray87 = huffmanTree0.expand_array(intArray84, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray45 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int47 = huffmanTree34.search_for_value(intArray45, 0);
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray54 = huffmanTree20.create_huffman_tree(intArray45, intArray51);
        int[] intArray56 = huffmanTree14.expand_array(intArray45, (int) (byte) 1);
        java.lang.Class<?> wildcardClass57 = intArray45.getClass();
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int[] intArray69 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int71 = huffmanTree58.search_for_value(intArray69, 0);
        java.lang.Class<?> wildcardClass72 = intArray69.getClass();
        int[] intArray73 = huffmanTree0.create_huffman_tree(intArray45, intArray69);
        java.lang.Class<?> wildcardClass74 = intArray45.getClass();
        java.lang.Class<?> wildcardClass75 = intArray45.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray59 = new int[] { '4', '#', 0, 4 };
        int[] intArray61 = huffmanTree49.expand_array(intArray59, 0);
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        int[] intArray68 = huffmanTree35.create_huffman_tree(intArray59, intArray67);
        int[] intArray70 = huffmanTree0.expand_array(intArray68, (-1));
        java.lang.Class<?> wildcardClass71 = intArray68.getClass();
        java.lang.Class<?> wildcardClass72 = intArray68.getClass();
        java.lang.Class<?> wildcardClass73 = intArray68.getClass();
        java.lang.Class<?> wildcardClass74 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray15 = new int[] { 4 };
        int int17 = huffmanTree0.search_for_value(intArray15, 4);
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        java.lang.Class<?> wildcardClass24 = huffmanTree18.getClass();
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        int[] intArray36 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int38 = huffmanTree25.search_for_value(intArray36, 0);
        int int40 = huffmanTree18.search_for_value(intArray36, 0);
        java.lang.Class<?> wildcardClass41 = huffmanTree18.getClass();
        java.lang.Class<?> wildcardClass42 = huffmanTree18.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int int51 = huffmanTree43.search_for_value(intArray49, (int) (short) 10);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray62 = new int[] { '4', '#', 0, 4 };
        int[] intArray64 = huffmanTree52.expand_array(intArray62, 0);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int int73 = huffmanTree65.search_for_value(intArray71, (int) (short) 10);
        java.lang.Class<?> wildcardClass74 = intArray71.getClass();
        int[] intArray75 = huffmanTree43.create_huffman_tree(intArray62, intArray71);
        java.lang.Class<?> wildcardClass76 = intArray71.getClass();
        java.lang.Class<?> wildcardClass77 = intArray71.getClass();
        int int79 = huffmanTree18.search_for_value(intArray71, (int) (byte) 10);
        java.lang.Class<?> wildcardClass80 = intArray71.getClass();
        int int82 = huffmanTree0.search_for_value(intArray71, (int) (byte) 10);
        HuffmanTree huffmanTree83 = new HuffmanTree();
        HuffmanTree huffmanTree84 = new HuffmanTree();
        int[] intArray87 = new int[] { '4', (byte) 10 };
        int[] intArray89 = huffmanTree84.expand_array(intArray87, (-1));
        int int91 = huffmanTree83.search_for_value(intArray89, (int) (short) 10);
        java.lang.Class<?> wildcardClass92 = intArray89.getClass();
        try {
            int int94 = huffmanTree0.search_for_value(intArray89, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        int[] intArray31 = new int[] { '4', '#', 0, 4 };
        int[] intArray33 = huffmanTree21.expand_array(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree7.create_huffman_tree(intArray31, intArray39);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        java.lang.Class<?> wildcardClass42 = huffmanTree41.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        java.lang.Class<?> wildcardClass49 = huffmanTree43.getClass();
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray61 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int63 = huffmanTree50.search_for_value(intArray61, 0);
        int int65 = huffmanTree43.search_for_value(intArray61, 0);
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        int[] intArray79 = huffmanTree66.expand_array(intArray75, (int) (short) 1);
        int[] intArray81 = new int[] { 4 };
        int int83 = huffmanTree66.search_for_value(intArray81, 4);
        int[] intArray84 = huffmanTree41.create_huffman_tree(intArray61, intArray81);
        int[] intArray85 = huffmanTree0.create_huffman_tree(intArray31, intArray81);
        java.lang.Class<?> wildcardClass86 = intArray31.getClass();
        java.lang.Class<?> wildcardClass87 = intArray31.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass23 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass24 = huffmanTree0.getClass();
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        HuffmanTree huffmanTree31 = new HuffmanTree();
        int[] intArray34 = new int[] { '4', (byte) 10 };
        int[] intArray36 = huffmanTree31.expand_array(intArray34, (-1));
        int[] intArray38 = huffmanTree25.expand_array(intArray34, (int) (short) 1);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray49 = new int[] { '4', '#', 0, 4 };
        int[] intArray51 = huffmanTree39.expand_array(intArray49, 0);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        java.lang.Class<?> wildcardClass53 = huffmanTree52.getClass();
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int int61 = huffmanTree52.search_for_value(intArray57, (int) (byte) 10);
        int[] intArray62 = huffmanTree25.create_huffman_tree(intArray49, intArray57);
        java.lang.Class<?> wildcardClass63 = intArray57.getClass();
        try {
            int int65 = huffmanTree0.search_for_value(intArray57, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray50 = huffmanTree37.expand_array(intArray46, (int) (short) 1);
        java.lang.Class<?> wildcardClass51 = intArray46.getClass();
        int[] intArray53 = huffmanTree0.expand_array(intArray46, (int) (short) 1);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        HuffmanTree huffmanTree55 = new HuffmanTree();
        int[] intArray58 = new int[] { '4', (byte) 10 };
        int[] intArray60 = huffmanTree55.expand_array(intArray58, (-1));
        int int62 = huffmanTree54.search_for_value(intArray60, (int) (short) 10);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray73 = new int[] { '4', '#', 0, 4 };
        int[] intArray75 = huffmanTree63.expand_array(intArray73, 0);
        HuffmanTree huffmanTree76 = new HuffmanTree();
        HuffmanTree huffmanTree77 = new HuffmanTree();
        int[] intArray80 = new int[] { '4', (byte) 10 };
        int[] intArray82 = huffmanTree77.expand_array(intArray80, (-1));
        int int84 = huffmanTree76.search_for_value(intArray82, (int) (short) 10);
        java.lang.Class<?> wildcardClass85 = intArray82.getClass();
        int[] intArray86 = huffmanTree54.create_huffman_tree(intArray73, intArray82);
        java.lang.Class<?> wildcardClass87 = intArray73.getClass();
        int[] intArray89 = huffmanTree0.expand_array(intArray73, (-1));
        java.lang.Class<?> wildcardClass90 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass91 = huffmanTree0.getClass();
        int[] intArray92 = null;
        try {
            int int94 = huffmanTree0.search_for_value(intArray92, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        java.lang.Class<?> wildcardClass15 = huffmanTree14.getClass();
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        java.lang.Class<?> wildcardClass22 = huffmanTree16.getClass();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray34 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int36 = huffmanTree23.search_for_value(intArray34, 0);
        int int38 = huffmanTree16.search_for_value(intArray34, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray52 = huffmanTree39.expand_array(intArray48, (int) (short) 1);
        int[] intArray54 = new int[] { 4 };
        int int56 = huffmanTree39.search_for_value(intArray54, 4);
        int[] intArray57 = huffmanTree14.create_huffman_tree(intArray34, intArray54);
        int[] intArray59 = huffmanTree0.expand_array(intArray54, (int) (short) 1);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray71 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int73 = huffmanTree60.search_for_value(intArray71, 0);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray85 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int87 = huffmanTree74.search_for_value(intArray85, 0);
        HuffmanTree huffmanTree88 = new HuffmanTree();
        int[] intArray91 = new int[] { '4', (byte) 10 };
        int[] intArray93 = huffmanTree88.expand_array(intArray91, (-1));
        int[] intArray94 = huffmanTree60.create_huffman_tree(intArray85, intArray91);
        int[] intArray96 = huffmanTree0.expand_array(intArray94, (int) (short) 1);
        int[] intArray97 = null;
        try {
            int[] intArray99 = huffmanTree0.expand_array(intArray97, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int int27 = huffmanTree19.search_for_value(intArray25, (int) (short) 10);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        java.lang.Class<?> wildcardClass29 = huffmanTree28.getClass();
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        java.lang.Class<?> wildcardClass36 = huffmanTree30.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        int[] intArray48 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int50 = huffmanTree37.search_for_value(intArray48, 0);
        int int52 = huffmanTree30.search_for_value(intArray48, 0);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray66 = huffmanTree53.expand_array(intArray62, (int) (short) 1);
        int[] intArray68 = new int[] { 4 };
        int int70 = huffmanTree53.search_for_value(intArray68, 4);
        int[] intArray71 = huffmanTree28.create_huffman_tree(intArray48, intArray68);
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        int[] intArray85 = huffmanTree72.expand_array(intArray81, (int) (short) 1);
        int[] intArray87 = new int[] { 4 };
        int int89 = huffmanTree72.search_for_value(intArray87, 4);
        java.lang.Class<?> wildcardClass90 = intArray87.getClass();
        int[] intArray91 = huffmanTree19.create_huffman_tree(intArray48, intArray87);
        java.lang.Class<?> wildcardClass92 = intArray48.getClass();
        java.lang.Class<?> wildcardClass93 = intArray48.getClass();
        java.lang.Class<?> wildcardClass94 = intArray48.getClass();
        try {
            int[] intArray96 = huffmanTree0.expand_array(intArray48, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int[] intArray11 = new int[] { '4', '#', 0, 4 };
        int[] intArray13 = huffmanTree1.expand_array(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        int[] intArray27 = huffmanTree0.create_huffman_tree(intArray11, intArray26);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        java.lang.Class<?> wildcardClass29 = huffmanTree28.getClass();
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray47 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int49 = huffmanTree36.search_for_value(intArray47, 0);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray61 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int63 = huffmanTree50.search_for_value(intArray61, 0);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int[] intArray70 = huffmanTree36.create_huffman_tree(intArray61, intArray67);
        int[] intArray72 = huffmanTree30.expand_array(intArray61, (int) (byte) 1);
        int[] intArray74 = huffmanTree28.expand_array(intArray61, (int) (short) 0);
        java.lang.Class<?> wildcardClass75 = intArray74.getClass();
        java.lang.Class<?> wildcardClass76 = intArray74.getClass();
        int int78 = huffmanTree0.search_for_value(intArray74, (int) (byte) 100);
        int[] intArray79 = null;
        try {
            int int81 = huffmanTree0.search_for_value(intArray79, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray54 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int56 = huffmanTree43.search_for_value(intArray54, 0);
        try {
            int[] intArray58 = huffmanTree0.expand_array(intArray54, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int[] intArray12 = new int[] { '4', '#', 0, 4 };
        int[] intArray14 = huffmanTree2.expand_array(intArray12, 0);
        java.lang.Class<?> wildcardClass15 = intArray14.getClass();
        int[] intArray17 = huffmanTree0.expand_array(intArray14, 1);
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        int[] intArray32 = huffmanTree19.expand_array(intArray28, (int) (short) 1);
        try {
            int int34 = huffmanTree0.search_for_value(intArray28, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        int int38 = huffmanTree0.search_for_value(intArray32, (int) (short) 10);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray56 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int58 = huffmanTree45.search_for_value(intArray56, 0);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray70 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int72 = huffmanTree59.search_for_value(intArray70, 0);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray79 = huffmanTree45.create_huffman_tree(intArray70, intArray76);
        int[] intArray81 = huffmanTree39.expand_array(intArray70, (int) (byte) 1);
        java.lang.Class<?> wildcardClass82 = intArray70.getClass();
        try {
            int int84 = huffmanTree0.search_for_value(intArray70, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        java.lang.Class<?> wildcardClass15 = huffmanTree14.getClass();
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        java.lang.Class<?> wildcardClass22 = huffmanTree16.getClass();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray34 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int36 = huffmanTree23.search_for_value(intArray34, 0);
        int int38 = huffmanTree16.search_for_value(intArray34, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray52 = huffmanTree39.expand_array(intArray48, (int) (short) 1);
        int[] intArray54 = new int[] { 4 };
        int int56 = huffmanTree39.search_for_value(intArray54, 4);
        int[] intArray57 = huffmanTree14.create_huffman_tree(intArray34, intArray54);
        int[] intArray59 = huffmanTree0.expand_array(intArray54, (int) (short) 1);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray71 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int73 = huffmanTree60.search_for_value(intArray71, 0);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray85 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int87 = huffmanTree74.search_for_value(intArray85, 0);
        HuffmanTree huffmanTree88 = new HuffmanTree();
        int[] intArray91 = new int[] { '4', (byte) 10 };
        int[] intArray93 = huffmanTree88.expand_array(intArray91, (-1));
        int[] intArray94 = huffmanTree60.create_huffman_tree(intArray85, intArray91);
        int[] intArray96 = huffmanTree0.expand_array(intArray94, (int) (short) 1);
        java.lang.Class<?> wildcardClass97 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass98 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass99 = huffmanTree0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
        org.junit.Assert.assertNotNull(wildcardClass98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        int[] intArray49 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int51 = huffmanTree38.search_for_value(intArray49, 0);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray63 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int65 = huffmanTree52.search_for_value(intArray63, 0);
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int[] intArray72 = huffmanTree38.create_huffman_tree(intArray63, intArray69);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray83 = new int[] { '4', '#', 0, 4 };
        int[] intArray85 = huffmanTree73.expand_array(intArray83, 0);
        java.lang.Class<?> wildcardClass86 = intArray85.getClass();
        int[] intArray88 = huffmanTree38.expand_array(intArray85, (int) (byte) -1);
        java.lang.Class<?> wildcardClass89 = intArray85.getClass();
        java.lang.Class<?> wildcardClass90 = intArray85.getClass();
        try {
            int int92 = huffmanTree0.search_for_value(intArray85, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int[] intArray12 = new int[] { '4', '#', 0, 4 };
        int[] intArray14 = huffmanTree2.expand_array(intArray12, 0);
        java.lang.Class<?> wildcardClass15 = intArray14.getClass();
        int[] intArray17 = huffmanTree0.expand_array(intArray14, 1);
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        java.lang.Class<?> wildcardClass24 = huffmanTree18.getClass();
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        int[] intArray36 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int38 = huffmanTree25.search_for_value(intArray36, 0);
        java.lang.Class<?> wildcardClass39 = intArray36.getClass();
        int int41 = huffmanTree18.search_for_value(intArray36, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray55 = huffmanTree42.expand_array(intArray51, (int) (short) 1);
        int[] intArray57 = new int[] { 4 };
        int int59 = huffmanTree42.search_for_value(intArray57, 4);
        java.lang.Class<?> wildcardClass60 = intArray57.getClass();
        int[] intArray62 = huffmanTree18.expand_array(intArray57, 0);
        try {
            int int64 = huffmanTree0.search_for_value(intArray62, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(intArray62);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        java.lang.Class<?> wildcardClass39 = huffmanTree38.getClass();
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int int47 = huffmanTree38.search_for_value(intArray43, (int) (byte) 10);
        int[] intArray49 = huffmanTree0.expand_array(intArray43, (int) (short) 1);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray60 = new int[] { '4', '#', 0, 4 };
        int[] intArray62 = huffmanTree50.expand_array(intArray60, 0);
        java.lang.Class<?> wildcardClass63 = intArray62.getClass();
        try {
            int int65 = huffmanTree0.search_for_value(intArray62, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int[] intArray37 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int39 = huffmanTree26.search_for_value(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray51 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int53 = huffmanTree40.search_for_value(intArray51, 0);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray60 = huffmanTree26.create_huffman_tree(intArray51, intArray57);
        int[] intArray62 = huffmanTree20.expand_array(intArray51, (int) (byte) 1);
        java.lang.Class<?> wildcardClass63 = intArray51.getClass();
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int[] intArray75 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int77 = huffmanTree64.search_for_value(intArray75, 0);
        java.lang.Class<?> wildcardClass78 = intArray75.getClass();
        int[] intArray79 = huffmanTree6.create_huffman_tree(intArray51, intArray75);
        int[] intArray81 = huffmanTree0.expand_array(intArray75, 0);
        HuffmanTree huffmanTree82 = new HuffmanTree();
        java.lang.Class<?> wildcardClass83 = huffmanTree82.getClass();
        HuffmanTree huffmanTree84 = new HuffmanTree();
        int[] intArray87 = new int[] { '4', (byte) 10 };
        int[] intArray89 = huffmanTree84.expand_array(intArray87, (-1));
        int int91 = huffmanTree82.search_for_value(intArray87, (int) (byte) 10);
        java.lang.Class<?> wildcardClass92 = intArray87.getClass();
        java.lang.Class<?> wildcardClass93 = intArray87.getClass();
        try {
            int[] intArray95 = huffmanTree0.expand_array(intArray87, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        java.lang.Class<?> wildcardClass43 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass44 = huffmanTree0.getClass();
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int[] intArray64 = huffmanTree51.expand_array(intArray60, (int) (short) 1);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int[] intArray75 = new int[] { '4', '#', 0, 4 };
        int[] intArray77 = huffmanTree65.expand_array(intArray75, 0);
        HuffmanTree huffmanTree78 = new HuffmanTree();
        java.lang.Class<?> wildcardClass79 = huffmanTree78.getClass();
        HuffmanTree huffmanTree80 = new HuffmanTree();
        int[] intArray83 = new int[] { '4', (byte) 10 };
        int[] intArray85 = huffmanTree80.expand_array(intArray83, (-1));
        int int87 = huffmanTree78.search_for_value(intArray83, (int) (byte) 10);
        int[] intArray88 = huffmanTree51.create_huffman_tree(intArray75, intArray83);
        try {
            int[] intArray89 = huffmanTree0.create_huffman_tree(intArray48, intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray51 = huffmanTree38.expand_array(intArray47, (int) (short) 1);
        int int53 = huffmanTree0.search_for_value(intArray47, 10);
        java.lang.Class<?> wildcardClass54 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass55 = huffmanTree0.getClass();
        HuffmanTree huffmanTree56 = new HuffmanTree();
        int[] intArray59 = new int[] { '4', (byte) 10 };
        int[] intArray61 = huffmanTree56.expand_array(intArray59, (-1));
        int[] intArray67 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int69 = huffmanTree56.search_for_value(intArray67, 0);
        HuffmanTree huffmanTree70 = new HuffmanTree();
        int[] intArray73 = new int[] { '4', (byte) 10 };
        int[] intArray75 = huffmanTree70.expand_array(intArray73, (-1));
        int[] intArray81 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int83 = huffmanTree70.search_for_value(intArray81, 0);
        HuffmanTree huffmanTree84 = new HuffmanTree();
        int[] intArray87 = new int[] { '4', (byte) 10 };
        int[] intArray89 = huffmanTree84.expand_array(intArray87, (-1));
        int[] intArray90 = huffmanTree56.create_huffman_tree(intArray81, intArray87);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        java.lang.Class<?> wildcardClass92 = intArray90.getClass();
        try {
            int[] intArray94 = huffmanTree0.expand_array(intArray90, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4 + "'", int83 == 4);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass23 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass24 = huffmanTree0.getClass();
        HuffmanTree huffmanTree25 = new HuffmanTree();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int int33 = huffmanTree25.search_for_value(intArray31, (int) (short) 10);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray44 = new int[] { '4', '#', 0, 4 };
        int[] intArray46 = huffmanTree34.expand_array(intArray44, 0);
        HuffmanTree huffmanTree47 = new HuffmanTree();
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int int55 = huffmanTree47.search_for_value(intArray53, (int) (short) 10);
        java.lang.Class<?> wildcardClass56 = intArray53.getClass();
        int[] intArray57 = huffmanTree25.create_huffman_tree(intArray44, intArray53);
        java.lang.Class<?> wildcardClass58 = intArray53.getClass();
        java.lang.Class<?> wildcardClass59 = intArray53.getClass();
        int int61 = huffmanTree0.search_for_value(intArray53, (int) (byte) 10);
        java.lang.Class<?> wildcardClass62 = intArray53.getClass();
        java.lang.Class<?> wildcardClass63 = intArray53.getClass();
        java.lang.Class<?> wildcardClass64 = intArray53.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        java.lang.Class<?> wildcardClass7 = huffmanTree1.getClass();
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        java.lang.Class<?> wildcardClass22 = intArray19.getClass();
        int int24 = huffmanTree1.search_for_value(intArray19, 0);
        try {
            int[] intArray26 = huffmanTree0.expand_array(intArray19, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        java.lang.Class<?> wildcardClass15 = huffmanTree14.getClass();
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        java.lang.Class<?> wildcardClass22 = huffmanTree16.getClass();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray34 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int36 = huffmanTree23.search_for_value(intArray34, 0);
        int int38 = huffmanTree16.search_for_value(intArray34, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray52 = huffmanTree39.expand_array(intArray48, (int) (short) 1);
        int[] intArray54 = new int[] { 4 };
        int int56 = huffmanTree39.search_for_value(intArray54, 4);
        int[] intArray57 = huffmanTree14.create_huffman_tree(intArray34, intArray54);
        int[] intArray59 = huffmanTree0.expand_array(intArray54, (int) (short) 1);
        java.lang.Class<?> wildcardClass60 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass61 = huffmanTree0.getClass();
        HuffmanTree huffmanTree62 = new HuffmanTree();
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray73 = new int[] { '4', '#', 0, 4 };
        int[] intArray75 = huffmanTree63.expand_array(intArray73, 0);
        HuffmanTree huffmanTree76 = new HuffmanTree();
        int[] intArray79 = new int[] { '4', (byte) 10 };
        int[] intArray81 = huffmanTree76.expand_array(intArray79, (-1));
        int[] intArray86 = new int[] { '4', '#', 0, 4 };
        int[] intArray88 = huffmanTree76.expand_array(intArray86, 0);
        int[] intArray89 = huffmanTree62.create_huffman_tree(intArray73, intArray88);
        try {
            int[] intArray91 = huffmanTree0.expand_array(intArray89, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int int26 = huffmanTree18.search_for_value(intArray24, (int) (short) 10);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray37 = new int[] { '4', '#', 0, 4 };
        int[] intArray39 = huffmanTree27.expand_array(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int int48 = huffmanTree40.search_for_value(intArray46, (int) (short) 10);
        java.lang.Class<?> wildcardClass49 = intArray46.getClass();
        int[] intArray50 = huffmanTree18.create_huffman_tree(intArray37, intArray46);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int int59 = huffmanTree51.search_for_value(intArray57, (int) (short) 10);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray71 = new int[] { '4', '#', 0, 4 };
        int[] intArray73 = huffmanTree61.expand_array(intArray71, 0);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray84 = new int[] { '4', '#', 0, 4 };
        int[] intArray86 = huffmanTree74.expand_array(intArray84, 0);
        int[] intArray87 = huffmanTree60.create_huffman_tree(intArray71, intArray86);
        int[] intArray89 = huffmanTree51.expand_array(intArray87, (int) (short) 1);
        int[] intArray91 = huffmanTree18.expand_array(intArray87, (-1));
        try {
            int[] intArray93 = huffmanTree0.expand_array(intArray87, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray15 = new int[] { 4 };
        int int17 = huffmanTree0.search_for_value(intArray15, 4);
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int[] intArray31 = huffmanTree18.expand_array(intArray27, (int) (short) 1);
        HuffmanTree huffmanTree32 = new HuffmanTree();
        int[] intArray35 = new int[] { '4', (byte) 10 };
        int[] intArray37 = huffmanTree32.expand_array(intArray35, (-1));
        int[] intArray43 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int45 = huffmanTree32.search_for_value(intArray43, 0);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray56 = new int[] { '4', '#', 0, 4 };
        int[] intArray58 = huffmanTree46.expand_array(intArray56, 0);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray65 = huffmanTree32.create_huffman_tree(intArray56, intArray64);
        java.lang.Class<?> wildcardClass66 = intArray56.getClass();
        HuffmanTree huffmanTree67 = new HuffmanTree();
        HuffmanTree huffmanTree68 = new HuffmanTree();
        int[] intArray71 = new int[] { '4', (byte) 10 };
        int[] intArray73 = huffmanTree68.expand_array(intArray71, (-1));
        int[] intArray78 = new int[] { '4', '#', 0, 4 };
        int[] intArray80 = huffmanTree68.expand_array(intArray78, 0);
        HuffmanTree huffmanTree81 = new HuffmanTree();
        int[] intArray84 = new int[] { '4', (byte) 10 };
        int[] intArray86 = huffmanTree81.expand_array(intArray84, (-1));
        int[] intArray91 = new int[] { '4', '#', 0, 4 };
        int[] intArray93 = huffmanTree81.expand_array(intArray91, 0);
        int[] intArray94 = huffmanTree67.create_huffman_tree(intArray78, intArray93);
        int[] intArray95 = huffmanTree18.create_huffman_tree(intArray56, intArray94);
        int[] intArray97 = huffmanTree0.expand_array(intArray94, (int) (byte) 0);
        java.lang.Class<?> wildcardClass98 = intArray97.getClass();
        java.lang.Class<?> wildcardClass99 = intArray97.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray10 = new int[] { '4', '#', 0, 4 };
        int[] intArray12 = huffmanTree0.expand_array(intArray10, 0);
        int[] intArray13 = null;
        try {
            int int15 = huffmanTree0.search_for_value(intArray13, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray45 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int47 = huffmanTree34.search_for_value(intArray45, 0);
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray58 = new int[] { '4', '#', 0, 4 };
        int[] intArray60 = huffmanTree48.expand_array(intArray58, 0);
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray67 = huffmanTree34.create_huffman_tree(intArray58, intArray66);
        java.lang.Class<?> wildcardClass68 = intArray67.getClass();
        int[] intArray70 = huffmanTree0.expand_array(intArray67, (int) (byte) -1);
        HuffmanTree huffmanTree71 = new HuffmanTree();
        int[] intArray74 = new int[] { '4', (byte) 10 };
        int[] intArray76 = huffmanTree71.expand_array(intArray74, (-1));
        HuffmanTree huffmanTree77 = new HuffmanTree();
        int[] intArray80 = new int[] { '4', (byte) 10 };
        int[] intArray82 = huffmanTree77.expand_array(intArray80, (-1));
        int[] intArray84 = huffmanTree71.expand_array(intArray80, (int) (short) 1);
        int[] intArray86 = new int[] { 4 };
        int int88 = huffmanTree71.search_for_value(intArray86, 4);
        java.lang.Class<?> wildcardClass89 = intArray86.getClass();
        int[] intArray91 = huffmanTree0.expand_array(intArray86, (int) (byte) 0);
        int[] intArray92 = null;
        try {
            int[] intArray94 = huffmanTree0.expand_array(intArray92, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        java.lang.Class<?> wildcardClass43 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass44 = huffmanTree0.getClass();
        HuffmanTree huffmanTree45 = new HuffmanTree();
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray56 = new int[] { '4', '#', 0, 4 };
        int[] intArray58 = huffmanTree46.expand_array(intArray56, 0);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray69 = new int[] { '4', '#', 0, 4 };
        int[] intArray71 = huffmanTree59.expand_array(intArray69, 0);
        int[] intArray72 = huffmanTree45.create_huffman_tree(intArray56, intArray71);
        java.lang.Class<?> wildcardClass73 = intArray72.getClass();
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray84 = new int[] { '4', '#', 0, 4 };
        int[] intArray86 = huffmanTree74.expand_array(intArray84, 0);
        int[] intArray87 = huffmanTree0.create_huffman_tree(intArray72, intArray86);
        int[] intArray88 = null;
        try {
            int int90 = huffmanTree0.search_for_value(intArray88, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        HuffmanTree huffmanTree12 = new HuffmanTree();
        int[] intArray15 = new int[] { '4', (byte) 10 };
        int[] intArray17 = huffmanTree12.expand_array(intArray15, (-1));
        int[] intArray19 = huffmanTree6.expand_array(intArray15, (int) (short) 1);
        try {
            int int21 = huffmanTree0.search_for_value(intArray19, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        java.lang.Class<?> wildcardClass34 = huffmanTree33.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        java.lang.Class<?> wildcardClass41 = huffmanTree35.getClass();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int[] intArray53 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int55 = huffmanTree42.search_for_value(intArray53, 0);
        int int57 = huffmanTree35.search_for_value(intArray53, 0);
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int[] intArray71 = huffmanTree58.expand_array(intArray67, (int) (short) 1);
        int[] intArray73 = new int[] { 4 };
        int int75 = huffmanTree58.search_for_value(intArray73, 4);
        int[] intArray76 = huffmanTree33.create_huffman_tree(intArray53, intArray73);
        java.lang.Class<?> wildcardClass77 = intArray53.getClass();
        int[] intArray79 = huffmanTree0.expand_array(intArray53, (int) (short) 1);
        int[] intArray80 = null;
        try {
            int int82 = huffmanTree0.search_for_value(intArray80, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int int51 = huffmanTree43.search_for_value(intArray49, (int) (short) 10);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray63 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int65 = huffmanTree52.search_for_value(intArray63, 0);
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int[] intArray76 = new int[] { '4', '#', 0, 4 };
        int[] intArray78 = huffmanTree66.expand_array(intArray76, 0);
        HuffmanTree huffmanTree79 = new HuffmanTree();
        int[] intArray82 = new int[] { '4', (byte) 10 };
        int[] intArray84 = huffmanTree79.expand_array(intArray82, (-1));
        int[] intArray85 = huffmanTree52.create_huffman_tree(intArray76, intArray84);
        java.lang.Class<?> wildcardClass86 = intArray85.getClass();
        int[] intArray88 = huffmanTree43.expand_array(intArray85, (int) (byte) 0);
        try {
            int[] intArray90 = huffmanTree0.expand_array(intArray88, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray10 = new int[] { '4', '#', 0, 4 };
        int[] intArray12 = huffmanTree0.expand_array(intArray10, 0);
        HuffmanTree huffmanTree13 = new HuffmanTree();
        int[] intArray16 = new int[] { '4', (byte) 10 };
        int[] intArray18 = huffmanTree13.expand_array(intArray16, (-1));
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int[] intArray26 = huffmanTree13.expand_array(intArray22, (int) (short) 1);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray37 = new int[] { '4', '#', 0, 4 };
        int[] intArray39 = huffmanTree27.expand_array(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        java.lang.Class<?> wildcardClass41 = huffmanTree40.getClass();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int int49 = huffmanTree40.search_for_value(intArray45, (int) (byte) 10);
        int[] intArray50 = huffmanTree13.create_huffman_tree(intArray37, intArray45);
        java.lang.Class<?> wildcardClass51 = intArray45.getClass();
        java.lang.Class<?> wildcardClass52 = intArray45.getClass();
        int[] intArray54 = huffmanTree0.expand_array(intArray45, (int) (short) -1);
        int[] intArray55 = null;
        try {
            int int57 = huffmanTree0.search_for_value(intArray55, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(intArray54);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        int int38 = huffmanTree0.search_for_value(intArray32, (int) (short) 10);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        int[] intArray40 = null;
        try {
            int int42 = huffmanTree0.search_for_value(intArray40, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass21 = intArray18.getClass();
        int int23 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        int[] intArray37 = huffmanTree24.expand_array(intArray33, (int) (short) 1);
        int[] intArray39 = new int[] { 4 };
        int int41 = huffmanTree24.search_for_value(intArray39, 4);
        java.lang.Class<?> wildcardClass42 = intArray39.getClass();
        int[] intArray44 = huffmanTree0.expand_array(intArray39, 0);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int[] intArray58 = huffmanTree45.expand_array(intArray54, (int) (short) 1);
        java.lang.Class<?> wildcardClass59 = intArray54.getClass();
        java.lang.Class<?> wildcardClass60 = intArray54.getClass();
        try {
            int int62 = huffmanTree0.search_for_value(intArray54, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass34 = huffmanTree0.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        java.lang.Class<?> wildcardClass36 = huffmanTree35.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        int int44 = huffmanTree35.search_for_value(intArray40, (int) (byte) 10);
        java.lang.Class<?> wildcardClass45 = intArray40.getClass();
        try {
            int[] intArray47 = huffmanTree0.expand_array(intArray40, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray10 = new int[] { '4', '#', 0, 4 };
        int[] intArray12 = huffmanTree0.expand_array(intArray10, 0);
        HuffmanTree huffmanTree13 = new HuffmanTree();
        int[] intArray16 = new int[] { '4', (byte) 10 };
        int[] intArray18 = huffmanTree13.expand_array(intArray16, (-1));
        int[] intArray24 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int26 = huffmanTree13.search_for_value(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray38 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int40 = huffmanTree27.search_for_value(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray47 = huffmanTree13.create_huffman_tree(intArray38, intArray44);
        java.lang.Class<?> wildcardClass48 = intArray47.getClass();
        java.lang.Class<?> wildcardClass49 = intArray47.getClass();
        java.lang.Class<?> wildcardClass50 = intArray47.getClass();
        try {
            int[] intArray52 = huffmanTree0.expand_array(intArray47, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        java.lang.Class<?> wildcardClass43 = huffmanTree0.getClass();
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray57 = huffmanTree44.expand_array(intArray53, (int) (short) 1);
        int[] intArray59 = new int[] { 4 };
        int int61 = huffmanTree44.search_for_value(intArray59, 4);
        int[] intArray63 = huffmanTree0.expand_array(intArray59, (int) (byte) 1);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int int72 = huffmanTree64.search_for_value(intArray70, (int) (short) 10);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray83 = new int[] { '4', '#', 0, 4 };
        int[] intArray85 = huffmanTree73.expand_array(intArray83, 0);
        HuffmanTree huffmanTree86 = new HuffmanTree();
        HuffmanTree huffmanTree87 = new HuffmanTree();
        int[] intArray90 = new int[] { '4', (byte) 10 };
        int[] intArray92 = huffmanTree87.expand_array(intArray90, (-1));
        int int94 = huffmanTree86.search_for_value(intArray92, (int) (short) 10);
        java.lang.Class<?> wildcardClass95 = intArray92.getClass();
        int[] intArray96 = huffmanTree64.create_huffman_tree(intArray83, intArray92);
        int[] intArray98 = huffmanTree0.expand_array(intArray96, (int) (short) 0);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        java.lang.Class<?> wildcardClass20 = huffmanTree19.getClass();
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        java.lang.Class<?> wildcardClass27 = huffmanTree21.getClass();
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray39 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int41 = huffmanTree28.search_for_value(intArray39, 0);
        int int43 = huffmanTree21.search_for_value(intArray39, 0);
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray57 = huffmanTree44.expand_array(intArray53, (int) (short) 1);
        int[] intArray59 = new int[] { 4 };
        int int61 = huffmanTree44.search_for_value(intArray59, 4);
        int[] intArray62 = huffmanTree19.create_huffman_tree(intArray39, intArray59);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray73 = new int[] { '4', '#', 0, 4 };
        int[] intArray75 = huffmanTree63.expand_array(intArray73, 0);
        HuffmanTree huffmanTree76 = new HuffmanTree();
        int[] intArray79 = new int[] { '4', (byte) 10 };
        int[] intArray81 = huffmanTree76.expand_array(intArray79, (-1));
        int[] intArray86 = new int[] { '4', '#', 0, 4 };
        int[] intArray88 = huffmanTree76.expand_array(intArray86, 0);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        int[] intArray90 = huffmanTree19.create_huffman_tree(intArray73, intArray88);
        java.lang.Class<?> wildcardClass91 = intArray88.getClass();
        try {
            int[] intArray93 = huffmanTree0.expand_array(intArray88, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int int26 = huffmanTree18.search_for_value(intArray24, (int) (short) 10);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray37 = new int[] { '4', '#', 0, 4 };
        int[] intArray39 = huffmanTree27.expand_array(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int int48 = huffmanTree40.search_for_value(intArray46, (int) (short) 10);
        java.lang.Class<?> wildcardClass49 = intArray46.getClass();
        int[] intArray50 = huffmanTree18.create_huffman_tree(intArray37, intArray46);
        java.lang.Class<?> wildcardClass51 = huffmanTree18.getClass();
        java.lang.Class<?> wildcardClass52 = huffmanTree18.getClass();
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray63 = new int[] { '4', '#', 0, 4 };
        int[] intArray65 = huffmanTree53.expand_array(intArray63, 0);
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int[] intArray77 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int79 = huffmanTree66.search_for_value(intArray77, 0);
        java.lang.Class<?> wildcardClass80 = intArray77.getClass();
        java.lang.Class<?> wildcardClass81 = intArray77.getClass();
        int[] intArray82 = huffmanTree18.create_huffman_tree(intArray63, intArray77);
        int[] intArray83 = null;
        try {
            int[] intArray84 = huffmanTree0.create_huffman_tree(intArray63, intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4 + "'", int79 == 4);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int[] intArray12 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int14 = huffmanTree1.search_for_value(intArray12, 0);
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray26 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int28 = huffmanTree15.search_for_value(intArray26, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray35 = huffmanTree1.create_huffman_tree(intArray26, intArray32);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray47 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int49 = huffmanTree36.search_for_value(intArray47, 0);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray60 = new int[] { '4', '#', 0, 4 };
        int[] intArray62 = huffmanTree50.expand_array(intArray60, 0);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray69 = huffmanTree36.create_huffman_tree(intArray60, intArray68);
        java.lang.Class<?> wildcardClass70 = intArray60.getClass();
        java.lang.Class<?> wildcardClass71 = intArray60.getClass();
        try {
            int[] intArray72 = huffmanTree0.create_huffman_tree(intArray32, intArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray50 = huffmanTree37.expand_array(intArray46, (int) (short) 1);
        java.lang.Class<?> wildcardClass51 = intArray46.getClass();
        int[] intArray53 = huffmanTree0.expand_array(intArray46, (int) (short) 1);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        java.lang.Class<?> wildcardClass55 = huffmanTree54.getClass();
        HuffmanTree huffmanTree56 = new HuffmanTree();
        int[] intArray59 = new int[] { '4', (byte) 10 };
        int[] intArray61 = huffmanTree56.expand_array(intArray59, (-1));
        java.lang.Class<?> wildcardClass62 = huffmanTree56.getClass();
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray74 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int76 = huffmanTree63.search_for_value(intArray74, 0);
        int int78 = huffmanTree56.search_for_value(intArray74, 0);
        HuffmanTree huffmanTree79 = new HuffmanTree();
        int[] intArray82 = new int[] { '4', (byte) 10 };
        int[] intArray84 = huffmanTree79.expand_array(intArray82, (-1));
        HuffmanTree huffmanTree85 = new HuffmanTree();
        int[] intArray88 = new int[] { '4', (byte) 10 };
        int[] intArray90 = huffmanTree85.expand_array(intArray88, (-1));
        int[] intArray92 = huffmanTree79.expand_array(intArray88, (int) (short) 1);
        int[] intArray94 = new int[] { 4 };
        int int96 = huffmanTree79.search_for_value(intArray94, 4);
        int[] intArray97 = huffmanTree54.create_huffman_tree(intArray74, intArray94);
        try {
            int int99 = huffmanTree0.search_for_value(intArray94, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        int[] intArray43 = new int[] { '4', '#', 0, 4 };
        int[] intArray45 = huffmanTree33.expand_array(intArray43, 0);
        int[] intArray46 = huffmanTree19.create_huffman_tree(intArray30, intArray45);
        int int48 = huffmanTree0.search_for_value(intArray30, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        java.lang.Class<?> wildcardClass50 = huffmanTree49.getClass();
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        java.lang.Class<?> wildcardClass57 = huffmanTree51.getClass();
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int[] intArray69 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int71 = huffmanTree58.search_for_value(intArray69, 0);
        int int73 = huffmanTree51.search_for_value(intArray69, 0);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        HuffmanTree huffmanTree80 = new HuffmanTree();
        int[] intArray83 = new int[] { '4', (byte) 10 };
        int[] intArray85 = huffmanTree80.expand_array(intArray83, (-1));
        int[] intArray87 = huffmanTree74.expand_array(intArray83, (int) (short) 1);
        int[] intArray89 = new int[] { 4 };
        int int91 = huffmanTree74.search_for_value(intArray89, 4);
        int[] intArray92 = huffmanTree49.create_huffman_tree(intArray69, intArray89);
        try {
            int int94 = huffmanTree0.search_for_value(intArray92, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        int[] intArray20 = new int[] { '4', '#', 0, 4 };
        int[] intArray22 = huffmanTree10.expand_array(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray33 = new int[] { '4', '#', 0, 4 };
        int[] intArray35 = huffmanTree23.expand_array(intArray33, 0);
        int[] intArray36 = huffmanTree9.create_huffman_tree(intArray20, intArray35);
        int[] intArray38 = huffmanTree0.expand_array(intArray36, (int) (short) 1);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray53 = huffmanTree40.expand_array(intArray49, (int) (short) 1);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray64 = new int[] { '4', '#', 0, 4 };
        int[] intArray66 = huffmanTree54.expand_array(intArray64, 0);
        HuffmanTree huffmanTree67 = new HuffmanTree();
        java.lang.Class<?> wildcardClass68 = huffmanTree67.getClass();
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        int int76 = huffmanTree67.search_for_value(intArray72, (int) (byte) 10);
        int[] intArray77 = huffmanTree40.create_huffman_tree(intArray64, intArray72);
        java.lang.Class<?> wildcardClass78 = intArray72.getClass();
        try {
            int int80 = huffmanTree0.search_for_value(intArray72, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        java.lang.Class<?> wildcardClass12 = huffmanTree6.getClass();
        HuffmanTree huffmanTree13 = new HuffmanTree();
        int[] intArray16 = new int[] { '4', (byte) 10 };
        int[] intArray18 = huffmanTree13.expand_array(intArray16, (-1));
        int[] intArray24 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int26 = huffmanTree13.search_for_value(intArray24, 0);
        int int28 = huffmanTree6.search_for_value(intArray24, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray42 = huffmanTree29.expand_array(intArray38, (int) (short) 1);
        int int44 = huffmanTree6.search_for_value(intArray38, (int) (short) 10);
        java.lang.Class<?> wildcardClass45 = huffmanTree6.getClass();
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray57 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int59 = huffmanTree46.search_for_value(intArray57, 0);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray70 = new int[] { '4', '#', 0, 4 };
        int[] intArray72 = huffmanTree60.expand_array(intArray70, 0);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray79 = huffmanTree46.create_huffman_tree(intArray70, intArray78);
        java.lang.Class<?> wildcardClass80 = intArray79.getClass();
        int[] intArray82 = huffmanTree6.expand_array(intArray79, (int) (short) 1);
        try {
            int int84 = huffmanTree0.search_for_value(intArray82, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray38 = new int[] { '4', '#', 0, 4 };
        int[] intArray40 = huffmanTree28.expand_array(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray47 = huffmanTree14.create_huffman_tree(intArray38, intArray46);
        try {
            int int49 = huffmanTree0.search_for_value(intArray38, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        java.lang.Class<?> wildcardClass10 = huffmanTree9.getClass();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        int[] intArray14 = new int[] { '4', (byte) 10 };
        int[] intArray16 = huffmanTree11.expand_array(intArray14, (-1));
        java.lang.Class<?> wildcardClass17 = huffmanTree11.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        int[] intArray29 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int31 = huffmanTree18.search_for_value(intArray29, 0);
        int int33 = huffmanTree11.search_for_value(intArray29, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray47 = huffmanTree34.expand_array(intArray43, (int) (short) 1);
        int[] intArray49 = new int[] { 4 };
        int int51 = huffmanTree34.search_for_value(intArray49, 4);
        int[] intArray52 = huffmanTree9.create_huffman_tree(intArray29, intArray49);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray66 = huffmanTree53.expand_array(intArray62, (int) (short) 1);
        int[] intArray68 = new int[] { 4 };
        int int70 = huffmanTree53.search_for_value(intArray68, 4);
        java.lang.Class<?> wildcardClass71 = intArray68.getClass();
        int[] intArray72 = huffmanTree0.create_huffman_tree(intArray29, intArray68);
        java.lang.Class<?> wildcardClass73 = intArray72.getClass();
        java.lang.Class<?> wildcardClass74 = intArray72.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray33 = new int[] { '4', '#', 0, 4 };
        int[] intArray35 = huffmanTree23.expand_array(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree9.create_huffman_tree(intArray33, intArray41);
        int int44 = huffmanTree0.search_for_value(intArray42, (int) (short) 10);
        java.lang.Class<?> wildcardClass45 = intArray42.getClass();
        java.lang.Class<?> wildcardClass46 = intArray42.getClass();
        java.lang.Class<?> wildcardClass47 = intArray42.getClass();
        java.lang.Class<?> wildcardClass48 = intArray42.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        java.lang.Class<?> wildcardClass9 = huffmanTree0.getClass();
        HuffmanTree huffmanTree10 = new HuffmanTree();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        int[] intArray14 = new int[] { '4', (byte) 10 };
        int[] intArray16 = huffmanTree11.expand_array(intArray14, (-1));
        int int18 = huffmanTree10.search_for_value(intArray16, (int) (short) 10);
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int[] intArray29 = new int[] { '4', '#', 0, 4 };
        int[] intArray31 = huffmanTree19.expand_array(intArray29, 0);
        HuffmanTree huffmanTree32 = new HuffmanTree();
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        int int40 = huffmanTree32.search_for_value(intArray38, (int) (short) 10);
        java.lang.Class<?> wildcardClass41 = intArray38.getClass();
        int[] intArray42 = huffmanTree10.create_huffman_tree(intArray29, intArray38);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray53 = new int[] { '4', '#', 0, 4 };
        int[] intArray55 = huffmanTree43.expand_array(intArray53, 0);
        HuffmanTree huffmanTree56 = new HuffmanTree();
        int[] intArray59 = new int[] { '4', (byte) 10 };
        int[] intArray61 = huffmanTree56.expand_array(intArray59, (-1));
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        int[] intArray69 = huffmanTree56.expand_array(intArray65, (int) (short) 1);
        int[] intArray71 = new int[] { 4 };
        int int73 = huffmanTree56.search_for_value(intArray71, 4);
        int[] intArray74 = huffmanTree10.create_huffman_tree(intArray53, intArray71);
        java.lang.Class<?> wildcardClass75 = huffmanTree10.getClass();
        HuffmanTree huffmanTree76 = new HuffmanTree();
        int[] intArray79 = new int[] { '4', (byte) 10 };
        int[] intArray81 = huffmanTree76.expand_array(intArray79, (-1));
        int[] intArray87 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int89 = huffmanTree76.search_for_value(intArray87, 0);
        java.lang.Class<?> wildcardClass90 = intArray87.getClass();
        int[] intArray92 = huffmanTree10.expand_array(intArray87, (int) (byte) 1);
        int[] intArray94 = huffmanTree0.expand_array(intArray87, (int) (byte) 0);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 4 + "'", int89 == 4);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        java.lang.Class<?> wildcardClass25 = huffmanTree19.getClass();
        java.lang.Class<?> wildcardClass26 = huffmanTree19.getClass();
        HuffmanTree huffmanTree27 = new HuffmanTree();
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int int35 = huffmanTree27.search_for_value(intArray33, (int) (short) 10);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray46 = new int[] { '4', '#', 0, 4 };
        int[] intArray48 = huffmanTree36.expand_array(intArray46, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int int57 = huffmanTree49.search_for_value(intArray55, (int) (short) 10);
        java.lang.Class<?> wildcardClass58 = intArray55.getClass();
        int[] intArray59 = huffmanTree27.create_huffman_tree(intArray46, intArray55);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray70 = new int[] { '4', '#', 0, 4 };
        int[] intArray72 = huffmanTree60.expand_array(intArray70, 0);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        HuffmanTree huffmanTree79 = new HuffmanTree();
        int[] intArray82 = new int[] { '4', (byte) 10 };
        int[] intArray84 = huffmanTree79.expand_array(intArray82, (-1));
        int[] intArray86 = huffmanTree73.expand_array(intArray82, (int) (short) 1);
        int[] intArray88 = new int[] { 4 };
        int int90 = huffmanTree73.search_for_value(intArray88, 4);
        int[] intArray91 = huffmanTree27.create_huffman_tree(intArray70, intArray88);
        java.lang.Class<?> wildcardClass92 = intArray88.getClass();
        java.lang.Class<?> wildcardClass93 = intArray88.getClass();
        int int95 = huffmanTree19.search_for_value(intArray88, (int) '#');
        try {
            int[] intArray97 = huffmanTree0.expand_array(intArray88, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int int14 = huffmanTree6.search_for_value(intArray12, (int) (short) 10);
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray25 = new int[] { '4', '#', 0, 4 };
        int[] intArray27 = huffmanTree15.expand_array(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree28.search_for_value(intArray34, (int) (short) 10);
        java.lang.Class<?> wildcardClass37 = intArray34.getClass();
        int[] intArray38 = huffmanTree6.create_huffman_tree(intArray25, intArray34);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray49 = new int[] { '4', '#', 0, 4 };
        int[] intArray51 = huffmanTree39.expand_array(intArray49, 0);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int[] intArray65 = huffmanTree52.expand_array(intArray61, (int) (short) 1);
        int[] intArray67 = new int[] { 4 };
        int int69 = huffmanTree52.search_for_value(intArray67, 4);
        int[] intArray70 = huffmanTree6.create_huffman_tree(intArray49, intArray67);
        try {
            int int72 = huffmanTree0.search_for_value(intArray70, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray70);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        int int38 = huffmanTree0.search_for_value(intArray32, (int) (short) 10);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        HuffmanTree huffmanTree40 = new HuffmanTree();
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int int48 = huffmanTree40.search_for_value(intArray46, (int) (short) 10);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray60 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int62 = huffmanTree49.search_for_value(intArray60, 0);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray73 = new int[] { '4', '#', 0, 4 };
        int[] intArray75 = huffmanTree63.expand_array(intArray73, 0);
        HuffmanTree huffmanTree76 = new HuffmanTree();
        int[] intArray79 = new int[] { '4', (byte) 10 };
        int[] intArray81 = huffmanTree76.expand_array(intArray79, (-1));
        int[] intArray82 = huffmanTree49.create_huffman_tree(intArray73, intArray81);
        int int84 = huffmanTree40.search_for_value(intArray82, (int) (short) 10);
        java.lang.Class<?> wildcardClass85 = intArray82.getClass();
        try {
            int int87 = huffmanTree0.search_for_value(intArray82, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        int[] intArray48 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int50 = huffmanTree37.search_for_value(intArray48, 0);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int[] intArray61 = new int[] { '4', '#', 0, 4 };
        int[] intArray63 = huffmanTree51.expand_array(intArray61, 0);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int[] intArray70 = huffmanTree37.create_huffman_tree(intArray61, intArray69);
        java.lang.Class<?> wildcardClass71 = intArray61.getClass();
        try {
            int[] intArray73 = huffmanTree0.expand_array(intArray61, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        int int38 = huffmanTree0.search_for_value(intArray32, (int) (short) 10);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray50 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int52 = huffmanTree39.search_for_value(intArray50, 0);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray64 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int66 = huffmanTree53.search_for_value(intArray64, 0);
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray73 = huffmanTree39.create_huffman_tree(intArray64, intArray70);
        java.lang.Class<?> wildcardClass74 = intArray70.getClass();
        try {
            int int76 = huffmanTree0.search_for_value(intArray70, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        HuffmanTree huffmanTree12 = new HuffmanTree();
        int[] intArray15 = new int[] { '4', (byte) 10 };
        int[] intArray17 = huffmanTree12.expand_array(intArray15, (-1));
        int[] intArray19 = huffmanTree6.expand_array(intArray15, (int) (short) 1);
        int[] intArray20 = null;
        int[] intArray22 = huffmanTree6.expand_array(intArray20, (int) (short) 1);
        java.lang.Class<?> wildcardClass23 = huffmanTree6.getClass();
        HuffmanTree huffmanTree24 = new HuffmanTree();
        java.lang.Class<?> wildcardClass25 = huffmanTree24.getClass();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int[] intArray36 = new int[] { '4', '#', 0, 4 };
        int[] intArray38 = huffmanTree26.expand_array(intArray36, 0);
        java.lang.Class<?> wildcardClass39 = intArray38.getClass();
        int[] intArray41 = huffmanTree24.expand_array(intArray38, 1);
        java.lang.Class<?> wildcardClass42 = intArray41.getClass();
        int int44 = huffmanTree6.search_for_value(intArray41, 0);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int[] intArray58 = huffmanTree45.expand_array(intArray54, (int) (short) 1);
        int[] intArray59 = huffmanTree0.create_huffman_tree(intArray41, intArray54);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray70 = new int[] { '4', '#', 0, 4 };
        int[] intArray72 = huffmanTree60.expand_array(intArray70, 0);
        java.lang.Class<?> wildcardClass73 = intArray70.getClass();
        try {
            int[] intArray75 = huffmanTree0.expand_array(intArray70, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNull(intArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass21 = intArray18.getClass();
        int int23 = huffmanTree0.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass24 = huffmanTree0.getClass();
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        int[] intArray35 = new int[] { '4', '#', 0, 4 };
        int[] intArray37 = huffmanTree25.expand_array(intArray35, 0);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray51 = huffmanTree38.expand_array(intArray47, (int) (short) 1);
        int[] intArray52 = null;
        int[] intArray54 = huffmanTree38.expand_array(intArray52, (int) (short) 1);
        java.lang.Class<?> wildcardClass55 = huffmanTree38.getClass();
        HuffmanTree huffmanTree56 = new HuffmanTree();
        HuffmanTree huffmanTree57 = new HuffmanTree();
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int int65 = huffmanTree57.search_for_value(intArray63, (int) (short) 10);
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int[] intArray76 = new int[] { '4', '#', 0, 4 };
        int[] intArray78 = huffmanTree66.expand_array(intArray76, 0);
        HuffmanTree huffmanTree79 = new HuffmanTree();
        HuffmanTree huffmanTree80 = new HuffmanTree();
        int[] intArray83 = new int[] { '4', (byte) 10 };
        int[] intArray85 = huffmanTree80.expand_array(intArray83, (-1));
        int int87 = huffmanTree79.search_for_value(intArray85, (int) (short) 10);
        java.lang.Class<?> wildcardClass88 = intArray85.getClass();
        int[] intArray89 = huffmanTree57.create_huffman_tree(intArray76, intArray85);
        int[] intArray91 = huffmanTree56.expand_array(intArray76, 0);
        int[] intArray93 = huffmanTree38.expand_array(intArray76, (int) (byte) -1);
        int[] intArray95 = huffmanTree25.expand_array(intArray76, (int) (short) 0);
        try {
            int int97 = huffmanTree0.search_for_value(intArray95, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNull(intArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray10 = new int[] { '4', '#', 0, 4 };
        int[] intArray12 = huffmanTree0.expand_array(intArray10, 0);
        HuffmanTree huffmanTree13 = new HuffmanTree();
        int[] intArray16 = new int[] { '4', (byte) 10 };
        int[] intArray18 = huffmanTree13.expand_array(intArray16, (-1));
        int[] intArray24 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int26 = huffmanTree13.search_for_value(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray38 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int40 = huffmanTree27.search_for_value(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray47 = huffmanTree13.create_huffman_tree(intArray38, intArray44);
        int int49 = huffmanTree0.search_for_value(intArray47, (int) (byte) 10);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        HuffmanTree huffmanTree56 = new HuffmanTree();
        int[] intArray59 = new int[] { '4', (byte) 10 };
        int[] intArray61 = huffmanTree56.expand_array(intArray59, (-1));
        int[] intArray63 = huffmanTree50.expand_array(intArray59, (int) (short) 1);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int[] intArray74 = new int[] { '4', '#', 0, 4 };
        int[] intArray76 = huffmanTree64.expand_array(intArray74, 0);
        HuffmanTree huffmanTree77 = new HuffmanTree();
        java.lang.Class<?> wildcardClass78 = huffmanTree77.getClass();
        HuffmanTree huffmanTree79 = new HuffmanTree();
        int[] intArray82 = new int[] { '4', (byte) 10 };
        int[] intArray84 = huffmanTree79.expand_array(intArray82, (-1));
        int int86 = huffmanTree77.search_for_value(intArray82, (int) (byte) 10);
        int[] intArray87 = huffmanTree50.create_huffman_tree(intArray74, intArray82);
        int int89 = huffmanTree0.search_for_value(intArray82, (int) (byte) 10);
        java.lang.Class<?> wildcardClass90 = huffmanTree0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        java.lang.Class<?> wildcardClass38 = huffmanTree0.getClass();
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray50 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int52 = huffmanTree39.search_for_value(intArray50, 0);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray64 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int66 = huffmanTree53.search_for_value(intArray64, 0);
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray73 = huffmanTree39.create_huffman_tree(intArray64, intArray70);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray84 = new int[] { '4', '#', 0, 4 };
        int[] intArray86 = huffmanTree74.expand_array(intArray84, 0);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        int[] intArray89 = huffmanTree39.expand_array(intArray86, (int) (byte) -1);
        java.lang.Class<?> wildcardClass90 = intArray86.getClass();
        java.lang.Class<?> wildcardClass91 = intArray86.getClass();
        int[] intArray93 = huffmanTree0.expand_array(intArray86, 1);
        int[] intArray94 = null;
        int[] intArray96 = huffmanTree0.expand_array(intArray94, (int) (short) 0);
        int[] intArray97 = null;
        try {
            int int99 = huffmanTree0.search_for_value(intArray97, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNull(intArray96);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray15 = new int[] { 4 };
        int int17 = huffmanTree0.search_for_value(intArray15, 4);
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        java.lang.Class<?> wildcardClass24 = huffmanTree18.getClass();
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        int[] intArray36 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int38 = huffmanTree25.search_for_value(intArray36, 0);
        int int40 = huffmanTree18.search_for_value(intArray36, 0);
        java.lang.Class<?> wildcardClass41 = huffmanTree18.getClass();
        java.lang.Class<?> wildcardClass42 = huffmanTree18.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int int51 = huffmanTree43.search_for_value(intArray49, (int) (short) 10);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray62 = new int[] { '4', '#', 0, 4 };
        int[] intArray64 = huffmanTree52.expand_array(intArray62, 0);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int int73 = huffmanTree65.search_for_value(intArray71, (int) (short) 10);
        java.lang.Class<?> wildcardClass74 = intArray71.getClass();
        int[] intArray75 = huffmanTree43.create_huffman_tree(intArray62, intArray71);
        java.lang.Class<?> wildcardClass76 = intArray71.getClass();
        java.lang.Class<?> wildcardClass77 = intArray71.getClass();
        int int79 = huffmanTree18.search_for_value(intArray71, (int) (byte) 10);
        java.lang.Class<?> wildcardClass80 = intArray71.getClass();
        int int82 = huffmanTree0.search_for_value(intArray71, (int) (byte) 10);
        int[] intArray83 = null;
        try {
            int int85 = huffmanTree0.search_for_value(intArray83, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        int int38 = huffmanTree0.search_for_value(intArray32, (int) (short) 10);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray53 = huffmanTree40.expand_array(intArray49, (int) (short) 1);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray64 = new int[] { '4', '#', 0, 4 };
        int[] intArray66 = huffmanTree54.expand_array(intArray64, 0);
        HuffmanTree huffmanTree67 = new HuffmanTree();
        java.lang.Class<?> wildcardClass68 = huffmanTree67.getClass();
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        int int76 = huffmanTree67.search_for_value(intArray72, (int) (byte) 10);
        int[] intArray77 = huffmanTree40.create_huffman_tree(intArray64, intArray72);
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        HuffmanTree huffmanTree84 = new HuffmanTree();
        int[] intArray87 = new int[] { '4', (byte) 10 };
        int[] intArray89 = huffmanTree84.expand_array(intArray87, (-1));
        int[] intArray91 = huffmanTree78.expand_array(intArray87, (int) (short) 1);
        int int93 = huffmanTree40.search_for_value(intArray87, 10);
        try {
            int int95 = huffmanTree0.search_for_value(intArray87, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass21 = intArray18.getClass();
        int int23 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        int[] intArray37 = huffmanTree24.expand_array(intArray33, (int) (short) 1);
        int[] intArray38 = null;
        int[] intArray40 = huffmanTree24.expand_array(intArray38, (int) (short) 1);
        java.lang.Class<?> wildcardClass41 = huffmanTree24.getClass();
        java.lang.Class<?> wildcardClass42 = huffmanTree24.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray54 = new int[] { '4', '#', 0, 4 };
        int[] intArray56 = huffmanTree44.expand_array(intArray54, 0);
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int[] intArray67 = new int[] { '4', '#', 0, 4 };
        int[] intArray69 = huffmanTree57.expand_array(intArray67, 0);
        int[] intArray70 = huffmanTree43.create_huffman_tree(intArray54, intArray69);
        int int72 = huffmanTree24.search_for_value(intArray54, 0);
        java.lang.Class<?> wildcardClass73 = intArray54.getClass();
        try {
            int[] intArray75 = huffmanTree0.expand_array(intArray54, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNull(intArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int int14 = huffmanTree6.search_for_value(intArray12, (int) (short) 10);
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray26 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int28 = huffmanTree15.search_for_value(intArray26, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray39 = new int[] { '4', '#', 0, 4 };
        int[] intArray41 = huffmanTree29.expand_array(intArray39, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int[] intArray48 = huffmanTree15.create_huffman_tree(intArray39, intArray47);
        int int50 = huffmanTree6.search_for_value(intArray48, (int) (short) 10);
        int[] intArray52 = huffmanTree0.expand_array(intArray48, (int) (byte) -1);
        java.lang.Class<?> wildcardClass53 = huffmanTree0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int[] intArray12 = new int[] { '4', '#', 0, 4 };
        int[] intArray14 = huffmanTree2.expand_array(intArray12, 0);
        java.lang.Class<?> wildcardClass15 = intArray14.getClass();
        int[] intArray17 = huffmanTree0.expand_array(intArray14, 1);
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int[] intArray30 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int32 = huffmanTree19.search_for_value(intArray30, 0);
        java.lang.Class<?> wildcardClass33 = intArray30.getClass();
        java.lang.Class<?> wildcardClass34 = intArray30.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray60 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int62 = huffmanTree49.search_for_value(intArray60, 0);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray69 = huffmanTree35.create_huffman_tree(intArray60, intArray66);
        int[] intArray70 = huffmanTree0.create_huffman_tree(intArray30, intArray66);
        HuffmanTree huffmanTree71 = new HuffmanTree();
        int[] intArray74 = new int[] { '4', (byte) 10 };
        int[] intArray76 = huffmanTree71.expand_array(intArray74, (-1));
        java.lang.Class<?> wildcardClass77 = huffmanTree71.getClass();
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        int[] intArray89 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int91 = huffmanTree78.search_for_value(intArray89, 0);
        java.lang.Class<?> wildcardClass92 = intArray89.getClass();
        int int94 = huffmanTree71.search_for_value(intArray89, 0);
        java.lang.Class<?> wildcardClass95 = intArray89.getClass();
        try {
            int int97 = huffmanTree0.search_for_value(intArray89, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 4 + "'", int94 == 4);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        java.lang.Class<?> wildcardClass11 = huffmanTree10.getClass();
        HuffmanTree huffmanTree12 = new HuffmanTree();
        int[] intArray15 = new int[] { '4', (byte) 10 };
        int[] intArray17 = huffmanTree12.expand_array(intArray15, (-1));
        java.lang.Class<?> wildcardClass18 = huffmanTree12.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int[] intArray30 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int32 = huffmanTree19.search_for_value(intArray30, 0);
        int int34 = huffmanTree12.search_for_value(intArray30, 0);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray48 = huffmanTree35.expand_array(intArray44, (int) (short) 1);
        int[] intArray50 = new int[] { 4 };
        int int52 = huffmanTree35.search_for_value(intArray50, 4);
        int[] intArray53 = huffmanTree10.create_huffman_tree(intArray30, intArray50);
        int int55 = huffmanTree0.search_for_value(intArray30, (int) (byte) 100);
        java.lang.Class<?> wildcardClass56 = huffmanTree0.getClass();
        int[] intArray57 = null;
        int[] intArray59 = huffmanTree0.expand_array(intArray57, (int) (short) 1);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        java.lang.Class<?> wildcardClass66 = huffmanTree60.getClass();
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray78 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int80 = huffmanTree67.search_for_value(intArray78, 0);
        int int82 = huffmanTree60.search_for_value(intArray78, 0);
        java.lang.Class<?> wildcardClass83 = intArray78.getClass();
        java.lang.Class<?> wildcardClass84 = intArray78.getClass();
        try {
            int int86 = huffmanTree0.search_for_value(intArray78, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 4 + "'", int80 == 4);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 4 + "'", int82 == 4);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray38 = new int[] { '4', '#', 0, 4 };
        int[] intArray40 = huffmanTree28.expand_array(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray47 = huffmanTree14.create_huffman_tree(intArray38, intArray46);
        java.lang.Class<?> wildcardClass48 = intArray38.getClass();
        HuffmanTree huffmanTree49 = new HuffmanTree();
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray60 = new int[] { '4', '#', 0, 4 };
        int[] intArray62 = huffmanTree50.expand_array(intArray60, 0);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray73 = new int[] { '4', '#', 0, 4 };
        int[] intArray75 = huffmanTree63.expand_array(intArray73, 0);
        int[] intArray76 = huffmanTree49.create_huffman_tree(intArray60, intArray75);
        int[] intArray77 = huffmanTree0.create_huffman_tree(intArray38, intArray76);
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        int[] intArray88 = new int[] { '4', '#', 0, 4 };
        int[] intArray90 = huffmanTree78.expand_array(intArray88, 0);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        try {
            int int93 = huffmanTree0.search_for_value(intArray90, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass23 = huffmanTree0.getClass();
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray43 = huffmanTree30.expand_array(intArray39, (int) (short) 1);
        int[] intArray44 = null;
        int[] intArray46 = huffmanTree30.expand_array(intArray44, (int) (short) 1);
        java.lang.Class<?> wildcardClass47 = huffmanTree30.getClass();
        HuffmanTree huffmanTree48 = new HuffmanTree();
        java.lang.Class<?> wildcardClass49 = huffmanTree48.getClass();
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray60 = new int[] { '4', '#', 0, 4 };
        int[] intArray62 = huffmanTree50.expand_array(intArray60, 0);
        java.lang.Class<?> wildcardClass63 = intArray62.getClass();
        int[] intArray65 = huffmanTree48.expand_array(intArray62, 1);
        java.lang.Class<?> wildcardClass66 = intArray65.getClass();
        int int68 = huffmanTree30.search_for_value(intArray65, 0);
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        int[] intArray82 = huffmanTree69.expand_array(intArray78, (int) (short) 1);
        int[] intArray83 = huffmanTree24.create_huffman_tree(intArray65, intArray78);
        try {
            int[] intArray85 = huffmanTree0.expand_array(intArray65, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNull(intArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int int27 = huffmanTree19.search_for_value(intArray25, (int) (short) 10);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray38 = new int[] { '4', '#', 0, 4 };
        int[] intArray40 = huffmanTree28.expand_array(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int int49 = huffmanTree41.search_for_value(intArray47, (int) (short) 10);
        java.lang.Class<?> wildcardClass50 = intArray47.getClass();
        int[] intArray51 = huffmanTree19.create_huffman_tree(intArray38, intArray47);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int int60 = huffmanTree52.search_for_value(intArray58, (int) (short) 10);
        HuffmanTree huffmanTree61 = new HuffmanTree();
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        int[] intArray72 = new int[] { '4', '#', 0, 4 };
        int[] intArray74 = huffmanTree62.expand_array(intArray72, 0);
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        int[] intArray85 = new int[] { '4', '#', 0, 4 };
        int[] intArray87 = huffmanTree75.expand_array(intArray85, 0);
        int[] intArray88 = huffmanTree61.create_huffman_tree(intArray72, intArray87);
        int[] intArray90 = huffmanTree52.expand_array(intArray88, (int) (short) 1);
        int[] intArray92 = huffmanTree19.expand_array(intArray88, (-1));
        java.lang.Class<?> wildcardClass93 = intArray88.getClass();
        java.lang.Class<?> wildcardClass94 = intArray88.getClass();
        java.lang.Class<?> wildcardClass95 = intArray88.getClass();
        try {
            int int97 = huffmanTree0.search_for_value(intArray88, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int int27 = huffmanTree19.search_for_value(intArray25, (int) (short) 10);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray38 = new int[] { '4', '#', 0, 4 };
        int[] intArray40 = huffmanTree28.expand_array(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int int49 = huffmanTree41.search_for_value(intArray47, (int) (short) 10);
        java.lang.Class<?> wildcardClass50 = intArray47.getClass();
        int[] intArray51 = huffmanTree19.create_huffman_tree(intArray38, intArray47);
        int[] intArray53 = huffmanTree18.expand_array(intArray38, 0);
        int[] intArray55 = huffmanTree0.expand_array(intArray38, (int) (byte) -1);
        HuffmanTree huffmanTree56 = new HuffmanTree();
        int[] intArray59 = new int[] { '4', (byte) 10 };
        int[] intArray61 = huffmanTree56.expand_array(intArray59, (-1));
        java.lang.Class<?> wildcardClass62 = huffmanTree56.getClass();
        java.lang.Class<?> wildcardClass63 = huffmanTree56.getClass();
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        HuffmanTree huffmanTree70 = new HuffmanTree();
        int[] intArray73 = new int[] { '4', (byte) 10 };
        int[] intArray75 = huffmanTree70.expand_array(intArray73, (-1));
        int[] intArray77 = huffmanTree64.expand_array(intArray73, (int) (short) 1);
        int[] intArray79 = new int[] { 4 };
        int int81 = huffmanTree64.search_for_value(intArray79, 4);
        int[] intArray83 = huffmanTree56.expand_array(intArray79, (int) (byte) -1);
        java.lang.Class<?> wildcardClass84 = intArray79.getClass();
        java.lang.Class<?> wildcardClass85 = intArray79.getClass();
        int[] intArray87 = huffmanTree0.expand_array(intArray79, (int) (byte) -1);
        int[] intArray88 = null;
        try {
            int[] intArray90 = huffmanTree0.expand_array(intArray88, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        int[] intArray18 = null;
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        java.lang.Class<?> wildcardClass25 = huffmanTree19.getClass();
        java.lang.Class<?> wildcardClass26 = huffmanTree19.getClass();
        HuffmanTree huffmanTree27 = new HuffmanTree();
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int int35 = huffmanTree27.search_for_value(intArray33, (int) (short) 10);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray46 = new int[] { '4', '#', 0, 4 };
        int[] intArray48 = huffmanTree36.expand_array(intArray46, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int int57 = huffmanTree49.search_for_value(intArray55, (int) (short) 10);
        java.lang.Class<?> wildcardClass58 = intArray55.getClass();
        int[] intArray59 = huffmanTree27.create_huffman_tree(intArray46, intArray55);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray70 = new int[] { '4', '#', 0, 4 };
        int[] intArray72 = huffmanTree60.expand_array(intArray70, 0);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        HuffmanTree huffmanTree79 = new HuffmanTree();
        int[] intArray82 = new int[] { '4', (byte) 10 };
        int[] intArray84 = huffmanTree79.expand_array(intArray82, (-1));
        int[] intArray86 = huffmanTree73.expand_array(intArray82, (int) (short) 1);
        int[] intArray88 = new int[] { 4 };
        int int90 = huffmanTree73.search_for_value(intArray88, 4);
        int[] intArray91 = huffmanTree27.create_huffman_tree(intArray70, intArray88);
        java.lang.Class<?> wildcardClass92 = intArray88.getClass();
        java.lang.Class<?> wildcardClass93 = intArray88.getClass();
        int int95 = huffmanTree19.search_for_value(intArray88, (int) '#');
        try {
            int[] intArray96 = huffmanTree0.create_huffman_tree(intArray18, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray39 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int41 = huffmanTree28.search_for_value(intArray39, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int[] intArray53 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int55 = huffmanTree42.search_for_value(intArray53, 0);
        HuffmanTree huffmanTree56 = new HuffmanTree();
        int[] intArray59 = new int[] { '4', (byte) 10 };
        int[] intArray61 = huffmanTree56.expand_array(intArray59, (-1));
        int[] intArray62 = huffmanTree28.create_huffman_tree(intArray53, intArray59);
        int[] intArray64 = huffmanTree22.expand_array(intArray53, (int) (byte) 1);
        java.lang.Class<?> wildcardClass65 = intArray53.getClass();
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int[] intArray77 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int79 = huffmanTree66.search_for_value(intArray77, 0);
        java.lang.Class<?> wildcardClass80 = intArray77.getClass();
        int[] intArray81 = huffmanTree8.create_huffman_tree(intArray53, intArray77);
        int[] intArray83 = huffmanTree2.expand_array(intArray77, 0);
        int int85 = huffmanTree0.search_for_value(intArray77, 0);
        int[] intArray86 = null;
        int[] intArray88 = huffmanTree0.expand_array(intArray86, 0);
        int[] intArray89 = null;
        try {
            int int91 = huffmanTree0.search_for_value(intArray89, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4 + "'", int79 == 4);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 4 + "'", int85 == 4);
        org.junit.Assert.assertNull(intArray88);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray33 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int35 = huffmanTree22.search_for_value(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree8.create_huffman_tree(intArray33, intArray39);
        int[] intArray44 = huffmanTree2.expand_array(intArray33, (int) (byte) 1);
        int[] intArray46 = huffmanTree0.expand_array(intArray33, (int) (short) 0);
        HuffmanTree huffmanTree47 = new HuffmanTree();
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray58 = new int[] { '4', '#', 0, 4 };
        int[] intArray60 = huffmanTree48.expand_array(intArray58, 0);
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray71 = new int[] { '4', '#', 0, 4 };
        int[] intArray73 = huffmanTree61.expand_array(intArray71, 0);
        int[] intArray74 = huffmanTree47.create_huffman_tree(intArray58, intArray73);
        java.lang.Class<?> wildcardClass75 = intArray74.getClass();
        int int77 = huffmanTree0.search_for_value(intArray74, 0);
        int[] intArray78 = null;
        int[] intArray79 = null;
        try {
            int[] intArray80 = huffmanTree0.create_huffman_tree(intArray78, intArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        int[] intArray14 = new int[] { '4', (byte) 10 };
        int[] intArray16 = huffmanTree11.expand_array(intArray14, (-1));
        int int18 = huffmanTree10.search_for_value(intArray16, (int) (short) 10);
        HuffmanTree huffmanTree19 = new HuffmanTree();
        java.lang.Class<?> wildcardClass20 = huffmanTree19.getClass();
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        java.lang.Class<?> wildcardClass27 = huffmanTree21.getClass();
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray39 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int41 = huffmanTree28.search_for_value(intArray39, 0);
        int int43 = huffmanTree21.search_for_value(intArray39, 0);
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray57 = huffmanTree44.expand_array(intArray53, (int) (short) 1);
        int[] intArray59 = new int[] { 4 };
        int int61 = huffmanTree44.search_for_value(intArray59, 4);
        int[] intArray62 = huffmanTree19.create_huffman_tree(intArray39, intArray59);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        int[] intArray76 = huffmanTree63.expand_array(intArray72, (int) (short) 1);
        int[] intArray78 = new int[] { 4 };
        int int80 = huffmanTree63.search_for_value(intArray78, 4);
        java.lang.Class<?> wildcardClass81 = intArray78.getClass();
        int[] intArray82 = huffmanTree10.create_huffman_tree(intArray39, intArray78);
        int int84 = huffmanTree0.search_for_value(intArray39, (int) (short) 0);
        java.lang.Class<?> wildcardClass85 = intArray39.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray33 = new int[] { '4', '#', 0, 4 };
        int[] intArray35 = huffmanTree23.expand_array(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree9.create_huffman_tree(intArray33, intArray41);
        int int44 = huffmanTree0.search_for_value(intArray42, (int) (short) 10);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray56 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int58 = huffmanTree45.search_for_value(intArray56, 0);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray70 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int72 = huffmanTree59.search_for_value(intArray70, 0);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray79 = huffmanTree45.create_huffman_tree(intArray70, intArray76);
        java.lang.Class<?> wildcardClass80 = intArray79.getClass();
        java.lang.Class<?> wildcardClass81 = intArray79.getClass();
        try {
            int int83 = huffmanTree0.search_for_value(intArray79, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        java.lang.Class<?> wildcardClass10 = huffmanTree0.getClass();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        int[] intArray14 = new int[] { '4', (byte) 10 };
        int[] intArray16 = huffmanTree11.expand_array(intArray14, (-1));
        HuffmanTree huffmanTree17 = new HuffmanTree();
        int[] intArray20 = new int[] { '4', (byte) 10 };
        int[] intArray22 = huffmanTree17.expand_array(intArray20, (-1));
        int[] intArray28 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int30 = huffmanTree17.search_for_value(intArray28, 0);
        HuffmanTree huffmanTree31 = new HuffmanTree();
        int[] intArray34 = new int[] { '4', (byte) 10 };
        int[] intArray36 = huffmanTree31.expand_array(intArray34, (-1));
        int[] intArray42 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int44 = huffmanTree31.search_for_value(intArray42, 0);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray51 = huffmanTree17.create_huffman_tree(intArray42, intArray48);
        int[] intArray53 = huffmanTree11.expand_array(intArray42, (int) (byte) 1);
        java.lang.Class<?> wildcardClass54 = huffmanTree11.getClass();
        HuffmanTree huffmanTree55 = new HuffmanTree();
        int[] intArray58 = new int[] { '4', (byte) 10 };
        int[] intArray60 = huffmanTree55.expand_array(intArray58, (-1));
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray68 = huffmanTree55.expand_array(intArray64, (int) (short) 1);
        int[] intArray70 = new int[] { 4 };
        int int72 = huffmanTree55.search_for_value(intArray70, 4);
        int[] intArray74 = huffmanTree11.expand_array(intArray70, (int) (byte) 1);
        try {
            int int76 = huffmanTree0.search_for_value(intArray74, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int[] intArray37 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int39 = huffmanTree26.search_for_value(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray51 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int53 = huffmanTree40.search_for_value(intArray51, 0);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray60 = huffmanTree26.create_huffman_tree(intArray51, intArray57);
        int[] intArray62 = huffmanTree20.expand_array(intArray51, (int) (byte) 1);
        java.lang.Class<?> wildcardClass63 = intArray51.getClass();
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int[] intArray75 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int77 = huffmanTree64.search_for_value(intArray75, 0);
        java.lang.Class<?> wildcardClass78 = intArray75.getClass();
        int[] intArray79 = huffmanTree6.create_huffman_tree(intArray51, intArray75);
        int[] intArray81 = huffmanTree0.expand_array(intArray75, 0);
        java.lang.Class<?> wildcardClass82 = huffmanTree0.getClass();
        int[] intArray83 = null;
        try {
            int int85 = huffmanTree0.search_for_value(intArray83, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass34 = huffmanTree0.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray45 = new int[] { '4', '#', 0, 4 };
        int[] intArray47 = huffmanTree35.expand_array(intArray45, 0);
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray59 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int61 = huffmanTree48.search_for_value(intArray59, 0);
        java.lang.Class<?> wildcardClass62 = intArray59.getClass();
        java.lang.Class<?> wildcardClass63 = intArray59.getClass();
        int[] intArray64 = huffmanTree0.create_huffman_tree(intArray45, intArray59);
        int[] intArray65 = null;
        try {
            int int67 = huffmanTree0.search_for_value(intArray65, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(intArray64);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        int int38 = huffmanTree0.search_for_value(intArray32, (int) (short) 10);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        int[] intArray40 = null;
        try {
            int int42 = huffmanTree0.search_for_value(intArray40, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        java.lang.Class<?> wildcardClass15 = huffmanTree14.getClass();
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        java.lang.Class<?> wildcardClass22 = huffmanTree16.getClass();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray34 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int36 = huffmanTree23.search_for_value(intArray34, 0);
        int int38 = huffmanTree16.search_for_value(intArray34, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray52 = huffmanTree39.expand_array(intArray48, (int) (short) 1);
        int[] intArray54 = new int[] { 4 };
        int int56 = huffmanTree39.search_for_value(intArray54, 4);
        int[] intArray57 = huffmanTree14.create_huffman_tree(intArray34, intArray54);
        int[] intArray59 = huffmanTree0.expand_array(intArray54, (int) (short) 1);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray71 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int73 = huffmanTree60.search_for_value(intArray71, 0);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray85 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int87 = huffmanTree74.search_for_value(intArray85, 0);
        HuffmanTree huffmanTree88 = new HuffmanTree();
        int[] intArray91 = new int[] { '4', (byte) 10 };
        int[] intArray93 = huffmanTree88.expand_array(intArray91, (-1));
        int[] intArray94 = huffmanTree60.create_huffman_tree(intArray85, intArray91);
        int[] intArray96 = huffmanTree0.expand_array(intArray94, (int) (short) 1);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        java.lang.Class<?> wildcardClass98 = intArray96.getClass();
        java.lang.Class<?> wildcardClass99 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
        org.junit.Assert.assertNotNull(wildcardClass98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        int int38 = huffmanTree0.search_for_value(intArray32, (int) (short) 10);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        java.lang.Class<?> wildcardClass45 = huffmanTree39.getClass();
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray57 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int59 = huffmanTree46.search_for_value(intArray57, 0);
        int int61 = huffmanTree39.search_for_value(intArray57, 0);
        java.lang.Class<?> wildcardClass62 = intArray57.getClass();
        java.lang.Class<?> wildcardClass63 = intArray57.getClass();
        try {
            int[] intArray65 = huffmanTree0.expand_array(intArray57, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree1.search_for_value(intArray7, (int) (short) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        int[] intArray20 = new int[] { '4', '#', 0, 4 };
        int[] intArray22 = huffmanTree10.expand_array(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int int31 = huffmanTree23.search_for_value(intArray29, (int) (short) 10);
        java.lang.Class<?> wildcardClass32 = intArray29.getClass();
        int[] intArray33 = huffmanTree1.create_huffman_tree(intArray20, intArray29);
        int[] intArray35 = huffmanTree0.expand_array(intArray20, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray47 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int49 = huffmanTree36.search_for_value(intArray47, 0);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray60 = new int[] { '4', '#', 0, 4 };
        int[] intArray62 = huffmanTree50.expand_array(intArray60, 0);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray69 = huffmanTree36.create_huffman_tree(intArray60, intArray68);
        java.lang.Class<?> wildcardClass70 = intArray69.getClass();
        java.lang.Class<?> wildcardClass71 = intArray69.getClass();
        int[] intArray72 = null;
        try {
            int[] intArray73 = huffmanTree0.create_huffman_tree(intArray69, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray59 = new int[] { '4', '#', 0, 4 };
        int[] intArray61 = huffmanTree49.expand_array(intArray59, 0);
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        int[] intArray68 = huffmanTree35.create_huffman_tree(intArray59, intArray67);
        int[] intArray70 = huffmanTree0.expand_array(intArray68, (-1));
        java.lang.Class<?> wildcardClass71 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass72 = huffmanTree0.getClass();
        int[] intArray73 = null;
        try {
            int[] intArray75 = huffmanTree0.expand_array(intArray73, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        java.lang.Class<?> wildcardClass38 = huffmanTree0.getClass();
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray50 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int52 = huffmanTree39.search_for_value(intArray50, 0);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray64 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int66 = huffmanTree53.search_for_value(intArray64, 0);
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray73 = huffmanTree39.create_huffman_tree(intArray64, intArray70);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray84 = new int[] { '4', '#', 0, 4 };
        int[] intArray86 = huffmanTree74.expand_array(intArray84, 0);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        int[] intArray89 = huffmanTree39.expand_array(intArray86, (int) (byte) -1);
        java.lang.Class<?> wildcardClass90 = intArray86.getClass();
        java.lang.Class<?> wildcardClass91 = intArray86.getClass();
        int[] intArray93 = huffmanTree0.expand_array(intArray86, 1);
        int[] intArray94 = null;
        int[] intArray96 = huffmanTree0.expand_array(intArray94, (int) (short) 0);
        try {
            java.lang.Class<?> wildcardClass97 = intArray96.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNull(intArray96);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        java.lang.Class<?> wildcardClass9 = huffmanTree0.getClass();
        int[] intArray10 = null;
        HuffmanTree huffmanTree11 = new HuffmanTree();
        HuffmanTree huffmanTree12 = new HuffmanTree();
        int[] intArray15 = new int[] { '4', (byte) 10 };
        int[] intArray17 = huffmanTree12.expand_array(intArray15, (-1));
        int[] intArray23 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int25 = huffmanTree12.search_for_value(intArray23, 0);
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        HuffmanTree huffmanTree32 = new HuffmanTree();
        int[] intArray35 = new int[] { '4', (byte) 10 };
        int[] intArray37 = huffmanTree32.expand_array(intArray35, (-1));
        int[] intArray43 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int45 = huffmanTree32.search_for_value(intArray43, 0);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray57 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int59 = huffmanTree46.search_for_value(intArray57, 0);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray66 = huffmanTree32.create_huffman_tree(intArray57, intArray63);
        int[] intArray68 = huffmanTree26.expand_array(intArray57, (int) (byte) 1);
        java.lang.Class<?> wildcardClass69 = intArray57.getClass();
        HuffmanTree huffmanTree70 = new HuffmanTree();
        int[] intArray73 = new int[] { '4', (byte) 10 };
        int[] intArray75 = huffmanTree70.expand_array(intArray73, (-1));
        int[] intArray81 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int83 = huffmanTree70.search_for_value(intArray81, 0);
        java.lang.Class<?> wildcardClass84 = intArray81.getClass();
        int[] intArray85 = huffmanTree12.create_huffman_tree(intArray57, intArray81);
        HuffmanTree huffmanTree86 = new HuffmanTree();
        HuffmanTree huffmanTree87 = new HuffmanTree();
        int[] intArray90 = new int[] { '4', (byte) 10 };
        int[] intArray92 = huffmanTree87.expand_array(intArray90, (-1));
        int int94 = huffmanTree86.search_for_value(intArray92, (int) (short) 10);
        java.lang.Class<?> wildcardClass95 = intArray92.getClass();
        int[] intArray96 = huffmanTree11.create_huffman_tree(intArray85, intArray92);
        try {
            int[] intArray97 = huffmanTree0.create_huffman_tree(intArray10, intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4 + "'", int83 == 4);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        java.lang.Class<?> wildcardClass15 = huffmanTree14.getClass();
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        java.lang.Class<?> wildcardClass22 = huffmanTree16.getClass();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray34 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int36 = huffmanTree23.search_for_value(intArray34, 0);
        int int38 = huffmanTree16.search_for_value(intArray34, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray52 = huffmanTree39.expand_array(intArray48, (int) (short) 1);
        int[] intArray54 = new int[] { 4 };
        int int56 = huffmanTree39.search_for_value(intArray54, 4);
        int[] intArray57 = huffmanTree14.create_huffman_tree(intArray34, intArray54);
        int[] intArray59 = huffmanTree0.expand_array(intArray54, (int) (short) 1);
        java.lang.Class<?> wildcardClass60 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass61 = huffmanTree0.getClass();
        int[] intArray62 = null;
        try {
            int[] intArray64 = huffmanTree0.expand_array(intArray62, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        java.lang.Class<?> wildcardClass8 = huffmanTree2.getClass();
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        int int24 = huffmanTree2.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        HuffmanTree huffmanTree31 = new HuffmanTree();
        int[] intArray34 = new int[] { '4', (byte) 10 };
        int[] intArray36 = huffmanTree31.expand_array(intArray34, (-1));
        int[] intArray38 = huffmanTree25.expand_array(intArray34, (int) (short) 1);
        int[] intArray40 = new int[] { 4 };
        int int42 = huffmanTree25.search_for_value(intArray40, 4);
        int[] intArray43 = huffmanTree0.create_huffman_tree(intArray20, intArray40);
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray54 = new int[] { '4', '#', 0, 4 };
        int[] intArray56 = huffmanTree44.expand_array(intArray54, 0);
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int[] intArray67 = new int[] { '4', '#', 0, 4 };
        int[] intArray69 = huffmanTree57.expand_array(intArray67, 0);
        java.lang.Class<?> wildcardClass70 = intArray69.getClass();
        int[] intArray71 = huffmanTree0.create_huffman_tree(intArray54, intArray69);
        java.lang.Class<?> wildcardClass72 = intArray69.getClass();
        java.lang.Class<?> wildcardClass73 = intArray69.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray33 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int35 = huffmanTree22.search_for_value(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree8.create_huffman_tree(intArray33, intArray39);
        int[] intArray44 = huffmanTree2.expand_array(intArray33, (int) (byte) 1);
        int[] intArray46 = huffmanTree0.expand_array(intArray33, (int) (short) 0);
        int[] intArray47 = null;
        int[] intArray49 = huffmanTree0.expand_array(intArray47, 0);
        try {
            java.lang.Class<?> wildcardClass50 = intArray49.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNull(intArray49);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        HuffmanTree huffmanTree17 = new HuffmanTree();
        int[] intArray20 = new int[] { '4', (byte) 10 };
        int[] intArray22 = huffmanTree17.expand_array(intArray20, (-1));
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray30 = huffmanTree17.expand_array(intArray26, (int) (short) 1);
        int[] intArray31 = null;
        int[] intArray33 = huffmanTree17.expand_array(intArray31, (int) (short) 1);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        java.lang.Class<?> wildcardClass35 = huffmanTree34.getClass();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        java.lang.Class<?> wildcardClass42 = huffmanTree36.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray54 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int56 = huffmanTree43.search_for_value(intArray54, 0);
        int int58 = huffmanTree36.search_for_value(intArray54, 0);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int[] intArray72 = huffmanTree59.expand_array(intArray68, (int) (short) 1);
        int[] intArray74 = new int[] { 4 };
        int int76 = huffmanTree59.search_for_value(intArray74, 4);
        int[] intArray77 = huffmanTree34.create_huffman_tree(intArray54, intArray74);
        java.lang.Class<?> wildcardClass78 = intArray74.getClass();
        java.lang.Class<?> wildcardClass79 = intArray74.getClass();
        int[] intArray81 = huffmanTree17.expand_array(intArray74, 0);
        try {
            int[] intArray83 = huffmanTree0.expand_array(intArray74, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNull(intArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(intArray81);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        java.lang.Class<?> wildcardClass20 = huffmanTree14.getClass();
        java.lang.Class<?> wildcardClass21 = huffmanTree14.getClass();
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray35 = huffmanTree22.expand_array(intArray31, (int) (short) 1);
        int[] intArray37 = new int[] { 4 };
        int int39 = huffmanTree22.search_for_value(intArray37, 4);
        int[] intArray41 = huffmanTree14.expand_array(intArray37, (int) (byte) -1);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray55 = huffmanTree42.expand_array(intArray51, (int) (short) 1);
        java.lang.Class<?> wildcardClass56 = intArray55.getClass();
        java.lang.Class<?> wildcardClass57 = intArray55.getClass();
        try {
            int[] intArray58 = huffmanTree0.create_huffman_tree(intArray41, intArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass21 = intArray18.getClass();
        int int23 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int[] intArray34 = new int[] { '4', '#', 0, 4 };
        int[] intArray36 = huffmanTree24.expand_array(intArray34, 0);
        java.lang.Class<?> wildcardClass37 = intArray36.getClass();
        try {
            int int39 = huffmanTree0.search_for_value(intArray36, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray10 = new int[] { '4', '#', 0, 4 };
        int[] intArray12 = huffmanTree0.expand_array(intArray10, 0);
        HuffmanTree huffmanTree13 = new HuffmanTree();
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int int21 = huffmanTree13.search_for_value(intArray19, (int) (short) 10);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray32 = new int[] { '4', '#', 0, 4 };
        int[] intArray34 = huffmanTree22.expand_array(intArray32, 0);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int int43 = huffmanTree35.search_for_value(intArray41, (int) (short) 10);
        java.lang.Class<?> wildcardClass44 = intArray41.getClass();
        int[] intArray45 = huffmanTree13.create_huffman_tree(intArray32, intArray41);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray56 = new int[] { '4', '#', 0, 4 };
        int[] intArray58 = huffmanTree46.expand_array(intArray56, 0);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int[] intArray72 = huffmanTree59.expand_array(intArray68, (int) (short) 1);
        int[] intArray74 = new int[] { 4 };
        int int76 = huffmanTree59.search_for_value(intArray74, 4);
        int[] intArray77 = huffmanTree13.create_huffman_tree(intArray56, intArray74);
        java.lang.Class<?> wildcardClass78 = huffmanTree13.getClass();
        HuffmanTree huffmanTree79 = new HuffmanTree();
        int[] intArray82 = new int[] { '4', (byte) 10 };
        int[] intArray84 = huffmanTree79.expand_array(intArray82, (-1));
        int[] intArray90 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int92 = huffmanTree79.search_for_value(intArray90, 0);
        java.lang.Class<?> wildcardClass93 = intArray90.getClass();
        int[] intArray95 = huffmanTree13.expand_array(intArray90, (int) (byte) 1);
        java.lang.Class<?> wildcardClass96 = intArray95.getClass();
        java.lang.Class<?> wildcardClass97 = intArray95.getClass();
        try {
            int int99 = huffmanTree0.search_for_value(intArray95, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 4 + "'", int92 == 4);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass7 = huffmanTree0.getClass();
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray21 = huffmanTree8.expand_array(intArray17, (int) (short) 1);
        int[] intArray23 = new int[] { 4 };
        int int25 = huffmanTree8.search_for_value(intArray23, 4);
        int[] intArray27 = huffmanTree0.expand_array(intArray23, (int) (byte) -1);
        int[] intArray28 = null;
        try {
            int int30 = huffmanTree0.search_for_value(intArray28, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        int[] intArray32 = huffmanTree19.expand_array(intArray28, (int) (short) 1);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        int[] intArray43 = new int[] { '4', '#', 0, 4 };
        int[] intArray45 = huffmanTree33.expand_array(intArray43, 0);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        java.lang.Class<?> wildcardClass47 = huffmanTree46.getClass();
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int int55 = huffmanTree46.search_for_value(intArray51, (int) (byte) 10);
        int[] intArray56 = huffmanTree19.create_huffman_tree(intArray43, intArray51);
        int[] intArray58 = huffmanTree0.expand_array(intArray43, (int) (short) 0);
        java.lang.Class<?> wildcardClass59 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass60 = huffmanTree0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int int41 = huffmanTree33.search_for_value(intArray39, (int) (short) 10);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray53 = new int[] { '4', '#', 0, 4 };
        int[] intArray55 = huffmanTree43.expand_array(intArray53, 0);
        HuffmanTree huffmanTree56 = new HuffmanTree();
        int[] intArray59 = new int[] { '4', (byte) 10 };
        int[] intArray61 = huffmanTree56.expand_array(intArray59, (-1));
        int[] intArray66 = new int[] { '4', '#', 0, 4 };
        int[] intArray68 = huffmanTree56.expand_array(intArray66, 0);
        int[] intArray69 = huffmanTree42.create_huffman_tree(intArray53, intArray68);
        int[] intArray71 = huffmanTree33.expand_array(intArray69, (int) (short) 1);
        int[] intArray73 = huffmanTree0.expand_array(intArray69, (-1));
        java.lang.Class<?> wildcardClass74 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass75 = huffmanTree0.getClass();
        HuffmanTree huffmanTree76 = new HuffmanTree();
        int[] intArray79 = new int[] { '4', (byte) 10 };
        int[] intArray81 = huffmanTree76.expand_array(intArray79, (-1));
        HuffmanTree huffmanTree82 = new HuffmanTree();
        int[] intArray85 = new int[] { '4', (byte) 10 };
        int[] intArray87 = huffmanTree82.expand_array(intArray85, (-1));
        int[] intArray89 = huffmanTree76.expand_array(intArray85, (int) (short) 1);
        try {
            int[] intArray91 = huffmanTree0.expand_array(intArray85, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int int43 = huffmanTree35.search_for_value(intArray41, (int) (short) 10);
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray54 = new int[] { '4', '#', 0, 4 };
        int[] intArray56 = huffmanTree44.expand_array(intArray54, 0);
        HuffmanTree huffmanTree57 = new HuffmanTree();
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int int65 = huffmanTree57.search_for_value(intArray63, (int) (short) 10);
        java.lang.Class<?> wildcardClass66 = intArray63.getClass();
        int[] intArray67 = huffmanTree35.create_huffman_tree(intArray54, intArray63);
        java.lang.Class<?> wildcardClass68 = intArray54.getClass();
        java.lang.Class<?> wildcardClass69 = intArray54.getClass();
        int int71 = huffmanTree0.search_for_value(intArray54, (int) (short) 0);
        HuffmanTree huffmanTree72 = new HuffmanTree();
        java.lang.Class<?> wildcardClass73 = huffmanTree72.getClass();
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray84 = new int[] { '4', '#', 0, 4 };
        int[] intArray86 = huffmanTree74.expand_array(intArray84, 0);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        int[] intArray89 = huffmanTree72.expand_array(intArray86, 1);
        try {
            int int91 = huffmanTree0.search_for_value(intArray86, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(intArray89);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        java.lang.Class<?> wildcardClass19 = huffmanTree18.getClass();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        java.lang.Class<?> wildcardClass33 = intArray32.getClass();
        int[] intArray35 = huffmanTree18.expand_array(intArray32, 1);
        java.lang.Class<?> wildcardClass36 = intArray35.getClass();
        int int38 = huffmanTree0.search_for_value(intArray35, 0);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass40 = huffmanTree0.getClass();
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray52 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int54 = huffmanTree41.search_for_value(intArray52, 0);
        HuffmanTree huffmanTree55 = new HuffmanTree();
        int[] intArray58 = new int[] { '4', (byte) 10 };
        int[] intArray60 = huffmanTree55.expand_array(intArray58, (-1));
        int[] intArray66 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int68 = huffmanTree55.search_for_value(intArray66, 0);
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        int[] intArray75 = huffmanTree41.create_huffman_tree(intArray66, intArray72);
        try {
            int int77 = huffmanTree0.search_for_value(intArray72, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray51 = huffmanTree38.expand_array(intArray47, (int) (short) 1);
        int int53 = huffmanTree0.search_for_value(intArray47, 10);
        java.lang.Class<?> wildcardClass54 = huffmanTree0.getClass();
        HuffmanTree huffmanTree55 = new HuffmanTree();
        int[] intArray58 = new int[] { '4', (byte) 10 };
        int[] intArray60 = huffmanTree55.expand_array(intArray58, (-1));
        int[] intArray65 = new int[] { '4', '#', 0, 4 };
        int[] intArray67 = huffmanTree55.expand_array(intArray65, 0);
        java.lang.Class<?> wildcardClass68 = intArray67.getClass();
        java.lang.Class<?> wildcardClass69 = intArray67.getClass();
        try {
            int int71 = huffmanTree0.search_for_value(intArray67, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        HuffmanTree huffmanTree17 = new HuffmanTree();
        java.lang.Class<?> wildcardClass18 = huffmanTree17.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        java.lang.Class<?> wildcardClass25 = huffmanTree19.getClass();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int[] intArray37 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int39 = huffmanTree26.search_for_value(intArray37, 0);
        int int41 = huffmanTree19.search_for_value(intArray37, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray55 = huffmanTree42.expand_array(intArray51, (int) (short) 1);
        int[] intArray57 = new int[] { 4 };
        int int59 = huffmanTree42.search_for_value(intArray57, 4);
        int[] intArray60 = huffmanTree17.create_huffman_tree(intArray37, intArray57);
        java.lang.Class<?> wildcardClass61 = intArray57.getClass();
        java.lang.Class<?> wildcardClass62 = intArray57.getClass();
        int[] intArray64 = huffmanTree0.expand_array(intArray57, 0);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        java.lang.Class<?> wildcardClass66 = huffmanTree65.getClass();
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int int74 = huffmanTree65.search_for_value(intArray70, (int) (byte) 10);
        java.lang.Class<?> wildcardClass75 = intArray70.getClass();
        java.lang.Class<?> wildcardClass76 = intArray70.getClass();
        int[] intArray78 = huffmanTree0.expand_array(intArray70, 0);
        java.lang.Class<?> wildcardClass79 = intArray78.getClass();
        java.lang.Class<?> wildcardClass80 = intArray78.getClass();
        java.lang.Class<?> wildcardClass81 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass21 = intArray18.getClass();
        int int23 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        int[] intArray37 = huffmanTree24.expand_array(intArray33, (int) (short) 1);
        int[] intArray39 = new int[] { 4 };
        int int41 = huffmanTree24.search_for_value(intArray39, 4);
        java.lang.Class<?> wildcardClass42 = intArray39.getClass();
        int[] intArray44 = huffmanTree0.expand_array(intArray39, 0);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray56 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int58 = huffmanTree45.search_for_value(intArray56, 0);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray70 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int72 = huffmanTree59.search_for_value(intArray70, 0);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray79 = huffmanTree45.create_huffman_tree(intArray70, intArray76);
        try {
            int[] intArray81 = huffmanTree0.expand_array(intArray70, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass23 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass24 = huffmanTree0.getClass();
        HuffmanTree huffmanTree25 = new HuffmanTree();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int int33 = huffmanTree25.search_for_value(intArray31, (int) (short) 10);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray44 = new int[] { '4', '#', 0, 4 };
        int[] intArray46 = huffmanTree34.expand_array(intArray44, 0);
        HuffmanTree huffmanTree47 = new HuffmanTree();
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int int55 = huffmanTree47.search_for_value(intArray53, (int) (short) 10);
        java.lang.Class<?> wildcardClass56 = intArray53.getClass();
        int[] intArray57 = huffmanTree25.create_huffman_tree(intArray44, intArray53);
        java.lang.Class<?> wildcardClass58 = intArray53.getClass();
        java.lang.Class<?> wildcardClass59 = intArray53.getClass();
        int int61 = huffmanTree0.search_for_value(intArray53, (int) (byte) 10);
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        java.lang.Class<?> wildcardClass68 = huffmanTree62.getClass();
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        int[] intArray80 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int82 = huffmanTree69.search_for_value(intArray80, 0);
        int int84 = huffmanTree62.search_for_value(intArray80, 0);
        java.lang.Class<?> wildcardClass85 = intArray80.getClass();
        java.lang.Class<?> wildcardClass86 = intArray80.getClass();
        java.lang.Class<?> wildcardClass87 = intArray80.getClass();
        java.lang.Class<?> wildcardClass88 = intArray80.getClass();
        try {
            int int90 = huffmanTree0.search_for_value(intArray80, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 4 + "'", int82 == 4);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass23 = huffmanTree0.getClass();
        int[] intArray24 = null;
        try {
            int int26 = huffmanTree0.search_for_value(intArray24, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int[] intArray12 = new int[] { '4', '#', 0, 4 };
        int[] intArray14 = huffmanTree2.expand_array(intArray12, 0);
        java.lang.Class<?> wildcardClass15 = intArray14.getClass();
        int[] intArray17 = huffmanTree0.expand_array(intArray14, 1);
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int[] intArray30 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int32 = huffmanTree19.search_for_value(intArray30, 0);
        java.lang.Class<?> wildcardClass33 = huffmanTree19.getClass();
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray53 = huffmanTree40.expand_array(intArray49, (int) (short) 1);
        int[] intArray54 = null;
        int[] intArray56 = huffmanTree40.expand_array(intArray54, (int) (short) 1);
        java.lang.Class<?> wildcardClass57 = huffmanTree40.getClass();
        HuffmanTree huffmanTree58 = new HuffmanTree();
        java.lang.Class<?> wildcardClass59 = huffmanTree58.getClass();
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray70 = new int[] { '4', '#', 0, 4 };
        int[] intArray72 = huffmanTree60.expand_array(intArray70, 0);
        java.lang.Class<?> wildcardClass73 = intArray72.getClass();
        int[] intArray75 = huffmanTree58.expand_array(intArray72, 1);
        java.lang.Class<?> wildcardClass76 = intArray75.getClass();
        int int78 = huffmanTree40.search_for_value(intArray75, 0);
        HuffmanTree huffmanTree79 = new HuffmanTree();
        int[] intArray82 = new int[] { '4', (byte) 10 };
        int[] intArray84 = huffmanTree79.expand_array(intArray82, (-1));
        HuffmanTree huffmanTree85 = new HuffmanTree();
        int[] intArray88 = new int[] { '4', (byte) 10 };
        int[] intArray90 = huffmanTree85.expand_array(intArray88, (-1));
        int[] intArray92 = huffmanTree79.expand_array(intArray88, (int) (short) 1);
        int[] intArray93 = huffmanTree34.create_huffman_tree(intArray75, intArray88);
        int int95 = huffmanTree19.search_for_value(intArray88, (int) (byte) 10);
        java.lang.Class<?> wildcardClass96 = intArray88.getClass();
        try {
            int int98 = huffmanTree0.search_for_value(intArray88, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNull(intArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        java.lang.Class<?> wildcardClass43 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass44 = huffmanTree0.getClass();
        int[] intArray45 = null;
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray59 = huffmanTree46.expand_array(intArray55, (int) (short) 1);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray70 = new int[] { '4', '#', 0, 4 };
        int[] intArray72 = huffmanTree60.expand_array(intArray70, 0);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        java.lang.Class<?> wildcardClass74 = huffmanTree73.getClass();
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        int int82 = huffmanTree73.search_for_value(intArray78, (int) (byte) 10);
        int[] intArray83 = huffmanTree46.create_huffman_tree(intArray70, intArray78);
        HuffmanTree huffmanTree84 = new HuffmanTree();
        java.lang.Class<?> wildcardClass85 = huffmanTree84.getClass();
        HuffmanTree huffmanTree86 = new HuffmanTree();
        int[] intArray89 = new int[] { '4', (byte) 10 };
        int[] intArray91 = huffmanTree86.expand_array(intArray89, (-1));
        int int93 = huffmanTree84.search_for_value(intArray89, (int) (byte) 10);
        int[] intArray95 = huffmanTree46.expand_array(intArray89, (int) (short) 1);
        try {
            int[] intArray96 = huffmanTree0.create_huffman_tree(intArray45, intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int[] intArray31 = huffmanTree18.expand_array(intArray27, (int) (short) 1);
        java.lang.Class<?> wildcardClass32 = intArray27.getClass();
        try {
            int[] intArray34 = huffmanTree0.expand_array(intArray27, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray15 = huffmanTree2.expand_array(intArray11, (int) (short) 1);
        int[] intArray17 = new int[] { 4 };
        int int19 = huffmanTree2.search_for_value(intArray17, 4);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray51 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int53 = huffmanTree40.search_for_value(intArray51, 0);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray65 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int67 = huffmanTree54.search_for_value(intArray65, 0);
        HuffmanTree huffmanTree68 = new HuffmanTree();
        int[] intArray71 = new int[] { '4', (byte) 10 };
        int[] intArray73 = huffmanTree68.expand_array(intArray71, (-1));
        int[] intArray74 = huffmanTree40.create_huffman_tree(intArray65, intArray71);
        int[] intArray76 = huffmanTree34.expand_array(intArray65, (int) (byte) 1);
        java.lang.Class<?> wildcardClass77 = intArray65.getClass();
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        int[] intArray89 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int91 = huffmanTree78.search_for_value(intArray89, 0);
        java.lang.Class<?> wildcardClass92 = intArray89.getClass();
        int[] intArray93 = huffmanTree20.create_huffman_tree(intArray65, intArray89);
        int int95 = huffmanTree2.search_for_value(intArray93, (int) (byte) 100);
        java.lang.Class<?> wildcardClass96 = intArray93.getClass();
        java.lang.Class<?> wildcardClass97 = intArray93.getClass();
        try {
            int[] intArray99 = huffmanTree0.expand_array(intArray93, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        java.lang.Class<?> wildcardClass11 = huffmanTree10.getClass();
        HuffmanTree huffmanTree12 = new HuffmanTree();
        int[] intArray15 = new int[] { '4', (byte) 10 };
        int[] intArray17 = huffmanTree12.expand_array(intArray15, (-1));
        int[] intArray23 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int25 = huffmanTree12.search_for_value(intArray23, 0);
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        HuffmanTree huffmanTree32 = new HuffmanTree();
        int[] intArray35 = new int[] { '4', (byte) 10 };
        int[] intArray37 = huffmanTree32.expand_array(intArray35, (-1));
        int[] intArray43 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int45 = huffmanTree32.search_for_value(intArray43, 0);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray57 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int59 = huffmanTree46.search_for_value(intArray57, 0);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray66 = huffmanTree32.create_huffman_tree(intArray57, intArray63);
        int[] intArray68 = huffmanTree26.expand_array(intArray57, (int) (byte) 1);
        java.lang.Class<?> wildcardClass69 = intArray57.getClass();
        HuffmanTree huffmanTree70 = new HuffmanTree();
        int[] intArray73 = new int[] { '4', (byte) 10 };
        int[] intArray75 = huffmanTree70.expand_array(intArray73, (-1));
        int[] intArray81 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int83 = huffmanTree70.search_for_value(intArray81, 0);
        java.lang.Class<?> wildcardClass84 = intArray81.getClass();
        int[] intArray85 = huffmanTree12.create_huffman_tree(intArray57, intArray81);
        int[] intArray87 = huffmanTree10.expand_array(intArray57, 0);
        java.lang.Class<?> wildcardClass88 = intArray87.getClass();
        try {
            int[] intArray90 = huffmanTree0.expand_array(intArray87, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4 + "'", int83 == 4);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass23 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass24 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass25 = huffmanTree0.getClass();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        java.lang.Class<?> wildcardClass27 = huffmanTree26.getClass();
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        java.lang.Class<?> wildcardClass34 = huffmanTree28.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        int int50 = huffmanTree28.search_for_value(intArray46, 0);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int[] intArray64 = huffmanTree51.expand_array(intArray60, (int) (short) 1);
        int[] intArray66 = new int[] { 4 };
        int int68 = huffmanTree51.search_for_value(intArray66, 4);
        int[] intArray69 = huffmanTree26.create_huffman_tree(intArray46, intArray66);
        HuffmanTree huffmanTree70 = new HuffmanTree();
        int[] intArray73 = new int[] { '4', (byte) 10 };
        int[] intArray75 = huffmanTree70.expand_array(intArray73, (-1));
        int[] intArray80 = new int[] { '4', '#', 0, 4 };
        int[] intArray82 = huffmanTree70.expand_array(intArray80, 0);
        HuffmanTree huffmanTree83 = new HuffmanTree();
        int[] intArray86 = new int[] { '4', (byte) 10 };
        int[] intArray88 = huffmanTree83.expand_array(intArray86, (-1));
        int[] intArray93 = new int[] { '4', '#', 0, 4 };
        int[] intArray95 = huffmanTree83.expand_array(intArray93, 0);
        java.lang.Class<?> wildcardClass96 = intArray95.getClass();
        int[] intArray97 = huffmanTree26.create_huffman_tree(intArray80, intArray95);
        try {
            int int99 = huffmanTree0.search_for_value(intArray97, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray45 = new int[] { '4', '#', 0, 4 };
        int[] intArray47 = huffmanTree35.expand_array(intArray45, 0);
        java.lang.Class<?> wildcardClass48 = intArray47.getClass();
        int[] intArray50 = huffmanTree0.expand_array(intArray47, (int) (byte) -1);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int int59 = huffmanTree51.search_for_value(intArray57, (int) (short) 10);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray71 = new int[] { '4', '#', 0, 4 };
        int[] intArray73 = huffmanTree61.expand_array(intArray71, 0);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray84 = new int[] { '4', '#', 0, 4 };
        int[] intArray86 = huffmanTree74.expand_array(intArray84, 0);
        int[] intArray87 = huffmanTree60.create_huffman_tree(intArray71, intArray86);
        int[] intArray89 = huffmanTree51.expand_array(intArray87, (int) (short) 1);
        java.lang.Class<?> wildcardClass90 = intArray89.getClass();
        try {
            int int92 = huffmanTree0.search_for_value(intArray89, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        java.lang.Class<?> wildcardClass38 = huffmanTree0.getClass();
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray50 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int52 = huffmanTree39.search_for_value(intArray50, 0);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray64 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int66 = huffmanTree53.search_for_value(intArray64, 0);
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray73 = huffmanTree39.create_huffman_tree(intArray64, intArray70);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray84 = new int[] { '4', '#', 0, 4 };
        int[] intArray86 = huffmanTree74.expand_array(intArray84, 0);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        int[] intArray89 = huffmanTree39.expand_array(intArray86, (int) (byte) -1);
        java.lang.Class<?> wildcardClass90 = intArray86.getClass();
        java.lang.Class<?> wildcardClass91 = intArray86.getClass();
        int[] intArray93 = huffmanTree0.expand_array(intArray86, 1);
        java.lang.Class<?> wildcardClass94 = huffmanTree0.getClass();
        int[] intArray95 = null;
        try {
            int int97 = huffmanTree0.search_for_value(intArray95, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        int[] intArray14 = new int[] { '4', (byte) 10 };
        int[] intArray16 = huffmanTree11.expand_array(intArray14, (-1));
        int int18 = huffmanTree10.search_for_value(intArray16, (int) (short) 10);
        HuffmanTree huffmanTree19 = new HuffmanTree();
        java.lang.Class<?> wildcardClass20 = huffmanTree19.getClass();
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        java.lang.Class<?> wildcardClass27 = huffmanTree21.getClass();
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray39 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int41 = huffmanTree28.search_for_value(intArray39, 0);
        int int43 = huffmanTree21.search_for_value(intArray39, 0);
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray57 = huffmanTree44.expand_array(intArray53, (int) (short) 1);
        int[] intArray59 = new int[] { 4 };
        int int61 = huffmanTree44.search_for_value(intArray59, 4);
        int[] intArray62 = huffmanTree19.create_huffman_tree(intArray39, intArray59);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        int[] intArray76 = huffmanTree63.expand_array(intArray72, (int) (short) 1);
        int[] intArray78 = new int[] { 4 };
        int int80 = huffmanTree63.search_for_value(intArray78, 4);
        java.lang.Class<?> wildcardClass81 = intArray78.getClass();
        int[] intArray82 = huffmanTree10.create_huffman_tree(intArray39, intArray78);
        int[] intArray84 = huffmanTree0.expand_array(intArray39, 0);
        java.lang.Class<?> wildcardClass85 = huffmanTree0.getClass();
        int[] intArray86 = null;
        int[] intArray87 = null;
        try {
            int[] intArray88 = huffmanTree0.create_huffman_tree(intArray86, intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray33 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int35 = huffmanTree22.search_for_value(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree8.create_huffman_tree(intArray33, intArray39);
        int[] intArray44 = huffmanTree2.expand_array(intArray33, (int) (byte) 1);
        int[] intArray46 = huffmanTree0.expand_array(intArray33, (int) (short) 0);
        java.lang.Class<?> wildcardClass47 = huffmanTree0.getClass();
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray61 = huffmanTree48.expand_array(intArray57, (int) (short) 1);
        int[] intArray63 = new int[] { 4 };
        int int65 = huffmanTree48.search_for_value(intArray63, 4);
        try {
            int int67 = huffmanTree0.search_for_value(intArray63, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        java.lang.Class<?> wildcardClass19 = huffmanTree18.getClass();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        java.lang.Class<?> wildcardClass33 = intArray32.getClass();
        int[] intArray35 = huffmanTree18.expand_array(intArray32, 1);
        java.lang.Class<?> wildcardClass36 = intArray35.getClass();
        int int38 = huffmanTree0.search_for_value(intArray35, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray50 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int52 = huffmanTree39.search_for_value(intArray50, 0);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray63 = new int[] { '4', '#', 0, 4 };
        int[] intArray65 = huffmanTree53.expand_array(intArray63, 0);
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int[] intArray72 = huffmanTree39.create_huffman_tree(intArray63, intArray71);
        java.lang.Class<?> wildcardClass73 = intArray63.getClass();
        try {
            int[] intArray75 = huffmanTree0.expand_array(intArray63, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray33 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int35 = huffmanTree22.search_for_value(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree8.create_huffman_tree(intArray33, intArray39);
        int[] intArray44 = huffmanTree2.expand_array(intArray33, (int) (byte) 1);
        int[] intArray46 = huffmanTree0.expand_array(intArray33, (int) (short) 0);
        int[] intArray47 = null;
        int[] intArray49 = huffmanTree0.expand_array(intArray47, 0);
        int[] intArray50 = null;
        try {
            int[] intArray52 = huffmanTree0.expand_array(intArray50, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNull(intArray49);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray59 = new int[] { '4', '#', 0, 4 };
        int[] intArray61 = huffmanTree49.expand_array(intArray59, 0);
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        int[] intArray68 = huffmanTree35.create_huffman_tree(intArray59, intArray67);
        int[] intArray70 = huffmanTree0.expand_array(intArray68, (-1));
        java.lang.Class<?> wildcardClass71 = huffmanTree0.getClass();
        int[] intArray72 = null;
        try {
            int[] intArray74 = huffmanTree0.expand_array(intArray72, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        int int38 = huffmanTree0.search_for_value(intArray32, (int) (short) 10);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        int[] intArray40 = null;
        try {
            int[] intArray42 = huffmanTree0.expand_array(intArray40, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int[] intArray12 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int14 = huffmanTree1.search_for_value(intArray12, 0);
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray26 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int28 = huffmanTree15.search_for_value(intArray26, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray35 = huffmanTree1.create_huffman_tree(intArray26, intArray32);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray46 = new int[] { '4', '#', 0, 4 };
        int[] intArray48 = huffmanTree36.expand_array(intArray46, 0);
        java.lang.Class<?> wildcardClass49 = intArray48.getClass();
        int[] intArray51 = huffmanTree1.expand_array(intArray48, (int) (byte) -1);
        try {
            int int53 = huffmanTree0.search_for_value(intArray48, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(intArray51);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray33 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int35 = huffmanTree22.search_for_value(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree8.create_huffman_tree(intArray33, intArray39);
        int[] intArray44 = huffmanTree2.expand_array(intArray33, (int) (byte) 1);
        int[] intArray46 = huffmanTree0.expand_array(intArray33, (int) (short) 0);
        HuffmanTree huffmanTree47 = new HuffmanTree();
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray58 = new int[] { '4', '#', 0, 4 };
        int[] intArray60 = huffmanTree48.expand_array(intArray58, 0);
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray71 = new int[] { '4', '#', 0, 4 };
        int[] intArray73 = huffmanTree61.expand_array(intArray71, 0);
        int[] intArray74 = huffmanTree47.create_huffman_tree(intArray58, intArray73);
        java.lang.Class<?> wildcardClass75 = intArray74.getClass();
        int int77 = huffmanTree0.search_for_value(intArray74, 0);
        java.lang.Class<?> wildcardClass78 = huffmanTree0.getClass();
        HuffmanTree huffmanTree79 = new HuffmanTree();
        int[] intArray82 = new int[] { '4', (byte) 10 };
        int[] intArray84 = huffmanTree79.expand_array(intArray82, (-1));
        int[] intArray89 = new int[] { '4', '#', 0, 4 };
        int[] intArray91 = huffmanTree79.expand_array(intArray89, 0);
        try {
            int[] intArray93 = huffmanTree0.expand_array(intArray89, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray33 = new int[] { '4', '#', 0, 4 };
        int[] intArray35 = huffmanTree23.expand_array(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree9.create_huffman_tree(intArray33, intArray41);
        int int44 = huffmanTree0.search_for_value(intArray42, (int) (short) 10);
        int[] intArray45 = null;
        try {
            int[] intArray47 = huffmanTree0.expand_array(intArray45, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray10 = new int[] { '4', '#', 0, 4 };
        int[] intArray12 = huffmanTree0.expand_array(intArray10, 0);
        HuffmanTree huffmanTree13 = new HuffmanTree();
        int[] intArray16 = new int[] { '4', (byte) 10 };
        int[] intArray18 = huffmanTree13.expand_array(intArray16, (-1));
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int[] intArray26 = huffmanTree13.expand_array(intArray22, (int) (short) 1);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray37 = new int[] { '4', '#', 0, 4 };
        int[] intArray39 = huffmanTree27.expand_array(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        java.lang.Class<?> wildcardClass41 = huffmanTree40.getClass();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int int49 = huffmanTree40.search_for_value(intArray45, (int) (byte) 10);
        int[] intArray50 = huffmanTree13.create_huffman_tree(intArray37, intArray45);
        java.lang.Class<?> wildcardClass51 = intArray45.getClass();
        java.lang.Class<?> wildcardClass52 = intArray45.getClass();
        int[] intArray54 = huffmanTree0.expand_array(intArray45, (int) (short) -1);
        HuffmanTree huffmanTree55 = new HuffmanTree();
        java.lang.Class<?> wildcardClass56 = huffmanTree55.getClass();
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int[] intArray67 = new int[] { '4', '#', 0, 4 };
        int[] intArray69 = huffmanTree57.expand_array(intArray67, 0);
        java.lang.Class<?> wildcardClass70 = intArray69.getClass();
        int[] intArray72 = huffmanTree55.expand_array(intArray69, 1);
        int[] intArray74 = huffmanTree0.expand_array(intArray72, 0);
        int[] intArray75 = null;
        try {
            int int77 = huffmanTree0.search_for_value(intArray75, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        java.lang.Class<?> wildcardClass12 = huffmanTree6.getClass();
        java.lang.Class<?> wildcardClass13 = huffmanTree6.getClass();
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray27 = huffmanTree14.expand_array(intArray23, (int) (short) 1);
        int[] intArray29 = new int[] { 4 };
        int int31 = huffmanTree14.search_for_value(intArray29, 4);
        int[] intArray33 = huffmanTree6.expand_array(intArray29, (int) (byte) -1);
        try {
            int int35 = huffmanTree0.search_for_value(intArray29, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray33);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray33 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int35 = huffmanTree22.search_for_value(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree8.create_huffman_tree(intArray33, intArray39);
        int[] intArray44 = huffmanTree2.expand_array(intArray33, (int) (byte) 1);
        int[] intArray46 = huffmanTree0.expand_array(intArray33, (int) (short) 0);
        java.lang.Class<?> wildcardClass47 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass48 = huffmanTree0.getClass();
        int[] intArray49 = null;
        int[] intArray51 = huffmanTree0.expand_array(intArray49, 1);
        try {
            java.lang.Class<?> wildcardClass52 = intArray51.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNull(intArray51);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        int[] intArray31 = new int[] { '4', '#', 0, 4 };
        int[] intArray33 = huffmanTree21.expand_array(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree7.create_huffman_tree(intArray31, intArray39);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        java.lang.Class<?> wildcardClass42 = huffmanTree41.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        java.lang.Class<?> wildcardClass49 = huffmanTree43.getClass();
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray61 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int63 = huffmanTree50.search_for_value(intArray61, 0);
        int int65 = huffmanTree43.search_for_value(intArray61, 0);
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        int[] intArray79 = huffmanTree66.expand_array(intArray75, (int) (short) 1);
        int[] intArray81 = new int[] { 4 };
        int int83 = huffmanTree66.search_for_value(intArray81, 4);
        int[] intArray84 = huffmanTree41.create_huffman_tree(intArray61, intArray81);
        int[] intArray85 = huffmanTree0.create_huffman_tree(intArray31, intArray81);
        java.lang.Class<?> wildcardClass86 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray50 = huffmanTree37.expand_array(intArray46, (int) (short) 1);
        java.lang.Class<?> wildcardClass51 = intArray46.getClass();
        java.lang.Class<?> wildcardClass52 = intArray46.getClass();
        try {
            int int54 = huffmanTree0.search_for_value(intArray46, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int int14 = huffmanTree6.search_for_value(intArray12, (int) (short) 10);
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray26 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int28 = huffmanTree15.search_for_value(intArray26, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray39 = new int[] { '4', '#', 0, 4 };
        int[] intArray41 = huffmanTree29.expand_array(intArray39, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int[] intArray48 = huffmanTree15.create_huffman_tree(intArray39, intArray47);
        int int50 = huffmanTree6.search_for_value(intArray48, (int) (short) 10);
        int[] intArray52 = huffmanTree0.expand_array(intArray48, (int) (byte) -1);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        java.lang.Class<?> wildcardClass59 = huffmanTree53.getClass();
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray71 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int73 = huffmanTree60.search_for_value(intArray71, 0);
        java.lang.Class<?> wildcardClass74 = intArray71.getClass();
        int int76 = huffmanTree53.search_for_value(intArray71, 0);
        HuffmanTree huffmanTree77 = new HuffmanTree();
        int[] intArray80 = new int[] { '4', (byte) 10 };
        int[] intArray82 = huffmanTree77.expand_array(intArray80, (-1));
        HuffmanTree huffmanTree83 = new HuffmanTree();
        int[] intArray86 = new int[] { '4', (byte) 10 };
        int[] intArray88 = huffmanTree83.expand_array(intArray86, (-1));
        int[] intArray90 = huffmanTree77.expand_array(intArray86, (int) (short) 1);
        int[] intArray92 = new int[] { 4 };
        int int94 = huffmanTree77.search_for_value(intArray92, 4);
        java.lang.Class<?> wildcardClass95 = intArray92.getClass();
        int[] intArray97 = huffmanTree53.expand_array(intArray92, 0);
        try {
            int int99 = huffmanTree0.search_for_value(intArray92, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        HuffmanTree huffmanTree17 = new HuffmanTree();
        java.lang.Class<?> wildcardClass18 = huffmanTree17.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        java.lang.Class<?> wildcardClass25 = huffmanTree19.getClass();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int[] intArray37 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int39 = huffmanTree26.search_for_value(intArray37, 0);
        int int41 = huffmanTree19.search_for_value(intArray37, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray55 = huffmanTree42.expand_array(intArray51, (int) (short) 1);
        int[] intArray57 = new int[] { 4 };
        int int59 = huffmanTree42.search_for_value(intArray57, 4);
        int[] intArray60 = huffmanTree17.create_huffman_tree(intArray37, intArray57);
        java.lang.Class<?> wildcardClass61 = intArray57.getClass();
        java.lang.Class<?> wildcardClass62 = intArray57.getClass();
        int[] intArray64 = huffmanTree0.expand_array(intArray57, 0);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        java.lang.Class<?> wildcardClass66 = huffmanTree65.getClass();
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int int74 = huffmanTree65.search_for_value(intArray70, (int) (byte) 10);
        java.lang.Class<?> wildcardClass75 = intArray70.getClass();
        java.lang.Class<?> wildcardClass76 = intArray70.getClass();
        int[] intArray78 = huffmanTree0.expand_array(intArray70, 0);
        java.lang.Class<?> wildcardClass79 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass80 = huffmanTree0.getClass();
        HuffmanTree huffmanTree81 = new HuffmanTree();
        HuffmanTree huffmanTree82 = new HuffmanTree();
        int[] intArray85 = new int[] { '4', (byte) 10 };
        int[] intArray87 = huffmanTree82.expand_array(intArray85, (-1));
        int int89 = huffmanTree81.search_for_value(intArray87, (int) (short) 10);
        int[] intArray91 = huffmanTree0.expand_array(intArray87, 1);
        java.lang.Class<?> wildcardClass92 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass93 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass94 = huffmanTree0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree1.search_for_value(intArray7, (int) (short) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        int[] intArray20 = new int[] { '4', '#', 0, 4 };
        int[] intArray22 = huffmanTree10.expand_array(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int int31 = huffmanTree23.search_for_value(intArray29, (int) (short) 10);
        java.lang.Class<?> wildcardClass32 = intArray29.getClass();
        int[] intArray33 = huffmanTree1.create_huffman_tree(intArray20, intArray29);
        int[] intArray35 = huffmanTree0.expand_array(intArray20, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray55 = huffmanTree42.expand_array(intArray51, (int) (short) 1);
        int[] intArray56 = null;
        int[] intArray58 = huffmanTree42.expand_array(intArray56, (int) (short) 1);
        java.lang.Class<?> wildcardClass59 = huffmanTree42.getClass();
        HuffmanTree huffmanTree60 = new HuffmanTree();
        java.lang.Class<?> wildcardClass61 = huffmanTree60.getClass();
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        int[] intArray72 = new int[] { '4', '#', 0, 4 };
        int[] intArray74 = huffmanTree62.expand_array(intArray72, 0);
        java.lang.Class<?> wildcardClass75 = intArray74.getClass();
        int[] intArray77 = huffmanTree60.expand_array(intArray74, 1);
        java.lang.Class<?> wildcardClass78 = intArray77.getClass();
        int int80 = huffmanTree42.search_for_value(intArray77, 0);
        HuffmanTree huffmanTree81 = new HuffmanTree();
        int[] intArray84 = new int[] { '4', (byte) 10 };
        int[] intArray86 = huffmanTree81.expand_array(intArray84, (-1));
        HuffmanTree huffmanTree87 = new HuffmanTree();
        int[] intArray90 = new int[] { '4', (byte) 10 };
        int[] intArray92 = huffmanTree87.expand_array(intArray90, (-1));
        int[] intArray94 = huffmanTree81.expand_array(intArray90, (int) (short) 1);
        int[] intArray95 = huffmanTree36.create_huffman_tree(intArray77, intArray90);
        java.lang.Class<?> wildcardClass96 = intArray95.getClass();
        try {
            int[] intArray98 = huffmanTree0.expand_array(intArray95, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNull(intArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        java.lang.Class<?> wildcardClass43 = huffmanTree0.getClass();
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        java.lang.Class<?> wildcardClass50 = huffmanTree44.getClass();
        java.lang.Class<?> wildcardClass51 = huffmanTree44.getClass();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int[] intArray65 = huffmanTree52.expand_array(intArray61, (int) (short) 1);
        int[] intArray67 = new int[] { 4 };
        int int69 = huffmanTree52.search_for_value(intArray67, 4);
        int[] intArray71 = huffmanTree44.expand_array(intArray67, (int) (byte) -1);
        try {
            int[] intArray73 = huffmanTree0.expand_array(intArray67, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray71);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray15 = new int[] { 4 };
        int int17 = huffmanTree0.search_for_value(intArray15, 4);
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int[] intArray31 = huffmanTree18.expand_array(intArray27, (int) (short) 1);
        HuffmanTree huffmanTree32 = new HuffmanTree();
        int[] intArray35 = new int[] { '4', (byte) 10 };
        int[] intArray37 = huffmanTree32.expand_array(intArray35, (-1));
        int[] intArray43 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int45 = huffmanTree32.search_for_value(intArray43, 0);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray56 = new int[] { '4', '#', 0, 4 };
        int[] intArray58 = huffmanTree46.expand_array(intArray56, 0);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray65 = huffmanTree32.create_huffman_tree(intArray56, intArray64);
        java.lang.Class<?> wildcardClass66 = intArray56.getClass();
        HuffmanTree huffmanTree67 = new HuffmanTree();
        HuffmanTree huffmanTree68 = new HuffmanTree();
        int[] intArray71 = new int[] { '4', (byte) 10 };
        int[] intArray73 = huffmanTree68.expand_array(intArray71, (-1));
        int[] intArray78 = new int[] { '4', '#', 0, 4 };
        int[] intArray80 = huffmanTree68.expand_array(intArray78, 0);
        HuffmanTree huffmanTree81 = new HuffmanTree();
        int[] intArray84 = new int[] { '4', (byte) 10 };
        int[] intArray86 = huffmanTree81.expand_array(intArray84, (-1));
        int[] intArray91 = new int[] { '4', '#', 0, 4 };
        int[] intArray93 = huffmanTree81.expand_array(intArray91, 0);
        int[] intArray94 = huffmanTree67.create_huffman_tree(intArray78, intArray93);
        int[] intArray95 = huffmanTree18.create_huffman_tree(intArray56, intArray94);
        int[] intArray97 = huffmanTree0.expand_array(intArray94, (int) (byte) 0);
        java.lang.Class<?> wildcardClass98 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass99 = huffmanTree0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertNotNull(wildcardClass98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        HuffmanTree huffmanTree38 = new HuffmanTree();
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int int46 = huffmanTree38.search_for_value(intArray44, (int) (short) 10);
        HuffmanTree huffmanTree47 = new HuffmanTree();
        int[] intArray50 = new int[] { '4', (byte) 10 };
        int[] intArray52 = huffmanTree47.expand_array(intArray50, (-1));
        int[] intArray57 = new int[] { '4', '#', 0, 4 };
        int[] intArray59 = huffmanTree47.expand_array(intArray57, 0);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int int68 = huffmanTree60.search_for_value(intArray66, (int) (short) 10);
        java.lang.Class<?> wildcardClass69 = intArray66.getClass();
        int[] intArray70 = huffmanTree38.create_huffman_tree(intArray57, intArray66);
        int[] intArray72 = huffmanTree37.expand_array(intArray57, 0);
        try {
            int int74 = huffmanTree0.search_for_value(intArray72, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray38 = new int[] { '4', '#', 0, 4 };
        int[] intArray40 = huffmanTree28.expand_array(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray47 = huffmanTree14.create_huffman_tree(intArray38, intArray46);
        int[] intArray49 = huffmanTree0.expand_array(intArray38, 0);
        java.lang.Class<?> wildcardClass50 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass51 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass52 = huffmanTree0.getClass();
        int[] intArray53 = null;
        try {
            int int55 = huffmanTree0.search_for_value(intArray53, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray33 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int35 = huffmanTree22.search_for_value(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree8.create_huffman_tree(intArray33, intArray39);
        int[] intArray44 = huffmanTree2.expand_array(intArray33, (int) (byte) 1);
        int[] intArray46 = huffmanTree0.expand_array(intArray33, (int) (short) 0);
        int[] intArray47 = null;
        int[] intArray49 = huffmanTree0.expand_array(intArray47, 0);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray61 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int63 = huffmanTree50.search_for_value(intArray61, 0);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int[] intArray74 = new int[] { '4', '#', 0, 4 };
        int[] intArray76 = huffmanTree64.expand_array(intArray74, 0);
        HuffmanTree huffmanTree77 = new HuffmanTree();
        int[] intArray80 = new int[] { '4', (byte) 10 };
        int[] intArray82 = huffmanTree77.expand_array(intArray80, (-1));
        int[] intArray83 = huffmanTree50.create_huffman_tree(intArray74, intArray82);
        int int85 = huffmanTree0.search_for_value(intArray83, (int) '#');
        int[] intArray86 = null;
        try {
            int[] intArray88 = huffmanTree0.expand_array(intArray86, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNull(intArray49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int[] intArray11 = new int[] { '4', '#', 0, 4 };
        int[] intArray13 = huffmanTree1.expand_array(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        int[] intArray27 = huffmanTree0.create_huffman_tree(intArray11, intArray26);
        java.lang.Class<?> wildcardClass28 = huffmanTree0.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray40 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int42 = huffmanTree29.search_for_value(intArray40, 0);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray54 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int56 = huffmanTree43.search_for_value(intArray54, 0);
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int[] intArray63 = huffmanTree29.create_huffman_tree(intArray54, intArray60);
        try {
            int int65 = huffmanTree0.search_for_value(intArray54, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        int[] intArray31 = new int[] { '4', '#', 0, 4 };
        int[] intArray33 = huffmanTree21.expand_array(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree7.create_huffman_tree(intArray31, intArray39);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        java.lang.Class<?> wildcardClass42 = huffmanTree41.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        java.lang.Class<?> wildcardClass49 = huffmanTree43.getClass();
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray61 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int63 = huffmanTree50.search_for_value(intArray61, 0);
        int int65 = huffmanTree43.search_for_value(intArray61, 0);
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        int[] intArray79 = huffmanTree66.expand_array(intArray75, (int) (short) 1);
        int[] intArray81 = new int[] { 4 };
        int int83 = huffmanTree66.search_for_value(intArray81, 4);
        int[] intArray84 = huffmanTree41.create_huffman_tree(intArray61, intArray81);
        int[] intArray85 = huffmanTree0.create_huffman_tree(intArray31, intArray81);
        int[] intArray86 = null;
        int[] intArray88 = huffmanTree0.expand_array(intArray86, (int) (byte) 0);
        try {
            java.lang.Class<?> wildcardClass89 = intArray88.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNull(intArray88);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        java.lang.Class<?> wildcardClass9 = huffmanTree0.getClass();
        HuffmanTree huffmanTree10 = new HuffmanTree();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        int[] intArray14 = new int[] { '4', (byte) 10 };
        int[] intArray16 = huffmanTree11.expand_array(intArray14, (-1));
        int int18 = huffmanTree10.search_for_value(intArray16, (int) (short) 10);
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int[] intArray29 = new int[] { '4', '#', 0, 4 };
        int[] intArray31 = huffmanTree19.expand_array(intArray29, 0);
        HuffmanTree huffmanTree32 = new HuffmanTree();
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        int int40 = huffmanTree32.search_for_value(intArray38, (int) (short) 10);
        java.lang.Class<?> wildcardClass41 = intArray38.getClass();
        int[] intArray42 = huffmanTree10.create_huffman_tree(intArray29, intArray38);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray53 = new int[] { '4', '#', 0, 4 };
        int[] intArray55 = huffmanTree43.expand_array(intArray53, 0);
        HuffmanTree huffmanTree56 = new HuffmanTree();
        int[] intArray59 = new int[] { '4', (byte) 10 };
        int[] intArray61 = huffmanTree56.expand_array(intArray59, (-1));
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        int[] intArray69 = huffmanTree56.expand_array(intArray65, (int) (short) 1);
        int[] intArray71 = new int[] { 4 };
        int int73 = huffmanTree56.search_for_value(intArray71, 4);
        int[] intArray74 = huffmanTree10.create_huffman_tree(intArray53, intArray71);
        java.lang.Class<?> wildcardClass75 = huffmanTree10.getClass();
        HuffmanTree huffmanTree76 = new HuffmanTree();
        int[] intArray79 = new int[] { '4', (byte) 10 };
        int[] intArray81 = huffmanTree76.expand_array(intArray79, (-1));
        int[] intArray87 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int89 = huffmanTree76.search_for_value(intArray87, 0);
        java.lang.Class<?> wildcardClass90 = intArray87.getClass();
        int[] intArray92 = huffmanTree10.expand_array(intArray87, (int) (byte) 1);
        int[] intArray94 = huffmanTree0.expand_array(intArray87, (int) (byte) 0);
        int[] intArray95 = null;
        try {
            int int97 = huffmanTree0.search_for_value(intArray95, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 4 + "'", int89 == 4);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        java.lang.Class<?> wildcardClass19 = huffmanTree18.getClass();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        java.lang.Class<?> wildcardClass33 = intArray32.getClass();
        int[] intArray35 = huffmanTree18.expand_array(intArray32, 1);
        java.lang.Class<?> wildcardClass36 = intArray35.getClass();
        int int38 = huffmanTree0.search_for_value(intArray35, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray52 = huffmanTree39.expand_array(intArray48, (int) (short) 1);
        int[] intArray53 = null;
        int[] intArray55 = huffmanTree39.expand_array(intArray53, (int) (short) 1);
        java.lang.Class<?> wildcardClass56 = huffmanTree39.getClass();
        java.lang.Class<?> wildcardClass57 = huffmanTree39.getClass();
        HuffmanTree huffmanTree58 = new HuffmanTree();
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray69 = new int[] { '4', '#', 0, 4 };
        int[] intArray71 = huffmanTree59.expand_array(intArray69, 0);
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        int[] intArray82 = new int[] { '4', '#', 0, 4 };
        int[] intArray84 = huffmanTree72.expand_array(intArray82, 0);
        int[] intArray85 = huffmanTree58.create_huffman_tree(intArray69, intArray84);
        int int87 = huffmanTree39.search_for_value(intArray69, 0);
        java.lang.Class<?> wildcardClass88 = intArray69.getClass();
        try {
            int[] intArray90 = huffmanTree0.expand_array(intArray69, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNull(intArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray10 = new int[] { '4', '#', 0, 4 };
        int[] intArray12 = huffmanTree0.expand_array(intArray10, 0);
        HuffmanTree huffmanTree13 = new HuffmanTree();
        int[] intArray16 = new int[] { '4', (byte) 10 };
        int[] intArray18 = huffmanTree13.expand_array(intArray16, (-1));
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        int[] intArray32 = huffmanTree19.expand_array(intArray28, (int) (short) 1);
        int[] intArray33 = null;
        int[] intArray35 = huffmanTree19.expand_array(intArray33, (int) (short) 1);
        java.lang.Class<?> wildcardClass36 = huffmanTree19.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        java.lang.Class<?> wildcardClass38 = huffmanTree37.getClass();
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray49 = new int[] { '4', '#', 0, 4 };
        int[] intArray51 = huffmanTree39.expand_array(intArray49, 0);
        java.lang.Class<?> wildcardClass52 = intArray51.getClass();
        int[] intArray54 = huffmanTree37.expand_array(intArray51, 1);
        java.lang.Class<?> wildcardClass55 = intArray54.getClass();
        int int57 = huffmanTree19.search_for_value(intArray54, 0);
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int[] intArray71 = huffmanTree58.expand_array(intArray67, (int) (short) 1);
        int[] intArray72 = huffmanTree13.create_huffman_tree(intArray54, intArray67);
        try {
            int int74 = huffmanTree0.search_for_value(intArray72, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNull(intArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        int[] intArray47 = new int[] { '4', '#', 0, 4 };
        int[] intArray49 = huffmanTree37.expand_array(intArray47, 0);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        java.lang.Class<?> wildcardClass51 = huffmanTree50.getClass();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int int59 = huffmanTree50.search_for_value(intArray55, (int) (byte) 10);
        int[] intArray60 = huffmanTree23.create_huffman_tree(intArray47, intArray55);
        java.lang.Class<?> wildcardClass61 = intArray47.getClass();
        try {
            int[] intArray63 = huffmanTree0.expand_array(intArray47, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        java.lang.Class<?> wildcardClass10 = huffmanTree0.getClass();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        int[] intArray14 = new int[] { '4', (byte) 10 };
        int[] intArray16 = huffmanTree11.expand_array(intArray14, (-1));
        int[] intArray22 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int24 = huffmanTree11.search_for_value(intArray22, 0);
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        int[] intArray36 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int38 = huffmanTree25.search_for_value(intArray36, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray56 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int58 = huffmanTree45.search_for_value(intArray56, 0);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray70 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int72 = huffmanTree59.search_for_value(intArray70, 0);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray79 = huffmanTree45.create_huffman_tree(intArray70, intArray76);
        int[] intArray81 = huffmanTree39.expand_array(intArray70, (int) (byte) 1);
        java.lang.Class<?> wildcardClass82 = intArray70.getClass();
        HuffmanTree huffmanTree83 = new HuffmanTree();
        int[] intArray86 = new int[] { '4', (byte) 10 };
        int[] intArray88 = huffmanTree83.expand_array(intArray86, (-1));
        int[] intArray94 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int96 = huffmanTree83.search_for_value(intArray94, 0);
        java.lang.Class<?> wildcardClass97 = intArray94.getClass();
        int[] intArray98 = huffmanTree25.create_huffman_tree(intArray70, intArray94);
        int[] intArray99 = huffmanTree0.create_huffman_tree(intArray22, intArray98);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 4 + "'", int96 == 4);
        org.junit.Assert.assertNotNull(wildcardClass97);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(intArray99);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        java.lang.Class<?> wildcardClass9 = huffmanTree0.getClass();
        HuffmanTree huffmanTree10 = new HuffmanTree();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        int[] intArray14 = new int[] { '4', (byte) 10 };
        int[] intArray16 = huffmanTree11.expand_array(intArray14, (-1));
        int int18 = huffmanTree10.search_for_value(intArray16, (int) (short) 10);
        HuffmanTree huffmanTree19 = new HuffmanTree();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        int[] intArray43 = new int[] { '4', '#', 0, 4 };
        int[] intArray45 = huffmanTree33.expand_array(intArray43, 0);
        int[] intArray46 = huffmanTree19.create_huffman_tree(intArray30, intArray45);
        int[] intArray48 = huffmanTree10.expand_array(intArray46, (int) (short) 1);
        java.lang.Class<?> wildcardClass49 = huffmanTree10.getClass();
        java.lang.Class<?> wildcardClass50 = huffmanTree10.getClass();
        HuffmanTree huffmanTree51 = new HuffmanTree();
        java.lang.Class<?> wildcardClass52 = huffmanTree51.getClass();
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray63 = new int[] { '4', '#', 0, 4 };
        int[] intArray65 = huffmanTree53.expand_array(intArray63, 0);
        java.lang.Class<?> wildcardClass66 = intArray65.getClass();
        int[] intArray68 = huffmanTree51.expand_array(intArray65, 1);
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        java.lang.Class<?> wildcardClass75 = huffmanTree69.getClass();
        java.lang.Class<?> wildcardClass76 = huffmanTree69.getClass();
        HuffmanTree huffmanTree77 = new HuffmanTree();
        int[] intArray80 = new int[] { '4', (byte) 10 };
        int[] intArray82 = huffmanTree77.expand_array(intArray80, (-1));
        HuffmanTree huffmanTree83 = new HuffmanTree();
        int[] intArray86 = new int[] { '4', (byte) 10 };
        int[] intArray88 = huffmanTree83.expand_array(intArray86, (-1));
        int[] intArray90 = huffmanTree77.expand_array(intArray86, (int) (short) 1);
        int[] intArray92 = new int[] { 4 };
        int int94 = huffmanTree77.search_for_value(intArray92, 4);
        int[] intArray96 = huffmanTree69.expand_array(intArray92, (int) (byte) -1);
        int[] intArray97 = huffmanTree10.create_huffman_tree(intArray68, intArray96);
        try {
            int int99 = huffmanTree0.search_for_value(intArray96, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass34 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int[] intArray49 = huffmanTree36.expand_array(intArray45, (int) (short) 1);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray61 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int63 = huffmanTree50.search_for_value(intArray61, 0);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int[] intArray74 = new int[] { '4', '#', 0, 4 };
        int[] intArray76 = huffmanTree64.expand_array(intArray74, 0);
        HuffmanTree huffmanTree77 = new HuffmanTree();
        int[] intArray80 = new int[] { '4', (byte) 10 };
        int[] intArray82 = huffmanTree77.expand_array(intArray80, (-1));
        int[] intArray83 = huffmanTree50.create_huffman_tree(intArray74, intArray82);
        int[] intArray85 = huffmanTree36.expand_array(intArray74, 0);
        java.lang.Class<?> wildcardClass86 = intArray85.getClass();
        int[] intArray88 = huffmanTree0.expand_array(intArray85, (int) (short) 1);
        java.lang.Class<?> wildcardClass89 = huffmanTree0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        int int38 = huffmanTree0.search_for_value(intArray32, (int) (short) 10);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        java.lang.Class<?> wildcardClass46 = huffmanTree40.getClass();
        HuffmanTree huffmanTree47 = new HuffmanTree();
        int[] intArray50 = new int[] { '4', (byte) 10 };
        int[] intArray52 = huffmanTree47.expand_array(intArray50, (-1));
        int[] intArray58 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int60 = huffmanTree47.search_for_value(intArray58, 0);
        java.lang.Class<?> wildcardClass61 = intArray58.getClass();
        int int63 = huffmanTree40.search_for_value(intArray58, 0);
        java.lang.Class<?> wildcardClass64 = intArray58.getClass();
        try {
            int[] intArray66 = huffmanTree0.expand_array(intArray58, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray50 = huffmanTree37.expand_array(intArray46, (int) (short) 1);
        java.lang.Class<?> wildcardClass51 = intArray46.getClass();
        int[] intArray53 = huffmanTree0.expand_array(intArray46, (int) (short) 1);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        HuffmanTree huffmanTree55 = new HuffmanTree();
        int[] intArray58 = new int[] { '4', (byte) 10 };
        int[] intArray60 = huffmanTree55.expand_array(intArray58, (-1));
        int int62 = huffmanTree54.search_for_value(intArray60, (int) (short) 10);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray73 = new int[] { '4', '#', 0, 4 };
        int[] intArray75 = huffmanTree63.expand_array(intArray73, 0);
        HuffmanTree huffmanTree76 = new HuffmanTree();
        HuffmanTree huffmanTree77 = new HuffmanTree();
        int[] intArray80 = new int[] { '4', (byte) 10 };
        int[] intArray82 = huffmanTree77.expand_array(intArray80, (-1));
        int int84 = huffmanTree76.search_for_value(intArray82, (int) (short) 10);
        java.lang.Class<?> wildcardClass85 = intArray82.getClass();
        int[] intArray86 = huffmanTree54.create_huffman_tree(intArray73, intArray82);
        java.lang.Class<?> wildcardClass87 = intArray73.getClass();
        int[] intArray89 = huffmanTree0.expand_array(intArray73, (-1));
        java.lang.Class<?> wildcardClass90 = huffmanTree0.getClass();
        int[] intArray91 = null;
        try {
            int[] intArray93 = huffmanTree0.expand_array(intArray91, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray33 = new int[] { '4', '#', 0, 4 };
        int[] intArray35 = huffmanTree23.expand_array(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree9.create_huffman_tree(intArray33, intArray41);
        int int44 = huffmanTree0.search_for_value(intArray42, (int) (short) 10);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        java.lang.Class<?> wildcardClass51 = huffmanTree45.getClass();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray63 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int65 = huffmanTree52.search_for_value(intArray63, 0);
        int int67 = huffmanTree45.search_for_value(intArray63, 0);
        int[] intArray69 = huffmanTree0.expand_array(intArray63, (int) (short) 1);
        int[] intArray70 = null;
        try {
            int[] intArray72 = huffmanTree0.expand_array(intArray70, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        java.lang.Class<?> wildcardClass42 = huffmanTree36.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray54 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int56 = huffmanTree43.search_for_value(intArray54, 0);
        int int58 = huffmanTree36.search_for_value(intArray54, 0);
        java.lang.Class<?> wildcardClass59 = huffmanTree36.getClass();
        java.lang.Class<?> wildcardClass60 = huffmanTree36.getClass();
        HuffmanTree huffmanTree61 = new HuffmanTree();
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        int int69 = huffmanTree61.search_for_value(intArray67, (int) (short) 10);
        HuffmanTree huffmanTree70 = new HuffmanTree();
        int[] intArray73 = new int[] { '4', (byte) 10 };
        int[] intArray75 = huffmanTree70.expand_array(intArray73, (-1));
        int[] intArray80 = new int[] { '4', '#', 0, 4 };
        int[] intArray82 = huffmanTree70.expand_array(intArray80, 0);
        HuffmanTree huffmanTree83 = new HuffmanTree();
        HuffmanTree huffmanTree84 = new HuffmanTree();
        int[] intArray87 = new int[] { '4', (byte) 10 };
        int[] intArray89 = huffmanTree84.expand_array(intArray87, (-1));
        int int91 = huffmanTree83.search_for_value(intArray89, (int) (short) 10);
        java.lang.Class<?> wildcardClass92 = intArray89.getClass();
        int[] intArray93 = huffmanTree61.create_huffman_tree(intArray80, intArray89);
        java.lang.Class<?> wildcardClass94 = intArray89.getClass();
        java.lang.Class<?> wildcardClass95 = intArray89.getClass();
        int int97 = huffmanTree36.search_for_value(intArray89, (int) (byte) 10);
        try {
            int[] intArray99 = huffmanTree0.expand_array(intArray89, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray59 = new int[] { '4', '#', 0, 4 };
        int[] intArray61 = huffmanTree49.expand_array(intArray59, 0);
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        int[] intArray68 = huffmanTree35.create_huffman_tree(intArray59, intArray67);
        int[] intArray70 = huffmanTree0.expand_array(intArray68, (-1));
        HuffmanTree huffmanTree71 = new HuffmanTree();
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        int int79 = huffmanTree71.search_for_value(intArray77, (int) (short) 10);
        java.lang.Class<?> wildcardClass80 = intArray77.getClass();
        try {
            int[] intArray82 = huffmanTree0.expand_array(intArray77, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass7 = huffmanTree0.getClass();
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray32 = new int[] { '4', '#', 0, 4 };
        int[] intArray34 = huffmanTree22.expand_array(intArray32, 0);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray41 = huffmanTree8.create_huffman_tree(intArray32, intArray40);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int int50 = huffmanTree42.search_for_value(intArray48, (int) (short) 10);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int[] intArray61 = new int[] { '4', '#', 0, 4 };
        int[] intArray63 = huffmanTree51.expand_array(intArray61, 0);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int int72 = huffmanTree64.search_for_value(intArray70, (int) (short) 10);
        java.lang.Class<?> wildcardClass73 = intArray70.getClass();
        int[] intArray74 = huffmanTree42.create_huffman_tree(intArray61, intArray70);
        int int76 = huffmanTree8.search_for_value(intArray74, 10);
        java.lang.Class<?> wildcardClass77 = intArray74.getClass();
        try {
            int[] intArray79 = huffmanTree0.expand_array(intArray74, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        HuffmanTree huffmanTree12 = new HuffmanTree();
        int[] intArray15 = new int[] { '4', (byte) 10 };
        int[] intArray17 = huffmanTree12.expand_array(intArray15, (-1));
        int[] intArray19 = huffmanTree6.expand_array(intArray15, (int) (short) 1);
        int[] intArray20 = null;
        int[] intArray22 = huffmanTree6.expand_array(intArray20, (int) (short) 1);
        java.lang.Class<?> wildcardClass23 = huffmanTree6.getClass();
        HuffmanTree huffmanTree24 = new HuffmanTree();
        java.lang.Class<?> wildcardClass25 = huffmanTree24.getClass();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int[] intArray36 = new int[] { '4', '#', 0, 4 };
        int[] intArray38 = huffmanTree26.expand_array(intArray36, 0);
        java.lang.Class<?> wildcardClass39 = intArray38.getClass();
        int[] intArray41 = huffmanTree24.expand_array(intArray38, 1);
        java.lang.Class<?> wildcardClass42 = intArray41.getClass();
        int int44 = huffmanTree6.search_for_value(intArray41, 0);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int[] intArray58 = huffmanTree45.expand_array(intArray54, (int) (short) 1);
        int[] intArray59 = huffmanTree0.create_huffman_tree(intArray41, intArray54);
        java.lang.Class<?> wildcardClass60 = intArray41.getClass();
        java.lang.Class<?> wildcardClass61 = intArray41.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNull(intArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        java.lang.Class<?> wildcardClass39 = huffmanTree38.getClass();
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int int47 = huffmanTree38.search_for_value(intArray43, (int) (byte) 10);
        int[] intArray49 = huffmanTree0.expand_array(intArray43, (int) (short) 1);
        java.lang.Class<?> wildcardClass50 = huffmanTree0.getClass();
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int[] intArray64 = huffmanTree51.expand_array(intArray60, (int) (short) 1);
        int[] intArray66 = new int[] { 4 };
        int int68 = huffmanTree51.search_for_value(intArray66, 4);
        try {
            int int70 = huffmanTree0.search_for_value(intArray66, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int[] intArray12 = new int[] { '4', '#', 0, 4 };
        int[] intArray14 = huffmanTree2.expand_array(intArray12, 0);
        java.lang.Class<?> wildcardClass15 = intArray14.getClass();
        int[] intArray17 = huffmanTree0.expand_array(intArray14, 1);
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int[] intArray30 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int32 = huffmanTree19.search_for_value(intArray30, 0);
        java.lang.Class<?> wildcardClass33 = intArray30.getClass();
        java.lang.Class<?> wildcardClass34 = intArray30.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray60 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int62 = huffmanTree49.search_for_value(intArray60, 0);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray69 = huffmanTree35.create_huffman_tree(intArray60, intArray66);
        int[] intArray70 = huffmanTree0.create_huffman_tree(intArray30, intArray66);
        HuffmanTree huffmanTree71 = new HuffmanTree();
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        int int79 = huffmanTree71.search_for_value(intArray77, (int) (short) 10);
        try {
            int int81 = huffmanTree0.search_for_value(intArray77, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        int[] intArray43 = new int[] { '4', '#', 0, 4 };
        int[] intArray45 = huffmanTree33.expand_array(intArray43, 0);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray59 = huffmanTree46.expand_array(intArray55, (int) (short) 1);
        int[] intArray61 = new int[] { 4 };
        int int63 = huffmanTree46.search_for_value(intArray61, 4);
        int[] intArray64 = huffmanTree0.create_huffman_tree(intArray43, intArray61);
        java.lang.Class<?> wildcardClass65 = huffmanTree0.getClass();
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int[] intArray77 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int79 = huffmanTree66.search_for_value(intArray77, 0);
        java.lang.Class<?> wildcardClass80 = intArray77.getClass();
        int[] intArray82 = huffmanTree0.expand_array(intArray77, (int) (byte) 1);
        java.lang.Class<?> wildcardClass83 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass84 = huffmanTree0.getClass();
        int[] intArray85 = null;
        try {
            int int87 = huffmanTree0.search_for_value(intArray85, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4 + "'", int79 == 4);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        java.lang.Class<?> wildcardClass34 = huffmanTree33.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int int42 = huffmanTree33.search_for_value(intArray38, (int) (byte) 10);
        int int44 = huffmanTree0.search_for_value(intArray38, (int) (short) 10);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray56 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int58 = huffmanTree45.search_for_value(intArray56, 0);
        java.lang.Class<?> wildcardClass59 = intArray56.getClass();
        java.lang.Class<?> wildcardClass60 = intArray56.getClass();
        java.lang.Class<?> wildcardClass61 = intArray56.getClass();
        java.lang.Class<?> wildcardClass62 = intArray56.getClass();
        try {
            int[] intArray64 = huffmanTree0.expand_array(intArray56, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        int[] intArray20 = new int[] { '4', '#', 0, 4 };
        int[] intArray22 = huffmanTree10.expand_array(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        int[] intArray47 = new int[] { '4', '#', 0, 4 };
        int[] intArray49 = huffmanTree37.expand_array(intArray47, 0);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        java.lang.Class<?> wildcardClass51 = huffmanTree50.getClass();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int int59 = huffmanTree50.search_for_value(intArray55, (int) (byte) 10);
        int[] intArray60 = huffmanTree23.create_huffman_tree(intArray47, intArray55);
        java.lang.Class<?> wildcardClass61 = intArray55.getClass();
        java.lang.Class<?> wildcardClass62 = intArray55.getClass();
        int[] intArray64 = huffmanTree10.expand_array(intArray55, (int) (short) -1);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        java.lang.Class<?> wildcardClass66 = huffmanTree65.getClass();
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray77 = new int[] { '4', '#', 0, 4 };
        int[] intArray79 = huffmanTree67.expand_array(intArray77, 0);
        java.lang.Class<?> wildcardClass80 = intArray79.getClass();
        int[] intArray82 = huffmanTree65.expand_array(intArray79, 1);
        int[] intArray84 = huffmanTree10.expand_array(intArray82, 0);
        try {
            int[] intArray86 = huffmanTree0.expand_array(intArray84, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray47 = huffmanTree34.expand_array(intArray43, (int) (short) 1);
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray59 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int61 = huffmanTree48.search_for_value(intArray59, 0);
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        int[] intArray72 = new int[] { '4', '#', 0, 4 };
        int[] intArray74 = huffmanTree62.expand_array(intArray72, 0);
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        int[] intArray81 = huffmanTree48.create_huffman_tree(intArray72, intArray80);
        int[] intArray83 = huffmanTree34.expand_array(intArray72, 0);
        int[] intArray85 = huffmanTree0.expand_array(intArray83, (int) (byte) 0);
        java.lang.Class<?> wildcardClass86 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        int[] intArray14 = new int[] { '4', (byte) 10 };
        int[] intArray16 = huffmanTree11.expand_array(intArray14, (-1));
        int int18 = huffmanTree10.search_for_value(intArray16, (int) (short) 10);
        HuffmanTree huffmanTree19 = new HuffmanTree();
        java.lang.Class<?> wildcardClass20 = huffmanTree19.getClass();
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        java.lang.Class<?> wildcardClass27 = huffmanTree21.getClass();
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray39 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int41 = huffmanTree28.search_for_value(intArray39, 0);
        int int43 = huffmanTree21.search_for_value(intArray39, 0);
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray57 = huffmanTree44.expand_array(intArray53, (int) (short) 1);
        int[] intArray59 = new int[] { 4 };
        int int61 = huffmanTree44.search_for_value(intArray59, 4);
        int[] intArray62 = huffmanTree19.create_huffman_tree(intArray39, intArray59);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        int[] intArray76 = huffmanTree63.expand_array(intArray72, (int) (short) 1);
        int[] intArray78 = new int[] { 4 };
        int int80 = huffmanTree63.search_for_value(intArray78, 4);
        java.lang.Class<?> wildcardClass81 = intArray78.getClass();
        int[] intArray82 = huffmanTree10.create_huffman_tree(intArray39, intArray78);
        int[] intArray84 = huffmanTree0.expand_array(intArray39, 0);
        java.lang.Class<?> wildcardClass85 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass86 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass87 = huffmanTree0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray33 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int35 = huffmanTree22.search_for_value(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree8.create_huffman_tree(intArray33, intArray39);
        int[] intArray44 = huffmanTree2.expand_array(intArray33, (int) (byte) 1);
        int[] intArray46 = huffmanTree0.expand_array(intArray33, (int) (short) 0);
        java.lang.Class<?> wildcardClass47 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass48 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass49 = huffmanTree0.getClass();
        HuffmanTree huffmanTree50 = new HuffmanTree();
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int int58 = huffmanTree50.search_for_value(intArray56, (int) (short) 10);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray69 = new int[] { '4', '#', 0, 4 };
        int[] intArray71 = huffmanTree59.expand_array(intArray69, 0);
        HuffmanTree huffmanTree72 = new HuffmanTree();
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int int80 = huffmanTree72.search_for_value(intArray78, (int) (short) 10);
        java.lang.Class<?> wildcardClass81 = intArray78.getClass();
        int[] intArray82 = huffmanTree50.create_huffman_tree(intArray69, intArray78);
        try {
            int int84 = huffmanTree0.search_for_value(intArray69, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(intArray82);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        java.lang.Class<?> wildcardClass10 = huffmanTree0.getClass();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        HuffmanTree huffmanTree12 = new HuffmanTree();
        int[] intArray15 = new int[] { '4', (byte) 10 };
        int[] intArray17 = huffmanTree12.expand_array(intArray15, (-1));
        int int19 = huffmanTree11.search_for_value(intArray17, (int) (short) 10);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int int41 = huffmanTree33.search_for_value(intArray39, (int) (short) 10);
        java.lang.Class<?> wildcardClass42 = intArray39.getClass();
        int[] intArray43 = huffmanTree11.create_huffman_tree(intArray30, intArray39);
        java.lang.Class<?> wildcardClass44 = huffmanTree11.getClass();
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int[] intArray62 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int64 = huffmanTree51.search_for_value(intArray62, 0);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int[] intArray76 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int78 = huffmanTree65.search_for_value(intArray76, 0);
        HuffmanTree huffmanTree79 = new HuffmanTree();
        int[] intArray82 = new int[] { '4', (byte) 10 };
        int[] intArray84 = huffmanTree79.expand_array(intArray82, (-1));
        int[] intArray85 = huffmanTree51.create_huffman_tree(intArray76, intArray82);
        int[] intArray87 = huffmanTree45.expand_array(intArray76, (int) (byte) 1);
        int int89 = huffmanTree11.search_for_value(intArray87, 0);
        java.lang.Class<?> wildcardClass90 = intArray87.getClass();
        int int92 = huffmanTree0.search_for_value(intArray87, 10);
        java.lang.Class<?> wildcardClass93 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass94 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass95 = huffmanTree0.getClass();
        int[] intArray96 = null;
        int[] intArray98 = huffmanTree0.expand_array(intArray96, (int) (byte) -1);
        try {
            java.lang.Class<?> wildcardClass99 = intArray98.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 4 + "'", int89 == 4);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 3 + "'", int92 == 3);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNull(intArray98);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        int[] intArray23 = huffmanTree10.expand_array(intArray19, (int) (short) 1);
        int[] intArray24 = null;
        int[] intArray26 = huffmanTree10.expand_array(intArray24, (int) (short) 1);
        java.lang.Class<?> wildcardClass27 = huffmanTree10.getClass();
        java.lang.Class<?> wildcardClass28 = huffmanTree10.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray42 = huffmanTree29.expand_array(intArray38, (int) (short) 1);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray53 = new int[] { '4', '#', 0, 4 };
        int[] intArray55 = huffmanTree43.expand_array(intArray53, 0);
        HuffmanTree huffmanTree56 = new HuffmanTree();
        java.lang.Class<?> wildcardClass57 = huffmanTree56.getClass();
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int int65 = huffmanTree56.search_for_value(intArray61, (int) (byte) 10);
        int[] intArray66 = huffmanTree29.create_huffman_tree(intArray53, intArray61);
        int[] intArray68 = huffmanTree10.expand_array(intArray53, (int) (short) 0);
        try {
            int int70 = huffmanTree0.search_for_value(intArray53, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        java.lang.Class<?> wildcardClass9 = huffmanTree0.getClass();
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        int[] intArray21 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int23 = huffmanTree10.search_for_value(intArray21, 0);
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int[] intArray35 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int37 = huffmanTree24.search_for_value(intArray35, 0);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        int[] intArray44 = huffmanTree10.create_huffman_tree(intArray35, intArray41);
        java.lang.Class<?> wildcardClass45 = huffmanTree10.getClass();
        java.lang.Class<?> wildcardClass46 = huffmanTree10.getClass();
        HuffmanTree huffmanTree47 = new HuffmanTree();
        int[] intArray50 = new int[] { '4', (byte) 10 };
        int[] intArray52 = huffmanTree47.expand_array(intArray50, (-1));
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray64 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int66 = huffmanTree53.search_for_value(intArray64, 0);
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray78 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int80 = huffmanTree67.search_for_value(intArray78, 0);
        HuffmanTree huffmanTree81 = new HuffmanTree();
        int[] intArray84 = new int[] { '4', (byte) 10 };
        int[] intArray86 = huffmanTree81.expand_array(intArray84, (-1));
        int[] intArray87 = huffmanTree53.create_huffman_tree(intArray78, intArray84);
        int[] intArray89 = huffmanTree47.expand_array(intArray78, (int) (byte) 1);
        int[] intArray91 = huffmanTree10.expand_array(intArray89, (-1));
        int[] intArray94 = new int[] { (short) 0, 0 };
        int int96 = huffmanTree10.search_for_value(intArray94, 0);
        int[] intArray98 = huffmanTree0.expand_array(intArray94, (int) (byte) -1);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 4 + "'", int80 == 4);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        java.lang.Class<?> wildcardClass7 = huffmanTree1.getClass();
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray32 = new int[] { '4', '#', 0, 4 };
        int[] intArray34 = huffmanTree22.expand_array(intArray32, 0);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray41 = huffmanTree8.create_huffman_tree(intArray32, intArray40);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        java.lang.Class<?> wildcardClass43 = huffmanTree42.getClass();
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        java.lang.Class<?> wildcardClass50 = huffmanTree44.getClass();
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int[] intArray62 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int64 = huffmanTree51.search_for_value(intArray62, 0);
        int int66 = huffmanTree44.search_for_value(intArray62, 0);
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray80 = huffmanTree67.expand_array(intArray76, (int) (short) 1);
        int[] intArray82 = new int[] { 4 };
        int int84 = huffmanTree67.search_for_value(intArray82, 4);
        int[] intArray85 = huffmanTree42.create_huffman_tree(intArray62, intArray82);
        int[] intArray86 = huffmanTree1.create_huffman_tree(intArray32, intArray82);
        java.lang.Class<?> wildcardClass87 = intArray82.getClass();
        int[] intArray89 = huffmanTree0.expand_array(intArray82, (-1));
        java.lang.Class<?> wildcardClass90 = huffmanTree0.getClass();
        int[] intArray91 = null;
        try {
            int int93 = huffmanTree0.search_for_value(intArray91, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray33 = new int[] { '4', '#', 0, 4 };
        int[] intArray35 = huffmanTree23.expand_array(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree9.create_huffman_tree(intArray33, intArray41);
        int int44 = huffmanTree0.search_for_value(intArray42, (int) (short) 10);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        java.lang.Class<?> wildcardClass51 = huffmanTree45.getClass();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray63 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int65 = huffmanTree52.search_for_value(intArray63, 0);
        int int67 = huffmanTree45.search_for_value(intArray63, 0);
        int[] intArray69 = huffmanTree0.expand_array(intArray63, (int) (short) 1);
        java.lang.Class<?> wildcardClass70 = huffmanTree0.getClass();
        int[] intArray71 = null;
        try {
            int int73 = huffmanTree0.search_for_value(intArray71, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray1 = null;
        HuffmanTree huffmanTree2 = new HuffmanTree();
        HuffmanTree huffmanTree3 = new HuffmanTree();
        int[] intArray6 = new int[] { '4', (byte) 10 };
        int[] intArray8 = huffmanTree3.expand_array(intArray6, (-1));
        int int10 = huffmanTree2.search_for_value(intArray8, (int) (short) 10);
        HuffmanTree huffmanTree11 = new HuffmanTree();
        java.lang.Class<?> wildcardClass12 = huffmanTree11.getClass();
        HuffmanTree huffmanTree13 = new HuffmanTree();
        int[] intArray16 = new int[] { '4', (byte) 10 };
        int[] intArray18 = huffmanTree13.expand_array(intArray16, (-1));
        java.lang.Class<?> wildcardClass19 = huffmanTree13.getClass();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        int int35 = huffmanTree13.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int[] intArray49 = huffmanTree36.expand_array(intArray45, (int) (short) 1);
        int[] intArray51 = new int[] { 4 };
        int int53 = huffmanTree36.search_for_value(intArray51, 4);
        int[] intArray54 = huffmanTree11.create_huffman_tree(intArray31, intArray51);
        HuffmanTree huffmanTree55 = new HuffmanTree();
        int[] intArray58 = new int[] { '4', (byte) 10 };
        int[] intArray60 = huffmanTree55.expand_array(intArray58, (-1));
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray68 = huffmanTree55.expand_array(intArray64, (int) (short) 1);
        int[] intArray70 = new int[] { 4 };
        int int72 = huffmanTree55.search_for_value(intArray70, 4);
        java.lang.Class<?> wildcardClass73 = intArray70.getClass();
        int[] intArray74 = huffmanTree2.create_huffman_tree(intArray31, intArray70);
        java.lang.Class<?> wildcardClass75 = intArray70.getClass();
        try {
            int[] intArray76 = huffmanTree0.create_huffman_tree(intArray1, intArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int[] intArray12 = new int[] { '4', '#', 0, 4 };
        int[] intArray14 = huffmanTree2.expand_array(intArray12, 0);
        java.lang.Class<?> wildcardClass15 = intArray14.getClass();
        int[] intArray17 = huffmanTree0.expand_array(intArray14, 1);
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass19 = huffmanTree0.getClass();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        java.lang.Class<?> wildcardClass21 = huffmanTree20.getClass();
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int int29 = huffmanTree20.search_for_value(intArray25, (int) (byte) 10);
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray43 = huffmanTree30.expand_array(intArray39, (int) (short) 1);
        int[] intArray44 = null;
        int[] intArray46 = huffmanTree30.expand_array(intArray44, (int) (short) 1);
        HuffmanTree huffmanTree47 = new HuffmanTree();
        java.lang.Class<?> wildcardClass48 = huffmanTree47.getClass();
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        java.lang.Class<?> wildcardClass55 = huffmanTree49.getClass();
        HuffmanTree huffmanTree56 = new HuffmanTree();
        int[] intArray59 = new int[] { '4', (byte) 10 };
        int[] intArray61 = huffmanTree56.expand_array(intArray59, (-1));
        int[] intArray67 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int69 = huffmanTree56.search_for_value(intArray67, 0);
        int int71 = huffmanTree49.search_for_value(intArray67, 0);
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        int[] intArray85 = huffmanTree72.expand_array(intArray81, (int) (short) 1);
        int[] intArray87 = new int[] { 4 };
        int int89 = huffmanTree72.search_for_value(intArray87, 4);
        int[] intArray90 = huffmanTree47.create_huffman_tree(intArray67, intArray87);
        java.lang.Class<?> wildcardClass91 = intArray87.getClass();
        java.lang.Class<?> wildcardClass92 = intArray87.getClass();
        int[] intArray94 = huffmanTree30.expand_array(intArray87, 0);
        int[] intArray96 = huffmanTree20.expand_array(intArray87, (int) (short) 1);
        try {
            int int98 = huffmanTree0.search_for_value(intArray96, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNull(intArray46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        java.lang.Class<?> wildcardClass10 = huffmanTree0.getClass();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        HuffmanTree huffmanTree12 = new HuffmanTree();
        int[] intArray15 = new int[] { '4', (byte) 10 };
        int[] intArray17 = huffmanTree12.expand_array(intArray15, (-1));
        int int19 = huffmanTree11.search_for_value(intArray17, (int) (short) 10);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int int41 = huffmanTree33.search_for_value(intArray39, (int) (short) 10);
        java.lang.Class<?> wildcardClass42 = intArray39.getClass();
        int[] intArray43 = huffmanTree11.create_huffman_tree(intArray30, intArray39);
        java.lang.Class<?> wildcardClass44 = huffmanTree11.getClass();
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int[] intArray62 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int64 = huffmanTree51.search_for_value(intArray62, 0);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int[] intArray76 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int78 = huffmanTree65.search_for_value(intArray76, 0);
        HuffmanTree huffmanTree79 = new HuffmanTree();
        int[] intArray82 = new int[] { '4', (byte) 10 };
        int[] intArray84 = huffmanTree79.expand_array(intArray82, (-1));
        int[] intArray85 = huffmanTree51.create_huffman_tree(intArray76, intArray82);
        int[] intArray87 = huffmanTree45.expand_array(intArray76, (int) (byte) 1);
        int int89 = huffmanTree11.search_for_value(intArray87, 0);
        java.lang.Class<?> wildcardClass90 = intArray87.getClass();
        int int92 = huffmanTree0.search_for_value(intArray87, 10);
        java.lang.Class<?> wildcardClass93 = huffmanTree0.getClass();
        int[] intArray94 = null;
        try {
            int int96 = huffmanTree0.search_for_value(intArray94, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 4 + "'", int89 == 4);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 3 + "'", int92 == 3);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        int[] intArray14 = new int[] { '4', (byte) 10 };
        int[] intArray16 = huffmanTree11.expand_array(intArray14, (-1));
        int int18 = huffmanTree10.search_for_value(intArray16, (int) (short) 10);
        HuffmanTree huffmanTree19 = new HuffmanTree();
        java.lang.Class<?> wildcardClass20 = huffmanTree19.getClass();
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        java.lang.Class<?> wildcardClass27 = huffmanTree21.getClass();
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray39 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int41 = huffmanTree28.search_for_value(intArray39, 0);
        int int43 = huffmanTree21.search_for_value(intArray39, 0);
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray57 = huffmanTree44.expand_array(intArray53, (int) (short) 1);
        int[] intArray59 = new int[] { 4 };
        int int61 = huffmanTree44.search_for_value(intArray59, 4);
        int[] intArray62 = huffmanTree19.create_huffman_tree(intArray39, intArray59);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        int[] intArray76 = huffmanTree63.expand_array(intArray72, (int) (short) 1);
        int[] intArray78 = new int[] { 4 };
        int int80 = huffmanTree63.search_for_value(intArray78, 4);
        java.lang.Class<?> wildcardClass81 = intArray78.getClass();
        int[] intArray82 = huffmanTree10.create_huffman_tree(intArray39, intArray78);
        int[] intArray84 = huffmanTree0.expand_array(intArray39, 0);
        java.lang.Class<?> wildcardClass85 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass86 = huffmanTree0.getClass();
        HuffmanTree huffmanTree87 = new HuffmanTree();
        int[] intArray90 = new int[] { '4', (byte) 10 };
        int[] intArray92 = huffmanTree87.expand_array(intArray90, (-1));
        java.lang.Class<?> wildcardClass93 = intArray92.getClass();
        try {
            int int95 = huffmanTree0.search_for_value(intArray92, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray10 = new int[] { '4', '#', 0, 4 };
        int[] intArray12 = huffmanTree0.expand_array(intArray10, 0);
        HuffmanTree huffmanTree13 = new HuffmanTree();
        int[] intArray16 = new int[] { '4', (byte) 10 };
        int[] intArray18 = huffmanTree13.expand_array(intArray16, (-1));
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int[] intArray26 = huffmanTree13.expand_array(intArray22, (int) (short) 1);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray37 = new int[] { '4', '#', 0, 4 };
        int[] intArray39 = huffmanTree27.expand_array(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        java.lang.Class<?> wildcardClass41 = huffmanTree40.getClass();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int int49 = huffmanTree40.search_for_value(intArray45, (int) (byte) 10);
        int[] intArray50 = huffmanTree13.create_huffman_tree(intArray37, intArray45);
        java.lang.Class<?> wildcardClass51 = intArray45.getClass();
        java.lang.Class<?> wildcardClass52 = intArray45.getClass();
        int[] intArray54 = huffmanTree0.expand_array(intArray45, (int) (short) -1);
        java.lang.Class<?> wildcardClass55 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass56 = huffmanTree0.getClass();
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray70 = huffmanTree57.expand_array(intArray66, (int) (short) 1);
        java.lang.Class<?> wildcardClass71 = intArray70.getClass();
        try {
            int int73 = huffmanTree0.search_for_value(intArray70, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int[] intArray11 = new int[] { '4', '#', 0, 4 };
        int[] intArray13 = huffmanTree1.expand_array(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        int[] intArray27 = huffmanTree0.create_huffman_tree(intArray11, intArray26);
        java.lang.Class<?> wildcardClass28 = huffmanTree0.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray60 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int62 = huffmanTree49.search_for_value(intArray60, 0);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray69 = huffmanTree35.create_huffman_tree(intArray60, intArray66);
        int[] intArray71 = huffmanTree29.expand_array(intArray60, (int) (byte) 1);
        java.lang.Class<?> wildcardClass72 = huffmanTree29.getClass();
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        HuffmanTree huffmanTree79 = new HuffmanTree();
        int[] intArray82 = new int[] { '4', (byte) 10 };
        int[] intArray84 = huffmanTree79.expand_array(intArray82, (-1));
        int[] intArray86 = huffmanTree73.expand_array(intArray82, (int) (short) 1);
        int[] intArray88 = new int[] { 4 };
        int int90 = huffmanTree73.search_for_value(intArray88, 4);
        int[] intArray92 = huffmanTree29.expand_array(intArray88, (int) (byte) 1);
        try {
            int[] intArray94 = huffmanTree0.expand_array(intArray92, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        int[] intArray2 = null;
        HuffmanTree huffmanTree3 = new HuffmanTree();
        HuffmanTree huffmanTree4 = new HuffmanTree();
        int[] intArray7 = new int[] { '4', (byte) 10 };
        int[] intArray9 = huffmanTree4.expand_array(intArray7, (-1));
        int int11 = huffmanTree3.search_for_value(intArray9, (int) (short) 10);
        HuffmanTree huffmanTree12 = new HuffmanTree();
        int[] intArray15 = new int[] { '4', (byte) 10 };
        int[] intArray17 = huffmanTree12.expand_array(intArray15, (-1));
        int[] intArray22 = new int[] { '4', '#', 0, 4 };
        int[] intArray24 = huffmanTree12.expand_array(intArray22, 0);
        HuffmanTree huffmanTree25 = new HuffmanTree();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int int33 = huffmanTree25.search_for_value(intArray31, (int) (short) 10);
        java.lang.Class<?> wildcardClass34 = intArray31.getClass();
        int[] intArray35 = huffmanTree3.create_huffman_tree(intArray22, intArray31);
        java.lang.Class<?> wildcardClass36 = huffmanTree3.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray50 = huffmanTree37.expand_array(intArray46, (int) (short) 1);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int[] intArray62 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int64 = huffmanTree51.search_for_value(intArray62, 0);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int[] intArray75 = new int[] { '4', '#', 0, 4 };
        int[] intArray77 = huffmanTree65.expand_array(intArray75, 0);
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        int[] intArray84 = huffmanTree51.create_huffman_tree(intArray75, intArray83);
        int[] intArray86 = huffmanTree37.expand_array(intArray75, 0);
        int[] intArray88 = huffmanTree3.expand_array(intArray86, (int) (byte) 0);
        try {
            int[] intArray89 = huffmanTree0.create_huffman_tree(intArray2, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray33 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int35 = huffmanTree22.search_for_value(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree8.create_huffman_tree(intArray33, intArray39);
        int[] intArray44 = huffmanTree2.expand_array(intArray33, (int) (byte) 1);
        int[] intArray46 = huffmanTree0.expand_array(intArray33, (int) (short) 0);
        java.lang.Class<?> wildcardClass47 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass48 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass49 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass50 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass51 = huffmanTree0.getClass();
        int[] intArray52 = null;
        try {
            int[] intArray54 = huffmanTree0.expand_array(intArray52, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        java.lang.Class<?> wildcardClass41 = huffmanTree35.getClass();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int int50 = huffmanTree42.search_for_value(intArray48, (int) (short) 10);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int[] intArray61 = new int[] { '4', '#', 0, 4 };
        int[] intArray63 = huffmanTree51.expand_array(intArray61, 0);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int int72 = huffmanTree64.search_for_value(intArray70, (int) (short) 10);
        java.lang.Class<?> wildcardClass73 = intArray70.getClass();
        int[] intArray74 = huffmanTree42.create_huffman_tree(intArray61, intArray70);
        int[] intArray76 = huffmanTree35.expand_array(intArray61, (int) (byte) -1);
        try {
            int int78 = huffmanTree0.search_for_value(intArray76, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        java.lang.Class<?> wildcardClass19 = huffmanTree18.getClass();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        java.lang.Class<?> wildcardClass33 = intArray32.getClass();
        int[] intArray35 = huffmanTree18.expand_array(intArray32, 1);
        java.lang.Class<?> wildcardClass36 = intArray35.getClass();
        int int38 = huffmanTree0.search_for_value(intArray35, 0);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        HuffmanTree huffmanTree40 = new HuffmanTree();
        java.lang.Class<?> wildcardClass41 = huffmanTree40.getClass();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int int49 = huffmanTree40.search_for_value(intArray45, (int) (byte) 10);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        java.lang.Class<?> wildcardClass51 = huffmanTree50.getClass();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        java.lang.Class<?> wildcardClass58 = huffmanTree52.getClass();
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray70 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int72 = huffmanTree59.search_for_value(intArray70, 0);
        int int74 = huffmanTree52.search_for_value(intArray70, 0);
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        HuffmanTree huffmanTree81 = new HuffmanTree();
        int[] intArray84 = new int[] { '4', (byte) 10 };
        int[] intArray86 = huffmanTree81.expand_array(intArray84, (-1));
        int[] intArray88 = huffmanTree75.expand_array(intArray84, (int) (short) 1);
        int[] intArray90 = new int[] { 4 };
        int int92 = huffmanTree75.search_for_value(intArray90, 4);
        int[] intArray93 = huffmanTree50.create_huffman_tree(intArray70, intArray90);
        int int95 = huffmanTree40.search_for_value(intArray70, (int) (byte) 100);
        java.lang.Class<?> wildcardClass96 = intArray70.getClass();
        int int98 = huffmanTree0.search_for_value(intArray70, 0);
        java.lang.Class<?> wildcardClass99 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 4 + "'", int98 == 4);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        java.lang.Class<?> wildcardClass38 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        int[] intArray40 = null;
        try {
            int[] intArray42 = huffmanTree0.expand_array(intArray40, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int[] intArray11 = new int[] { '4', '#', 0, 4 };
        int[] intArray13 = huffmanTree1.expand_array(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        int[] intArray27 = huffmanTree0.create_huffman_tree(intArray11, intArray26);
        java.lang.Class<?> wildcardClass28 = huffmanTree0.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        java.lang.Class<?> wildcardClass35 = huffmanTree29.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree29.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray50 = huffmanTree37.expand_array(intArray46, (int) (short) 1);
        int[] intArray52 = new int[] { 4 };
        int int54 = huffmanTree37.search_for_value(intArray52, 4);
        int[] intArray56 = huffmanTree29.expand_array(intArray52, (int) (byte) -1);
        try {
            int int58 = huffmanTree0.search_for_value(intArray56, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray56);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        java.lang.Class<?> wildcardClass14 = huffmanTree0.getClass();
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray26 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int28 = huffmanTree15.search_for_value(intArray26, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray60 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int62 = huffmanTree49.search_for_value(intArray60, 0);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray69 = huffmanTree35.create_huffman_tree(intArray60, intArray66);
        int[] intArray71 = huffmanTree29.expand_array(intArray60, (int) (byte) 1);
        java.lang.Class<?> wildcardClass72 = intArray60.getClass();
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray84 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int86 = huffmanTree73.search_for_value(intArray84, 0);
        java.lang.Class<?> wildcardClass87 = intArray84.getClass();
        int[] intArray88 = huffmanTree15.create_huffman_tree(intArray60, intArray84);
        java.lang.Class<?> wildcardClass89 = intArray60.getClass();
        try {
            int int91 = huffmanTree0.search_for_value(intArray60, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray33 = new int[] { '4', '#', 0, 4 };
        int[] intArray35 = huffmanTree23.expand_array(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree9.create_huffman_tree(intArray33, intArray41);
        int int44 = huffmanTree0.search_for_value(intArray42, (int) (short) 10);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        java.lang.Class<?> wildcardClass51 = huffmanTree45.getClass();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray63 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int65 = huffmanTree52.search_for_value(intArray63, 0);
        int int67 = huffmanTree45.search_for_value(intArray63, 0);
        int[] intArray69 = huffmanTree0.expand_array(intArray63, (int) (short) 1);
        HuffmanTree huffmanTree70 = new HuffmanTree();
        int[] intArray73 = new int[] { '4', (byte) 10 };
        int[] intArray75 = huffmanTree70.expand_array(intArray73, (-1));
        HuffmanTree huffmanTree76 = new HuffmanTree();
        int[] intArray79 = new int[] { '4', (byte) 10 };
        int[] intArray81 = huffmanTree76.expand_array(intArray79, (-1));
        int[] intArray83 = huffmanTree70.expand_array(intArray79, (int) (short) 1);
        java.lang.Class<?> wildcardClass84 = intArray79.getClass();
        java.lang.Class<?> wildcardClass85 = intArray79.getClass();
        try {
            int int87 = huffmanTree0.search_for_value(intArray79, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray38 = new int[] { '4', '#', 0, 4 };
        int[] intArray40 = huffmanTree28.expand_array(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray47 = huffmanTree14.create_huffman_tree(intArray38, intArray46);
        int[] intArray49 = huffmanTree0.expand_array(intArray38, 0);
        java.lang.Class<?> wildcardClass50 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass51 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass52 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass53 = huffmanTree0.getClass();
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        java.lang.Class<?> wildcardClass60 = huffmanTree54.getClass();
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray72 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int74 = huffmanTree61.search_for_value(intArray72, 0);
        int int76 = huffmanTree54.search_for_value(intArray72, 0);
        java.lang.Class<?> wildcardClass77 = intArray72.getClass();
        java.lang.Class<?> wildcardClass78 = intArray72.getClass();
        java.lang.Class<?> wildcardClass79 = intArray72.getClass();
        try {
            int[] intArray81 = huffmanTree0.expand_array(intArray72, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass23 = huffmanTree0.getClass();
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        int[] intArray37 = huffmanTree24.expand_array(intArray33, (int) (short) 1);
        int[] intArray39 = new int[] { 4 };
        int int41 = huffmanTree24.search_for_value(intArray39, 4);
        java.lang.Class<?> wildcardClass42 = intArray39.getClass();
        int[] intArray44 = huffmanTree0.expand_array(intArray39, (int) (short) -1);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        java.lang.Class<?> wildcardClass46 = huffmanTree45.getClass();
        HuffmanTree huffmanTree47 = new HuffmanTree();
        int[] intArray50 = new int[] { '4', (byte) 10 };
        int[] intArray52 = huffmanTree47.expand_array(intArray50, (-1));
        int[] intArray57 = new int[] { '4', '#', 0, 4 };
        int[] intArray59 = huffmanTree47.expand_array(intArray57, 0);
        java.lang.Class<?> wildcardClass60 = intArray59.getClass();
        int[] intArray62 = huffmanTree45.expand_array(intArray59, 1);
        java.lang.Class<?> wildcardClass63 = intArray62.getClass();
        try {
            int int65 = huffmanTree0.search_for_value(intArray62, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int int27 = huffmanTree19.search_for_value(intArray25, (int) (short) 10);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray39 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int41 = huffmanTree28.search_for_value(intArray39, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int[] intArray52 = new int[] { '4', '#', 0, 4 };
        int[] intArray54 = huffmanTree42.expand_array(intArray52, 0);
        HuffmanTree huffmanTree55 = new HuffmanTree();
        int[] intArray58 = new int[] { '4', (byte) 10 };
        int[] intArray60 = huffmanTree55.expand_array(intArray58, (-1));
        int[] intArray61 = huffmanTree28.create_huffman_tree(intArray52, intArray60);
        int int63 = huffmanTree19.search_for_value(intArray61, (int) (short) 10);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        java.lang.Class<?> wildcardClass70 = huffmanTree64.getClass();
        HuffmanTree huffmanTree71 = new HuffmanTree();
        int[] intArray74 = new int[] { '4', (byte) 10 };
        int[] intArray76 = huffmanTree71.expand_array(intArray74, (-1));
        int[] intArray82 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int84 = huffmanTree71.search_for_value(intArray82, 0);
        int int86 = huffmanTree64.search_for_value(intArray82, 0);
        int[] intArray88 = huffmanTree19.expand_array(intArray82, (int) (short) 1);
        java.lang.Class<?> wildcardClass89 = intArray82.getClass();
        int[] intArray91 = huffmanTree0.expand_array(intArray82, (int) (short) 1);
        int[] intArray92 = new int[] {};
        try {
            int int94 = huffmanTree0.search_for_value(intArray92, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray50 = huffmanTree37.expand_array(intArray46, (int) (short) 1);
        java.lang.Class<?> wildcardClass51 = intArray46.getClass();
        int[] intArray53 = huffmanTree0.expand_array(intArray46, (int) (short) 1);
        java.lang.Class<?> wildcardClass54 = huffmanTree0.getClass();
        int[] intArray55 = null;
        try {
            int[] intArray57 = huffmanTree0.expand_array(intArray55, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass7 = huffmanTree0.getClass();
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray21 = huffmanTree8.expand_array(intArray17, (int) (short) 1);
        int[] intArray23 = new int[] { 4 };
        int int25 = huffmanTree8.search_for_value(intArray23, 4);
        int[] intArray27 = huffmanTree0.expand_array(intArray23, (int) (byte) -1);
        java.lang.Class<?> wildcardClass28 = intArray23.getClass();
        java.lang.Class<?> wildcardClass29 = intArray23.getClass();
        java.lang.Class<?> wildcardClass30 = intArray23.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int[] intArray30 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int32 = huffmanTree19.search_for_value(intArray30, 0);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray52 = huffmanTree39.expand_array(intArray48, (int) (short) 1);
        int[] intArray53 = null;
        int[] intArray55 = huffmanTree39.expand_array(intArray53, (int) (short) 1);
        java.lang.Class<?> wildcardClass56 = huffmanTree39.getClass();
        HuffmanTree huffmanTree57 = new HuffmanTree();
        java.lang.Class<?> wildcardClass58 = huffmanTree57.getClass();
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray69 = new int[] { '4', '#', 0, 4 };
        int[] intArray71 = huffmanTree59.expand_array(intArray69, 0);
        java.lang.Class<?> wildcardClass72 = intArray71.getClass();
        int[] intArray74 = huffmanTree57.expand_array(intArray71, 1);
        java.lang.Class<?> wildcardClass75 = intArray74.getClass();
        int int77 = huffmanTree39.search_for_value(intArray74, 0);
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        HuffmanTree huffmanTree84 = new HuffmanTree();
        int[] intArray87 = new int[] { '4', (byte) 10 };
        int[] intArray89 = huffmanTree84.expand_array(intArray87, (-1));
        int[] intArray91 = huffmanTree78.expand_array(intArray87, (int) (short) 1);
        int[] intArray92 = huffmanTree33.create_huffman_tree(intArray74, intArray87);
        int[] intArray94 = huffmanTree19.expand_array(intArray87, (-1));
        try {
            int int96 = huffmanTree0.search_for_value(intArray94, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNull(intArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        java.lang.Class<?> wildcardClass15 = huffmanTree14.getClass();
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        java.lang.Class<?> wildcardClass22 = huffmanTree16.getClass();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray34 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int36 = huffmanTree23.search_for_value(intArray34, 0);
        int int38 = huffmanTree16.search_for_value(intArray34, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray52 = huffmanTree39.expand_array(intArray48, (int) (short) 1);
        int[] intArray54 = new int[] { 4 };
        int int56 = huffmanTree39.search_for_value(intArray54, 4);
        int[] intArray57 = huffmanTree14.create_huffman_tree(intArray34, intArray54);
        int[] intArray59 = huffmanTree0.expand_array(intArray54, (int) (short) 1);
        int[] intArray60 = null;
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray72 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int74 = huffmanTree61.search_for_value(intArray72, 0);
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        int[] intArray86 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int88 = huffmanTree75.search_for_value(intArray86, 0);
        HuffmanTree huffmanTree89 = new HuffmanTree();
        int[] intArray92 = new int[] { '4', (byte) 10 };
        int[] intArray94 = huffmanTree89.expand_array(intArray92, (-1));
        int[] intArray95 = huffmanTree61.create_huffman_tree(intArray86, intArray92);
        java.lang.Class<?> wildcardClass96 = intArray92.getClass();
        java.lang.Class<?> wildcardClass97 = intArray92.getClass();
        java.lang.Class<?> wildcardClass98 = intArray92.getClass();
        try {
            int[] intArray99 = huffmanTree0.create_huffman_tree(intArray60, intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertNotNull(wildcardClass97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass21 = intArray18.getClass();
        int int23 = huffmanTree0.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass24 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass25 = huffmanTree0.getClass();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int[] intArray37 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int39 = huffmanTree26.search_for_value(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray51 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int53 = huffmanTree40.search_for_value(intArray51, 0);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray60 = huffmanTree26.create_huffman_tree(intArray51, intArray57);
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray72 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int74 = huffmanTree61.search_for_value(intArray72, 0);
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        int[] intArray85 = new int[] { '4', '#', 0, 4 };
        int[] intArray87 = huffmanTree75.expand_array(intArray85, 0);
        HuffmanTree huffmanTree88 = new HuffmanTree();
        int[] intArray91 = new int[] { '4', (byte) 10 };
        int[] intArray93 = huffmanTree88.expand_array(intArray91, (-1));
        int[] intArray94 = huffmanTree61.create_huffman_tree(intArray85, intArray93);
        int[] intArray96 = huffmanTree26.expand_array(intArray94, (-1));
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        try {
            int[] intArray99 = huffmanTree0.expand_array(intArray96, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        int[] intArray43 = new int[] { '4', '#', 0, 4 };
        int[] intArray45 = huffmanTree33.expand_array(intArray43, 0);
        int[] intArray46 = huffmanTree19.create_huffman_tree(intArray30, intArray45);
        int int48 = huffmanTree0.search_for_value(intArray30, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        java.lang.Class<?> wildcardClass55 = huffmanTree49.getClass();
        HuffmanTree huffmanTree56 = new HuffmanTree();
        int[] intArray59 = new int[] { '4', (byte) 10 };
        int[] intArray61 = huffmanTree56.expand_array(intArray59, (-1));
        int[] intArray67 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int69 = huffmanTree56.search_for_value(intArray67, 0);
        java.lang.Class<?> wildcardClass70 = intArray67.getClass();
        int int72 = huffmanTree49.search_for_value(intArray67, 0);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        HuffmanTree huffmanTree79 = new HuffmanTree();
        int[] intArray82 = new int[] { '4', (byte) 10 };
        int[] intArray84 = huffmanTree79.expand_array(intArray82, (-1));
        int[] intArray86 = huffmanTree73.expand_array(intArray82, (int) (short) 1);
        int[] intArray88 = new int[] { 4 };
        int int90 = huffmanTree73.search_for_value(intArray88, 4);
        java.lang.Class<?> wildcardClass91 = intArray88.getClass();
        int[] intArray93 = huffmanTree49.expand_array(intArray88, 0);
        java.lang.Class<?> wildcardClass94 = intArray88.getClass();
        java.lang.Class<?> wildcardClass95 = intArray88.getClass();
        try {
            int int97 = huffmanTree0.search_for_value(intArray88, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        java.lang.Class<?> wildcardClass15 = huffmanTree14.getClass();
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        java.lang.Class<?> wildcardClass22 = huffmanTree16.getClass();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray34 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int36 = huffmanTree23.search_for_value(intArray34, 0);
        int int38 = huffmanTree16.search_for_value(intArray34, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray52 = huffmanTree39.expand_array(intArray48, (int) (short) 1);
        int[] intArray54 = new int[] { 4 };
        int int56 = huffmanTree39.search_for_value(intArray54, 4);
        int[] intArray57 = huffmanTree14.create_huffman_tree(intArray34, intArray54);
        int[] intArray59 = huffmanTree0.expand_array(intArray54, (int) (short) 1);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int int68 = huffmanTree60.search_for_value(intArray66, (int) (short) 10);
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        int[] intArray79 = new int[] { '4', '#', 0, 4 };
        int[] intArray81 = huffmanTree69.expand_array(intArray79, 0);
        HuffmanTree huffmanTree82 = new HuffmanTree();
        HuffmanTree huffmanTree83 = new HuffmanTree();
        int[] intArray86 = new int[] { '4', (byte) 10 };
        int[] intArray88 = huffmanTree83.expand_array(intArray86, (-1));
        int int90 = huffmanTree82.search_for_value(intArray88, (int) (short) 10);
        java.lang.Class<?> wildcardClass91 = intArray88.getClass();
        int[] intArray92 = huffmanTree60.create_huffman_tree(intArray79, intArray88);
        java.lang.Class<?> wildcardClass93 = intArray79.getClass();
        int[] intArray95 = huffmanTree0.expand_array(intArray79, (int) (short) 0);
        java.lang.Class<?> wildcardClass96 = intArray79.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray33 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        java.lang.Class<?> wildcardClass35 = huffmanTree34.getClass();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int int43 = huffmanTree34.search_for_value(intArray39, (int) (byte) 10);
        java.lang.Class<?> wildcardClass44 = intArray39.getClass();
        java.lang.Class<?> wildcardClass45 = intArray39.getClass();
        int[] intArray47 = huffmanTree0.expand_array(intArray39, 1);
        HuffmanTree huffmanTree48 = new HuffmanTree();
        java.lang.Class<?> wildcardClass49 = huffmanTree48.getClass();
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray61 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int63 = huffmanTree50.search_for_value(intArray61, 0);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int[] intArray75 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int77 = huffmanTree64.search_for_value(intArray75, 0);
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        int[] intArray84 = huffmanTree50.create_huffman_tree(intArray75, intArray81);
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        int[] intArray87 = huffmanTree48.expand_array(intArray84, (int) (short) -1);
        try {
            int int89 = huffmanTree0.search_for_value(intArray84, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(intArray87);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        java.lang.Class<?> wildcardClass15 = huffmanTree14.getClass();
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        java.lang.Class<?> wildcardClass22 = huffmanTree16.getClass();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray34 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int36 = huffmanTree23.search_for_value(intArray34, 0);
        int int38 = huffmanTree16.search_for_value(intArray34, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray52 = huffmanTree39.expand_array(intArray48, (int) (short) 1);
        int[] intArray54 = new int[] { 4 };
        int int56 = huffmanTree39.search_for_value(intArray54, 4);
        int[] intArray57 = huffmanTree14.create_huffman_tree(intArray34, intArray54);
        int[] intArray59 = huffmanTree0.expand_array(intArray54, (int) (short) 1);
        int[] intArray60 = null;
        try {
            int[] intArray62 = huffmanTree0.expand_array(intArray60, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass7 = huffmanTree0.getClass();
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray21 = huffmanTree8.expand_array(intArray17, (int) (short) 1);
        int[] intArray23 = new int[] { 4 };
        int int25 = huffmanTree8.search_for_value(intArray23, 4);
        int[] intArray27 = huffmanTree0.expand_array(intArray23, (int) (byte) -1);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        java.lang.Class<?> wildcardClass34 = intArray33.getClass();
        try {
            int int36 = huffmanTree0.search_for_value(intArray33, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int int27 = huffmanTree19.search_for_value(intArray25, (int) (short) 10);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray38 = new int[] { '4', '#', 0, 4 };
        int[] intArray40 = huffmanTree28.expand_array(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int int49 = huffmanTree41.search_for_value(intArray47, (int) (short) 10);
        java.lang.Class<?> wildcardClass50 = intArray47.getClass();
        int[] intArray51 = huffmanTree19.create_huffman_tree(intArray38, intArray47);
        int[] intArray53 = huffmanTree18.expand_array(intArray38, 0);
        int[] intArray55 = huffmanTree0.expand_array(intArray38, (int) (byte) -1);
        int[] intArray56 = null;
        try {
            int int58 = huffmanTree0.search_for_value(intArray56, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        java.lang.Class<?> wildcardClass10 = huffmanTree0.getClass();
        HuffmanTree huffmanTree11 = new HuffmanTree();
        int[] intArray14 = new int[] { '4', (byte) 10 };
        int[] intArray16 = huffmanTree11.expand_array(intArray14, (-1));
        try {
            int int18 = huffmanTree0.search_for_value(intArray14, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray16);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        java.lang.Class<?> wildcardClass3 = huffmanTree2.getClass();
        HuffmanTree huffmanTree4 = new HuffmanTree();
        int[] intArray7 = new int[] { '4', (byte) 10 };
        int[] intArray9 = huffmanTree4.expand_array(intArray7, (-1));
        int int11 = huffmanTree2.search_for_value(intArray7, (int) (byte) 10);
        HuffmanTree huffmanTree12 = new HuffmanTree();
        int[] intArray15 = new int[] { '4', (byte) 10 };
        int[] intArray17 = huffmanTree12.expand_array(intArray15, (-1));
        int[] intArray22 = new int[] { '4', '#', 0, 4 };
        int[] intArray24 = huffmanTree12.expand_array(intArray22, 0);
        java.lang.Class<?> wildcardClass25 = intArray24.getClass();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int[] intArray37 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int39 = huffmanTree26.search_for_value(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray51 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int53 = huffmanTree40.search_for_value(intArray51, 0);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray60 = huffmanTree26.create_huffman_tree(intArray51, intArray57);
        java.lang.Class<?> wildcardClass61 = huffmanTree26.getClass();
        java.lang.Class<?> wildcardClass62 = huffmanTree26.getClass();
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        int[] intArray76 = huffmanTree63.expand_array(intArray72, (int) (short) 1);
        java.lang.Class<?> wildcardClass77 = intArray72.getClass();
        int[] intArray79 = huffmanTree26.expand_array(intArray72, (int) (short) 1);
        int[] intArray80 = huffmanTree2.create_huffman_tree(intArray24, intArray72);
        int[] intArray82 = huffmanTree0.expand_array(intArray80, 0);
        java.lang.Class<?> wildcardClass83 = huffmanTree0.getClass();
        HuffmanTree huffmanTree84 = new HuffmanTree();
        java.lang.Class<?> wildcardClass85 = huffmanTree84.getClass();
        HuffmanTree huffmanTree86 = new HuffmanTree();
        int[] intArray89 = new int[] { '4', (byte) 10 };
        int[] intArray91 = huffmanTree86.expand_array(intArray89, (-1));
        int int93 = huffmanTree84.search_for_value(intArray89, (int) (byte) 10);
        java.lang.Class<?> wildcardClass94 = intArray89.getClass();
        java.lang.Class<?> wildcardClass95 = intArray89.getClass();
        try {
            int int97 = huffmanTree0.search_for_value(intArray89, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int int26 = huffmanTree18.search_for_value(intArray24, (int) (short) 10);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray37 = new int[] { '4', '#', 0, 4 };
        int[] intArray39 = huffmanTree27.expand_array(intArray37, 0);
        HuffmanTree huffmanTree40 = new HuffmanTree();
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int int48 = huffmanTree40.search_for_value(intArray46, (int) (short) 10);
        java.lang.Class<?> wildcardClass49 = intArray46.getClass();
        int[] intArray50 = huffmanTree18.create_huffman_tree(intArray37, intArray46);
        HuffmanTree huffmanTree51 = new HuffmanTree();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int int59 = huffmanTree51.search_for_value(intArray57, (int) (short) 10);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray71 = new int[] { '4', '#', 0, 4 };
        int[] intArray73 = huffmanTree61.expand_array(intArray71, 0);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray84 = new int[] { '4', '#', 0, 4 };
        int[] intArray86 = huffmanTree74.expand_array(intArray84, 0);
        int[] intArray87 = huffmanTree60.create_huffman_tree(intArray71, intArray86);
        int[] intArray89 = huffmanTree51.expand_array(intArray87, (int) (short) 1);
        int[] intArray91 = huffmanTree18.expand_array(intArray87, (-1));
        java.lang.Class<?> wildcardClass92 = intArray87.getClass();
        java.lang.Class<?> wildcardClass93 = intArray87.getClass();
        java.lang.Class<?> wildcardClass94 = intArray87.getClass();
        try {
            int int96 = huffmanTree0.search_for_value(intArray87, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        java.lang.Class<?> wildcardClass38 = huffmanTree37.getClass();
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int int46 = huffmanTree37.search_for_value(intArray42, (int) (byte) 10);
        HuffmanTree huffmanTree47 = new HuffmanTree();
        java.lang.Class<?> wildcardClass48 = huffmanTree47.getClass();
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        java.lang.Class<?> wildcardClass55 = huffmanTree49.getClass();
        HuffmanTree huffmanTree56 = new HuffmanTree();
        int[] intArray59 = new int[] { '4', (byte) 10 };
        int[] intArray61 = huffmanTree56.expand_array(intArray59, (-1));
        int[] intArray67 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int69 = huffmanTree56.search_for_value(intArray67, 0);
        int int71 = huffmanTree49.search_for_value(intArray67, 0);
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        int[] intArray85 = huffmanTree72.expand_array(intArray81, (int) (short) 1);
        int[] intArray87 = new int[] { 4 };
        int int89 = huffmanTree72.search_for_value(intArray87, 4);
        int[] intArray90 = huffmanTree47.create_huffman_tree(intArray67, intArray87);
        int int92 = huffmanTree37.search_for_value(intArray67, (int) (byte) 100);
        int[] intArray94 = huffmanTree0.expand_array(intArray67, (int) (short) 1);
        java.lang.Class<?> wildcardClass95 = intArray67.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        int[] intArray43 = new int[] { '4', '#', 0, 4 };
        int[] intArray45 = huffmanTree33.expand_array(intArray43, 0);
        int[] intArray46 = huffmanTree19.create_huffman_tree(intArray30, intArray45);
        int int48 = huffmanTree0.search_for_value(intArray30, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        HuffmanTree huffmanTree55 = new HuffmanTree();
        int[] intArray58 = new int[] { '4', (byte) 10 };
        int[] intArray60 = huffmanTree55.expand_array(intArray58, (-1));
        int[] intArray62 = huffmanTree49.expand_array(intArray58, (int) (short) 1);
        java.lang.Class<?> wildcardClass63 = intArray62.getClass();
        java.lang.Class<?> wildcardClass64 = intArray62.getClass();
        java.lang.Class<?> wildcardClass65 = intArray62.getClass();
        try {
            int int67 = huffmanTree0.search_for_value(intArray62, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        java.lang.Class<?> wildcardClass43 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass44 = huffmanTree0.getClass();
        HuffmanTree huffmanTree45 = new HuffmanTree();
        java.lang.Class<?> wildcardClass46 = huffmanTree45.getClass();
        HuffmanTree huffmanTree47 = new HuffmanTree();
        int[] intArray50 = new int[] { '4', (byte) 10 };
        int[] intArray52 = huffmanTree47.expand_array(intArray50, (-1));
        java.lang.Class<?> wildcardClass53 = huffmanTree47.getClass();
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray65 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int67 = huffmanTree54.search_for_value(intArray65, 0);
        int int69 = huffmanTree47.search_for_value(intArray65, 0);
        HuffmanTree huffmanTree70 = new HuffmanTree();
        int[] intArray73 = new int[] { '4', (byte) 10 };
        int[] intArray75 = huffmanTree70.expand_array(intArray73, (-1));
        HuffmanTree huffmanTree76 = new HuffmanTree();
        int[] intArray79 = new int[] { '4', (byte) 10 };
        int[] intArray81 = huffmanTree76.expand_array(intArray79, (-1));
        int[] intArray83 = huffmanTree70.expand_array(intArray79, (int) (short) 1);
        int[] intArray85 = new int[] { 4 };
        int int87 = huffmanTree70.search_for_value(intArray85, 4);
        int[] intArray88 = huffmanTree45.create_huffman_tree(intArray65, intArray85);
        java.lang.Class<?> wildcardClass89 = intArray85.getClass();
        java.lang.Class<?> wildcardClass90 = intArray85.getClass();
        int[] intArray92 = huffmanTree0.expand_array(intArray85, (int) (short) -1);
        java.lang.Class<?> wildcardClass93 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass94 = huffmanTree0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray45 = new int[] { '4', '#', 0, 4 };
        int[] intArray47 = huffmanTree35.expand_array(intArray45, 0);
        java.lang.Class<?> wildcardClass48 = intArray47.getClass();
        int[] intArray50 = huffmanTree0.expand_array(intArray47, (int) (byte) -1);
        java.lang.Class<?> wildcardClass51 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass52 = huffmanTree0.getClass();
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray66 = huffmanTree53.expand_array(intArray62, (int) (short) 1);
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray77 = new int[] { '4', '#', 0, 4 };
        int[] intArray79 = huffmanTree67.expand_array(intArray77, 0);
        HuffmanTree huffmanTree80 = new HuffmanTree();
        java.lang.Class<?> wildcardClass81 = huffmanTree80.getClass();
        HuffmanTree huffmanTree82 = new HuffmanTree();
        int[] intArray85 = new int[] { '4', (byte) 10 };
        int[] intArray87 = huffmanTree82.expand_array(intArray85, (-1));
        int int89 = huffmanTree80.search_for_value(intArray85, (int) (byte) 10);
        int[] intArray90 = huffmanTree53.create_huffman_tree(intArray77, intArray85);
        try {
            int int92 = huffmanTree0.search_for_value(intArray90, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(intArray90);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        HuffmanTree huffmanTree31 = new HuffmanTree();
        int[] intArray34 = new int[] { '4', (byte) 10 };
        int[] intArray36 = huffmanTree31.expand_array(intArray34, (-1));
        int[] intArray38 = huffmanTree25.expand_array(intArray34, (int) (short) 1);
        int[] intArray39 = null;
        int[] intArray41 = huffmanTree25.expand_array(intArray39, (int) (short) 1);
        java.lang.Class<?> wildcardClass42 = huffmanTree25.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        java.lang.Class<?> wildcardClass44 = huffmanTree43.getClass();
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray55 = new int[] { '4', '#', 0, 4 };
        int[] intArray57 = huffmanTree45.expand_array(intArray55, 0);
        java.lang.Class<?> wildcardClass58 = intArray57.getClass();
        int[] intArray60 = huffmanTree43.expand_array(intArray57, 1);
        java.lang.Class<?> wildcardClass61 = intArray60.getClass();
        int int63 = huffmanTree25.search_for_value(intArray60, 0);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        HuffmanTree huffmanTree70 = new HuffmanTree();
        int[] intArray73 = new int[] { '4', (byte) 10 };
        int[] intArray75 = huffmanTree70.expand_array(intArray73, (-1));
        int[] intArray77 = huffmanTree64.expand_array(intArray73, (int) (short) 1);
        int[] intArray78 = huffmanTree19.create_huffman_tree(intArray60, intArray73);
        java.lang.Class<?> wildcardClass79 = intArray60.getClass();
        int[] intArray81 = huffmanTree0.expand_array(intArray60, (int) (byte) -1);
        java.lang.Class<?> wildcardClass82 = huffmanTree0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNull(intArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        java.lang.Class<?> wildcardClass34 = huffmanTree33.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int int42 = huffmanTree33.search_for_value(intArray38, (int) (byte) 10);
        int int44 = huffmanTree0.search_for_value(intArray38, (int) (short) 10);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray56 = new int[] { '4', '#', 0, 4 };
        int[] intArray58 = huffmanTree46.expand_array(intArray56, 0);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray69 = new int[] { '4', '#', 0, 4 };
        int[] intArray71 = huffmanTree59.expand_array(intArray69, 0);
        int[] intArray72 = huffmanTree45.create_huffman_tree(intArray56, intArray71);
        int int74 = huffmanTree0.search_for_value(intArray56, 4);
        java.lang.Class<?> wildcardClass75 = huffmanTree0.getClass();
        HuffmanTree huffmanTree76 = new HuffmanTree();
        java.lang.Class<?> wildcardClass77 = huffmanTree76.getClass();
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        int[] intArray88 = new int[] { '4', '#', 0, 4 };
        int[] intArray90 = huffmanTree78.expand_array(intArray88, 0);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        int[] intArray93 = huffmanTree76.expand_array(intArray90, 1);
        java.lang.Class<?> wildcardClass94 = intArray93.getClass();
        java.lang.Class<?> wildcardClass95 = intArray93.getClass();
        java.lang.Class<?> wildcardClass96 = intArray93.getClass();
        try {
            int int98 = huffmanTree0.search_for_value(intArray93, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray45 = new int[] { '4', '#', 0, 4 };
        int[] intArray47 = huffmanTree35.expand_array(intArray45, 0);
        java.lang.Class<?> wildcardClass48 = intArray47.getClass();
        int[] intArray50 = huffmanTree0.expand_array(intArray47, (int) (byte) -1);
        java.lang.Class<?> wildcardClass51 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass52 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass53 = huffmanTree0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int[] intArray12 = new int[] { '4', '#', 0, 4 };
        int[] intArray14 = huffmanTree2.expand_array(intArray12, 0);
        java.lang.Class<?> wildcardClass15 = intArray14.getClass();
        int[] intArray17 = huffmanTree0.expand_array(intArray14, 1);
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass19 = huffmanTree0.getClass();
        int[] intArray20 = null;
        int[] intArray22 = huffmanTree0.expand_array(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray40 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int42 = huffmanTree29.search_for_value(intArray40, 0);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray54 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int56 = huffmanTree43.search_for_value(intArray54, 0);
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int[] intArray63 = huffmanTree29.create_huffman_tree(intArray54, intArray60);
        int[] intArray65 = huffmanTree23.expand_array(intArray54, (int) (byte) 1);
        java.lang.Class<?> wildcardClass66 = huffmanTree23.getClass();
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray80 = huffmanTree67.expand_array(intArray76, (int) (short) 1);
        int[] intArray82 = new int[] { 4 };
        int int84 = huffmanTree67.search_for_value(intArray82, 4);
        int[] intArray86 = huffmanTree23.expand_array(intArray82, (int) (byte) 1);
        int[] intArray88 = huffmanTree0.expand_array(intArray82, (int) (short) 1);
        java.lang.Class<?> wildcardClass89 = intArray82.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNull(intArray22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        int[] intArray20 = new int[] { '4', '#', 0, 4 };
        int[] intArray22 = huffmanTree10.expand_array(intArray20, 0);
        java.lang.Class<?> wildcardClass23 = intArray22.getClass();
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int[] intArray35 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int37 = huffmanTree24.search_for_value(intArray35, 0);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        int[] intArray49 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int51 = huffmanTree38.search_for_value(intArray49, 0);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray58 = huffmanTree24.create_huffman_tree(intArray49, intArray55);
        java.lang.Class<?> wildcardClass59 = huffmanTree24.getClass();
        java.lang.Class<?> wildcardClass60 = huffmanTree24.getClass();
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray74 = huffmanTree61.expand_array(intArray70, (int) (short) 1);
        java.lang.Class<?> wildcardClass75 = intArray70.getClass();
        int[] intArray77 = huffmanTree24.expand_array(intArray70, (int) (short) 1);
        int[] intArray78 = huffmanTree0.create_huffman_tree(intArray22, intArray70);
        int[] intArray79 = null;
        try {
            int[] intArray81 = huffmanTree0.expand_array(intArray79, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray46 = huffmanTree33.expand_array(intArray42, (int) (short) 1);
        int[] intArray47 = null;
        int[] intArray49 = huffmanTree33.expand_array(intArray47, (int) (short) 1);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        java.lang.Class<?> wildcardClass51 = huffmanTree50.getClass();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        java.lang.Class<?> wildcardClass58 = huffmanTree52.getClass();
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray70 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int72 = huffmanTree59.search_for_value(intArray70, 0);
        int int74 = huffmanTree52.search_for_value(intArray70, 0);
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        HuffmanTree huffmanTree81 = new HuffmanTree();
        int[] intArray84 = new int[] { '4', (byte) 10 };
        int[] intArray86 = huffmanTree81.expand_array(intArray84, (-1));
        int[] intArray88 = huffmanTree75.expand_array(intArray84, (int) (short) 1);
        int[] intArray90 = new int[] { 4 };
        int int92 = huffmanTree75.search_for_value(intArray90, 4);
        int[] intArray93 = huffmanTree50.create_huffman_tree(intArray70, intArray90);
        java.lang.Class<?> wildcardClass94 = intArray90.getClass();
        java.lang.Class<?> wildcardClass95 = intArray90.getClass();
        int[] intArray97 = huffmanTree33.expand_array(intArray90, 0);
        try {
            int int99 = huffmanTree0.search_for_value(intArray97, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNull(intArray49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNotNull(intArray97);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        java.lang.Class<?> wildcardClass15 = huffmanTree14.getClass();
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        java.lang.Class<?> wildcardClass22 = huffmanTree16.getClass();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray34 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int36 = huffmanTree23.search_for_value(intArray34, 0);
        int int38 = huffmanTree16.search_for_value(intArray34, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray52 = huffmanTree39.expand_array(intArray48, (int) (short) 1);
        int[] intArray54 = new int[] { 4 };
        int int56 = huffmanTree39.search_for_value(intArray54, 4);
        int[] intArray57 = huffmanTree14.create_huffman_tree(intArray34, intArray54);
        int[] intArray59 = huffmanTree0.expand_array(intArray54, (int) (short) 1);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray71 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int73 = huffmanTree60.search_for_value(intArray71, 0);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray85 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int87 = huffmanTree74.search_for_value(intArray85, 0);
        HuffmanTree huffmanTree88 = new HuffmanTree();
        int[] intArray91 = new int[] { '4', (byte) 10 };
        int[] intArray93 = huffmanTree88.expand_array(intArray91, (-1));
        int[] intArray94 = huffmanTree60.create_huffman_tree(intArray85, intArray91);
        int[] intArray96 = huffmanTree0.expand_array(intArray94, (int) (short) 1);
        java.lang.Class<?> wildcardClass97 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        int int38 = huffmanTree0.search_for_value(intArray32, (int) (short) 10);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        java.lang.Class<?> wildcardClass46 = huffmanTree40.getClass();
        HuffmanTree huffmanTree47 = new HuffmanTree();
        int[] intArray50 = new int[] { '4', (byte) 10 };
        int[] intArray52 = huffmanTree47.expand_array(intArray50, (-1));
        int[] intArray58 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int60 = huffmanTree47.search_for_value(intArray58, 0);
        int int62 = huffmanTree40.search_for_value(intArray58, 0);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        java.lang.Class<?> wildcardClass69 = huffmanTree63.getClass();
        HuffmanTree huffmanTree70 = new HuffmanTree();
        int[] intArray73 = new int[] { '4', (byte) 10 };
        int[] intArray75 = huffmanTree70.expand_array(intArray73, (-1));
        int[] intArray81 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int83 = huffmanTree70.search_for_value(intArray81, 0);
        java.lang.Class<?> wildcardClass84 = intArray81.getClass();
        int int86 = huffmanTree63.search_for_value(intArray81, 0);
        int[] intArray88 = huffmanTree40.expand_array(intArray81, (-1));
        try {
            int[] intArray90 = huffmanTree0.expand_array(intArray88, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4 + "'", int83 == 4);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
        org.junit.Assert.assertNotNull(intArray88);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        int[] intArray23 = huffmanTree10.expand_array(intArray19, (int) (short) 1);
        int[] intArray24 = null;
        int[] intArray26 = huffmanTree10.expand_array(intArray24, (int) (short) 1);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        java.lang.Class<?> wildcardClass35 = huffmanTree29.getClass();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray47 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int49 = huffmanTree36.search_for_value(intArray47, 0);
        int int51 = huffmanTree29.search_for_value(intArray47, 0);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int[] intArray65 = huffmanTree52.expand_array(intArray61, (int) (short) 1);
        int[] intArray67 = new int[] { 4 };
        int int69 = huffmanTree52.search_for_value(intArray67, 4);
        int[] intArray70 = huffmanTree27.create_huffman_tree(intArray47, intArray67);
        java.lang.Class<?> wildcardClass71 = intArray67.getClass();
        java.lang.Class<?> wildcardClass72 = intArray67.getClass();
        int[] intArray74 = huffmanTree10.expand_array(intArray67, 0);
        int[] intArray76 = huffmanTree0.expand_array(intArray67, (int) (short) 1);
        HuffmanTree huffmanTree77 = new HuffmanTree();
        int[] intArray80 = new int[] { '4', (byte) 10 };
        int[] intArray82 = huffmanTree77.expand_array(intArray80, (-1));
        int[] intArray88 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int90 = huffmanTree77.search_for_value(intArray88, 0);
        java.lang.Class<?> wildcardClass91 = intArray88.getClass();
        java.lang.Class<?> wildcardClass92 = intArray88.getClass();
        int int94 = huffmanTree0.search_for_value(intArray88, (int) (byte) 10);
        int[] intArray95 = null;
        try {
            int[] intArray97 = huffmanTree0.expand_array(intArray95, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 4 + "'", int90 == 4);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 3 + "'", int94 == 3);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray15 = new int[] { 4 };
        int int17 = huffmanTree0.search_for_value(intArray15, 4);
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        java.lang.Class<?> wildcardClass24 = huffmanTree18.getClass();
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        int[] intArray36 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int38 = huffmanTree25.search_for_value(intArray36, 0);
        int int40 = huffmanTree18.search_for_value(intArray36, 0);
        java.lang.Class<?> wildcardClass41 = huffmanTree18.getClass();
        java.lang.Class<?> wildcardClass42 = huffmanTree18.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int int51 = huffmanTree43.search_for_value(intArray49, (int) (short) 10);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray62 = new int[] { '4', '#', 0, 4 };
        int[] intArray64 = huffmanTree52.expand_array(intArray62, 0);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int int73 = huffmanTree65.search_for_value(intArray71, (int) (short) 10);
        java.lang.Class<?> wildcardClass74 = intArray71.getClass();
        int[] intArray75 = huffmanTree43.create_huffman_tree(intArray62, intArray71);
        java.lang.Class<?> wildcardClass76 = intArray71.getClass();
        java.lang.Class<?> wildcardClass77 = intArray71.getClass();
        int int79 = huffmanTree18.search_for_value(intArray71, (int) (byte) 10);
        java.lang.Class<?> wildcardClass80 = intArray71.getClass();
        int int82 = huffmanTree0.search_for_value(intArray71, (int) (byte) 10);
        java.lang.Class<?> wildcardClass83 = intArray71.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int[] intArray12 = new int[] { '4', '#', 0, 4 };
        int[] intArray14 = huffmanTree2.expand_array(intArray12, 0);
        java.lang.Class<?> wildcardClass15 = intArray14.getClass();
        int[] intArray17 = huffmanTree0.expand_array(intArray14, 1);
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        java.lang.Class<?> wildcardClass24 = huffmanTree18.getClass();
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        int[] intArray36 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int38 = huffmanTree25.search_for_value(intArray36, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray49 = new int[] { '4', '#', 0, 4 };
        int[] intArray51 = huffmanTree39.expand_array(intArray49, 0);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray58 = huffmanTree25.create_huffman_tree(intArray49, intArray57);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int int67 = huffmanTree59.search_for_value(intArray65, (int) (short) 10);
        HuffmanTree huffmanTree68 = new HuffmanTree();
        int[] intArray71 = new int[] { '4', (byte) 10 };
        int[] intArray73 = huffmanTree68.expand_array(intArray71, (-1));
        int[] intArray78 = new int[] { '4', '#', 0, 4 };
        int[] intArray80 = huffmanTree68.expand_array(intArray78, 0);
        HuffmanTree huffmanTree81 = new HuffmanTree();
        HuffmanTree huffmanTree82 = new HuffmanTree();
        int[] intArray85 = new int[] { '4', (byte) 10 };
        int[] intArray87 = huffmanTree82.expand_array(intArray85, (-1));
        int int89 = huffmanTree81.search_for_value(intArray87, (int) (short) 10);
        java.lang.Class<?> wildcardClass90 = intArray87.getClass();
        int[] intArray91 = huffmanTree59.create_huffman_tree(intArray78, intArray87);
        int int93 = huffmanTree25.search_for_value(intArray91, 10);
        int int95 = huffmanTree18.search_for_value(intArray91, (int) (short) 10);
        java.lang.Class<?> wildcardClass96 = intArray91.getClass();
        java.lang.Class<?> wildcardClass97 = intArray91.getClass();
        try {
            int int99 = huffmanTree0.search_for_value(intArray91, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass21 = intArray18.getClass();
        int int23 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        java.lang.Class<?> wildcardClass30 = huffmanTree24.getClass();
        HuffmanTree huffmanTree31 = new HuffmanTree();
        int[] intArray34 = new int[] { '4', (byte) 10 };
        int[] intArray36 = huffmanTree31.expand_array(intArray34, (-1));
        int[] intArray42 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int44 = huffmanTree31.search_for_value(intArray42, 0);
        java.lang.Class<?> wildcardClass45 = intArray42.getClass();
        int int47 = huffmanTree24.search_for_value(intArray42, 0);
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray61 = huffmanTree48.expand_array(intArray57, (int) (short) 1);
        int[] intArray63 = new int[] { 4 };
        int int65 = huffmanTree48.search_for_value(intArray63, 4);
        java.lang.Class<?> wildcardClass66 = intArray63.getClass();
        int[] intArray68 = huffmanTree24.expand_array(intArray63, 0);
        java.lang.Class<?> wildcardClass69 = intArray63.getClass();
        java.lang.Class<?> wildcardClass70 = intArray63.getClass();
        java.lang.Class<?> wildcardClass71 = intArray63.getClass();
        try {
            int[] intArray73 = huffmanTree0.expand_array(intArray63, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray33 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int int42 = huffmanTree34.search_for_value(intArray40, (int) (short) 10);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray53 = new int[] { '4', '#', 0, 4 };
        int[] intArray55 = huffmanTree43.expand_array(intArray53, 0);
        HuffmanTree huffmanTree56 = new HuffmanTree();
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int int64 = huffmanTree56.search_for_value(intArray62, (int) (short) 10);
        java.lang.Class<?> wildcardClass65 = intArray62.getClass();
        int[] intArray66 = huffmanTree34.create_huffman_tree(intArray53, intArray62);
        int int68 = huffmanTree0.search_for_value(intArray66, 10);
        java.lang.Class<?> wildcardClass69 = intArray66.getClass();
        java.lang.Class<?> wildcardClass70 = intArray66.getClass();
        java.lang.Class<?> wildcardClass71 = intArray66.getClass();
        java.lang.Class<?> wildcardClass72 = intArray66.getClass();
        java.lang.Class<?> wildcardClass73 = intArray66.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        int[] intArray31 = new int[] { '4', '#', 0, 4 };
        int[] intArray33 = huffmanTree21.expand_array(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree7.create_huffman_tree(intArray31, intArray39);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        java.lang.Class<?> wildcardClass42 = huffmanTree41.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        java.lang.Class<?> wildcardClass49 = huffmanTree43.getClass();
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray61 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int63 = huffmanTree50.search_for_value(intArray61, 0);
        int int65 = huffmanTree43.search_for_value(intArray61, 0);
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        int[] intArray79 = huffmanTree66.expand_array(intArray75, (int) (short) 1);
        int[] intArray81 = new int[] { 4 };
        int int83 = huffmanTree66.search_for_value(intArray81, 4);
        int[] intArray84 = huffmanTree41.create_huffman_tree(intArray61, intArray81);
        int[] intArray85 = huffmanTree0.create_huffman_tree(intArray31, intArray81);
        int[] intArray86 = null;
        int[] intArray88 = huffmanTree0.expand_array(intArray86, (int) (byte) 0);
        int[] intArray89 = null;
        int[] intArray91 = huffmanTree0.expand_array(intArray89, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNull(intArray88);
        org.junit.Assert.assertNull(intArray91);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass23 = huffmanTree0.getClass();
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        int[] intArray37 = huffmanTree24.expand_array(intArray33, (int) (short) 1);
        int[] intArray39 = new int[] { 4 };
        int int41 = huffmanTree24.search_for_value(intArray39, 4);
        java.lang.Class<?> wildcardClass42 = intArray39.getClass();
        int[] intArray44 = huffmanTree0.expand_array(intArray39, (int) (short) -1);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        java.lang.Class<?> wildcardClass51 = huffmanTree45.getClass();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray63 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int65 = huffmanTree52.search_for_value(intArray63, 0);
        java.lang.Class<?> wildcardClass66 = intArray63.getClass();
        int int68 = huffmanTree45.search_for_value(intArray63, 0);
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        int[] intArray82 = huffmanTree69.expand_array(intArray78, (int) (short) 1);
        int[] intArray84 = new int[] { 4 };
        int int86 = huffmanTree69.search_for_value(intArray84, 4);
        java.lang.Class<?> wildcardClass87 = intArray84.getClass();
        int[] intArray89 = huffmanTree45.expand_array(intArray84, 0);
        java.lang.Class<?> wildcardClass90 = intArray84.getClass();
        java.lang.Class<?> wildcardClass91 = intArray84.getClass();
        java.lang.Class<?> wildcardClass92 = intArray84.getClass();
        try {
            int int94 = huffmanTree0.search_for_value(intArray84, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int[] intArray12 = new int[] { '4', '#', 0, 4 };
        int[] intArray14 = huffmanTree2.expand_array(intArray12, 0);
        java.lang.Class<?> wildcardClass15 = intArray14.getClass();
        int[] intArray17 = huffmanTree0.expand_array(intArray14, 1);
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        int[] intArray36 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int38 = huffmanTree25.search_for_value(intArray36, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray50 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int52 = huffmanTree39.search_for_value(intArray50, 0);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray59 = huffmanTree25.create_huffman_tree(intArray50, intArray56);
        int[] intArray61 = huffmanTree19.expand_array(intArray50, (int) (byte) 1);
        java.lang.Class<?> wildcardClass62 = intArray61.getClass();
        HuffmanTree huffmanTree63 = new HuffmanTree();
        java.lang.Class<?> wildcardClass64 = huffmanTree63.getClass();
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int int72 = huffmanTree63.search_for_value(intArray68, (int) (byte) 10);
        int[] intArray73 = huffmanTree0.create_huffman_tree(intArray61, intArray68);
        java.lang.Class<?> wildcardClass74 = huffmanTree0.getClass();
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        int[] intArray86 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int88 = huffmanTree75.search_for_value(intArray86, 0);
        java.lang.Class<?> wildcardClass89 = intArray86.getClass();
        try {
            int int91 = huffmanTree0.search_for_value(intArray86, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        java.lang.Class<?> wildcardClass15 = huffmanTree14.getClass();
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        java.lang.Class<?> wildcardClass22 = huffmanTree16.getClass();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray34 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int36 = huffmanTree23.search_for_value(intArray34, 0);
        int int38 = huffmanTree16.search_for_value(intArray34, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray52 = huffmanTree39.expand_array(intArray48, (int) (short) 1);
        int[] intArray54 = new int[] { 4 };
        int int56 = huffmanTree39.search_for_value(intArray54, 4);
        int[] intArray57 = huffmanTree14.create_huffman_tree(intArray34, intArray54);
        int[] intArray59 = huffmanTree0.expand_array(intArray54, (int) (short) 1);
        java.lang.Class<?> wildcardClass60 = huffmanTree0.getClass();
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        java.lang.Class<?> wildcardClass67 = huffmanTree61.getClass();
        HuffmanTree huffmanTree68 = new HuffmanTree();
        int[] intArray71 = new int[] { '4', (byte) 10 };
        int[] intArray73 = huffmanTree68.expand_array(intArray71, (-1));
        int[] intArray79 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int81 = huffmanTree68.search_for_value(intArray79, 0);
        int int83 = huffmanTree61.search_for_value(intArray79, 0);
        try {
            int int85 = huffmanTree0.search_for_value(intArray79, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4 + "'", int83 == 4);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        java.lang.Class<?> wildcardClass19 = huffmanTree18.getClass();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        java.lang.Class<?> wildcardClass33 = intArray32.getClass();
        int[] intArray35 = huffmanTree18.expand_array(intArray32, 1);
        java.lang.Class<?> wildcardClass36 = intArray35.getClass();
        int int38 = huffmanTree0.search_for_value(intArray35, 0);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass40 = huffmanTree0.getClass();
        HuffmanTree huffmanTree41 = new HuffmanTree();
        java.lang.Class<?> wildcardClass42 = huffmanTree41.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int int50 = huffmanTree41.search_for_value(intArray46, (int) (byte) 10);
        java.lang.Class<?> wildcardClass51 = intArray46.getClass();
        java.lang.Class<?> wildcardClass52 = intArray46.getClass();
        java.lang.Class<?> wildcardClass53 = intArray46.getClass();
        try {
            int[] intArray55 = huffmanTree0.expand_array(intArray46, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int[] intArray12 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int14 = huffmanTree1.search_for_value(intArray12, 0);
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray26 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int28 = huffmanTree15.search_for_value(intArray26, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray35 = huffmanTree1.create_huffman_tree(intArray26, intArray32);
        java.lang.Class<?> wildcardClass36 = huffmanTree1.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        int int45 = huffmanTree37.search_for_value(intArray43, (int) (short) 10);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray57 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int59 = huffmanTree46.search_for_value(intArray57, 0);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray70 = new int[] { '4', '#', 0, 4 };
        int[] intArray72 = huffmanTree60.expand_array(intArray70, 0);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray79 = huffmanTree46.create_huffman_tree(intArray70, intArray78);
        int int81 = huffmanTree37.search_for_value(intArray79, (int) (short) 10);
        java.lang.Class<?> wildcardClass82 = intArray79.getClass();
        int int84 = huffmanTree1.search_for_value(intArray79, 10);
        try {
            int int86 = huffmanTree0.search_for_value(intArray79, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        int[] intArray9 = null;
        try {
            int[] intArray11 = huffmanTree0.expand_array(intArray9, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int int31 = huffmanTree23.search_for_value(intArray29, (int) (short) 10);
        HuffmanTree huffmanTree32 = new HuffmanTree();
        int[] intArray35 = new int[] { '4', (byte) 10 };
        int[] intArray37 = huffmanTree32.expand_array(intArray35, (-1));
        int[] intArray42 = new int[] { '4', '#', 0, 4 };
        int[] intArray44 = huffmanTree32.expand_array(intArray42, 0);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int int53 = huffmanTree45.search_for_value(intArray51, (int) (short) 10);
        java.lang.Class<?> wildcardClass54 = intArray51.getClass();
        int[] intArray55 = huffmanTree23.create_huffman_tree(intArray42, intArray51);
        java.lang.Class<?> wildcardClass56 = intArray51.getClass();
        try {
            int[] intArray58 = huffmanTree0.expand_array(intArray51, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        try {
            java.lang.Class<?> wildcardClass17 = intArray16.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray10 = new int[] { '4', '#', 0, 4 };
        int[] intArray12 = huffmanTree0.expand_array(intArray10, 0);
        HuffmanTree huffmanTree13 = new HuffmanTree();
        int[] intArray16 = new int[] { '4', (byte) 10 };
        int[] intArray18 = huffmanTree13.expand_array(intArray16, (-1));
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        int[] intArray30 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int32 = huffmanTree19.search_for_value(intArray30, 0);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray50 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int52 = huffmanTree39.search_for_value(intArray50, 0);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray64 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int66 = huffmanTree53.search_for_value(intArray64, 0);
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray73 = huffmanTree39.create_huffman_tree(intArray64, intArray70);
        int[] intArray75 = huffmanTree33.expand_array(intArray64, (int) (byte) 1);
        java.lang.Class<?> wildcardClass76 = intArray64.getClass();
        HuffmanTree huffmanTree77 = new HuffmanTree();
        int[] intArray80 = new int[] { '4', (byte) 10 };
        int[] intArray82 = huffmanTree77.expand_array(intArray80, (-1));
        int[] intArray88 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int90 = huffmanTree77.search_for_value(intArray88, 0);
        java.lang.Class<?> wildcardClass91 = intArray88.getClass();
        int[] intArray92 = huffmanTree19.create_huffman_tree(intArray64, intArray88);
        int[] intArray94 = huffmanTree13.expand_array(intArray88, 0);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        int int97 = huffmanTree0.search_for_value(intArray94, (int) (byte) 10);
        java.lang.Class<?> wildcardClass98 = intArray94.getClass();
        java.lang.Class<?> wildcardClass99 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 4 + "'", int90 == 4);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(wildcardClass98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        int[] intArray23 = huffmanTree10.expand_array(intArray19, (int) (short) 1);
        int[] intArray24 = null;
        int[] intArray26 = huffmanTree10.expand_array(intArray24, (int) (short) 1);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        java.lang.Class<?> wildcardClass35 = huffmanTree29.getClass();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray47 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int49 = huffmanTree36.search_for_value(intArray47, 0);
        int int51 = huffmanTree29.search_for_value(intArray47, 0);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int[] intArray65 = huffmanTree52.expand_array(intArray61, (int) (short) 1);
        int[] intArray67 = new int[] { 4 };
        int int69 = huffmanTree52.search_for_value(intArray67, 4);
        int[] intArray70 = huffmanTree27.create_huffman_tree(intArray47, intArray67);
        java.lang.Class<?> wildcardClass71 = intArray67.getClass();
        java.lang.Class<?> wildcardClass72 = intArray67.getClass();
        int[] intArray74 = huffmanTree10.expand_array(intArray67, 0);
        int[] intArray76 = huffmanTree0.expand_array(intArray67, (int) (short) 1);
        HuffmanTree huffmanTree77 = new HuffmanTree();
        int[] intArray80 = new int[] { '4', (byte) 10 };
        int[] intArray82 = huffmanTree77.expand_array(intArray80, (-1));
        int[] intArray88 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int90 = huffmanTree77.search_for_value(intArray88, 0);
        java.lang.Class<?> wildcardClass91 = intArray88.getClass();
        java.lang.Class<?> wildcardClass92 = intArray88.getClass();
        int int94 = huffmanTree0.search_for_value(intArray88, (int) (byte) 10);
        java.lang.Class<?> wildcardClass95 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass96 = huffmanTree0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 4 + "'", int90 == 4);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 3 + "'", int94 == 3);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray34 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int36 = huffmanTree23.search_for_value(intArray34, 0);
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        int[] intArray47 = new int[] { '4', '#', 0, 4 };
        int[] intArray49 = huffmanTree37.expand_array(intArray47, 0);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray56 = huffmanTree23.create_huffman_tree(intArray47, intArray55);
        HuffmanTree huffmanTree57 = new HuffmanTree();
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int int65 = huffmanTree57.search_for_value(intArray63, (int) (short) 10);
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int[] intArray76 = new int[] { '4', '#', 0, 4 };
        int[] intArray78 = huffmanTree66.expand_array(intArray76, 0);
        HuffmanTree huffmanTree79 = new HuffmanTree();
        HuffmanTree huffmanTree80 = new HuffmanTree();
        int[] intArray83 = new int[] { '4', (byte) 10 };
        int[] intArray85 = huffmanTree80.expand_array(intArray83, (-1));
        int int87 = huffmanTree79.search_for_value(intArray85, (int) (short) 10);
        java.lang.Class<?> wildcardClass88 = intArray85.getClass();
        int[] intArray89 = huffmanTree57.create_huffman_tree(intArray76, intArray85);
        int int91 = huffmanTree23.search_for_value(intArray89, 10);
        java.lang.Class<?> wildcardClass92 = intArray89.getClass();
        java.lang.Class<?> wildcardClass93 = intArray89.getClass();
        java.lang.Class<?> wildcardClass94 = intArray89.getClass();
        try {
            int[] intArray96 = huffmanTree0.expand_array(intArray89, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass21 = intArray18.getClass();
        int int23 = huffmanTree0.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass24 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass25 = huffmanTree0.getClass();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int int34 = huffmanTree26.search_for_value(intArray32, (int) (short) 10);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray45 = new int[] { '4', '#', 0, 4 };
        int[] intArray47 = huffmanTree35.expand_array(intArray45, 0);
        HuffmanTree huffmanTree48 = new HuffmanTree();
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int int56 = huffmanTree48.search_for_value(intArray54, (int) (short) 10);
        java.lang.Class<?> wildcardClass57 = intArray54.getClass();
        int[] intArray58 = huffmanTree26.create_huffman_tree(intArray45, intArray54);
        int[] intArray59 = null;
        int[] intArray61 = huffmanTree26.expand_array(intArray59, (-1));
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        java.lang.Class<?> wildcardClass68 = huffmanTree62.getClass();
        HuffmanTree huffmanTree69 = new HuffmanTree();
        int[] intArray72 = new int[] { '4', (byte) 10 };
        int[] intArray74 = huffmanTree69.expand_array(intArray72, (-1));
        int[] intArray80 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int82 = huffmanTree69.search_for_value(intArray80, 0);
        int int84 = huffmanTree62.search_for_value(intArray80, 0);
        java.lang.Class<?> wildcardClass85 = intArray80.getClass();
        int int87 = huffmanTree26.search_for_value(intArray80, 0);
        java.lang.Class<?> wildcardClass88 = intArray80.getClass();
        try {
            int int90 = huffmanTree0.search_for_value(intArray80, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 4 + "'", int82 == 4);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        int[] intArray35 = null;
        int[] intArray36 = null;
        try {
            int[] intArray37 = huffmanTree0.create_huffman_tree(intArray35, intArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        java.lang.Class<?> wildcardClass19 = huffmanTree18.getClass();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        java.lang.Class<?> wildcardClass33 = intArray32.getClass();
        int[] intArray35 = huffmanTree18.expand_array(intArray32, 1);
        java.lang.Class<?> wildcardClass36 = intArray35.getClass();
        int int38 = huffmanTree0.search_for_value(intArray35, 0);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass40 = huffmanTree0.getClass();
        HuffmanTree huffmanTree41 = new HuffmanTree();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int int49 = huffmanTree41.search_for_value(intArray47, (int) (short) 10);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray60 = new int[] { '4', '#', 0, 4 };
        int[] intArray62 = huffmanTree50.expand_array(intArray60, 0);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int int71 = huffmanTree63.search_for_value(intArray69, (int) (short) 10);
        java.lang.Class<?> wildcardClass72 = intArray69.getClass();
        int[] intArray73 = huffmanTree41.create_huffman_tree(intArray60, intArray69);
        java.lang.Class<?> wildcardClass74 = huffmanTree41.getClass();
        java.lang.Class<?> wildcardClass75 = huffmanTree41.getClass();
        HuffmanTree huffmanTree76 = new HuffmanTree();
        int[] intArray79 = new int[] { '4', (byte) 10 };
        int[] intArray81 = huffmanTree76.expand_array(intArray79, (-1));
        int[] intArray87 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int89 = huffmanTree76.search_for_value(intArray87, 0);
        int[] intArray91 = huffmanTree41.expand_array(intArray87, 0);
        int[] intArray93 = huffmanTree0.expand_array(intArray91, 3);
        int[] intArray94 = null;
        try {
            int int96 = huffmanTree0.search_for_value(intArray94, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 4 + "'", int89 == 4);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int[] intArray12 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int14 = huffmanTree1.search_for_value(intArray12, 0);
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int[] intArray26 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int28 = huffmanTree15.search_for_value(intArray26, 0);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray35 = huffmanTree1.create_huffman_tree(intArray26, intArray32);
        java.lang.Class<?> wildcardClass36 = huffmanTree1.getClass();
        java.lang.Class<?> wildcardClass37 = huffmanTree1.getClass();
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int[] intArray55 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int57 = huffmanTree44.search_for_value(intArray55, 0);
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int[] intArray69 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int71 = huffmanTree58.search_for_value(intArray69, 0);
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        int[] intArray78 = huffmanTree44.create_huffman_tree(intArray69, intArray75);
        int[] intArray80 = huffmanTree38.expand_array(intArray69, (int) (byte) 1);
        int[] intArray82 = huffmanTree1.expand_array(intArray80, (-1));
        int int84 = huffmanTree0.search_for_value(intArray82, (int) (byte) 100);
        java.lang.Class<?> wildcardClass85 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass86 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass87 = huffmanTree0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        java.lang.Class<?> wildcardClass15 = huffmanTree14.getClass();
        HuffmanTree huffmanTree16 = new HuffmanTree();
        int[] intArray19 = new int[] { '4', (byte) 10 };
        int[] intArray21 = huffmanTree16.expand_array(intArray19, (-1));
        java.lang.Class<?> wildcardClass22 = huffmanTree16.getClass();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray34 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int36 = huffmanTree23.search_for_value(intArray34, 0);
        int int38 = huffmanTree16.search_for_value(intArray34, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        int[] intArray52 = huffmanTree39.expand_array(intArray48, (int) (short) 1);
        int[] intArray54 = new int[] { 4 };
        int int56 = huffmanTree39.search_for_value(intArray54, 4);
        int[] intArray57 = huffmanTree14.create_huffman_tree(intArray34, intArray54);
        int[] intArray59 = huffmanTree0.expand_array(intArray54, (int) (short) 1);
        java.lang.Class<?> wildcardClass60 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass61 = huffmanTree0.getClass();
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        HuffmanTree huffmanTree68 = new HuffmanTree();
        int[] intArray71 = new int[] { '4', (byte) 10 };
        int[] intArray73 = huffmanTree68.expand_array(intArray71, (-1));
        int[] intArray75 = huffmanTree62.expand_array(intArray71, (int) (short) 1);
        int[] intArray76 = null;
        try {
            int[] intArray77 = huffmanTree0.create_huffman_tree(intArray75, intArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray38 = new int[] { '4', '#', 0, 4 };
        int[] intArray40 = huffmanTree28.expand_array(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray47 = huffmanTree14.create_huffman_tree(intArray38, intArray46);
        java.lang.Class<?> wildcardClass48 = intArray38.getClass();
        HuffmanTree huffmanTree49 = new HuffmanTree();
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray60 = new int[] { '4', '#', 0, 4 };
        int[] intArray62 = huffmanTree50.expand_array(intArray60, 0);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray73 = new int[] { '4', '#', 0, 4 };
        int[] intArray75 = huffmanTree63.expand_array(intArray73, 0);
        int[] intArray76 = huffmanTree49.create_huffman_tree(intArray60, intArray75);
        int[] intArray77 = huffmanTree0.create_huffman_tree(intArray38, intArray76);
        java.lang.Class<?> wildcardClass78 = intArray77.getClass();
        java.lang.Class<?> wildcardClass79 = intArray77.getClass();
        java.lang.Class<?> wildcardClass80 = intArray77.getClass();
        java.lang.Class<?> wildcardClass81 = intArray77.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass23 = huffmanTree0.getClass();
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        int[] intArray37 = huffmanTree24.expand_array(intArray33, (int) (short) 1);
        int[] intArray38 = null;
        int[] intArray40 = huffmanTree24.expand_array(intArray38, (int) (short) 1);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        java.lang.Class<?> wildcardClass42 = huffmanTree41.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        java.lang.Class<?> wildcardClass49 = huffmanTree43.getClass();
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray61 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int63 = huffmanTree50.search_for_value(intArray61, 0);
        int int65 = huffmanTree43.search_for_value(intArray61, 0);
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        int[] intArray79 = huffmanTree66.expand_array(intArray75, (int) (short) 1);
        int[] intArray81 = new int[] { 4 };
        int int83 = huffmanTree66.search_for_value(intArray81, 4);
        int[] intArray84 = huffmanTree41.create_huffman_tree(intArray61, intArray81);
        java.lang.Class<?> wildcardClass85 = intArray81.getClass();
        java.lang.Class<?> wildcardClass86 = intArray81.getClass();
        int[] intArray88 = huffmanTree24.expand_array(intArray81, 0);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        try {
            int[] intArray91 = huffmanTree0.expand_array(intArray88, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNull(intArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray33 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        java.lang.Class<?> wildcardClass34 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray47 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int49 = huffmanTree36.search_for_value(intArray47, 0);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray60 = new int[] { '4', '#', 0, 4 };
        int[] intArray62 = huffmanTree50.expand_array(intArray60, 0);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray69 = huffmanTree36.create_huffman_tree(intArray60, intArray68);
        java.lang.Class<?> wildcardClass70 = intArray69.getClass();
        try {
            int int72 = huffmanTree0.search_for_value(intArray69, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        HuffmanTree huffmanTree18 = new HuffmanTree();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int int27 = huffmanTree19.search_for_value(intArray25, (int) (short) 10);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray38 = new int[] { '4', '#', 0, 4 };
        int[] intArray40 = huffmanTree28.expand_array(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int int49 = huffmanTree41.search_for_value(intArray47, (int) (short) 10);
        java.lang.Class<?> wildcardClass50 = intArray47.getClass();
        int[] intArray51 = huffmanTree19.create_huffman_tree(intArray38, intArray47);
        int[] intArray53 = huffmanTree18.expand_array(intArray38, 0);
        int[] intArray55 = huffmanTree0.expand_array(intArray38, (int) (byte) -1);
        HuffmanTree huffmanTree56 = new HuffmanTree();
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int int64 = huffmanTree56.search_for_value(intArray62, (int) (short) 10);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int[] intArray75 = new int[] { '4', '#', 0, 4 };
        int[] intArray77 = huffmanTree65.expand_array(intArray75, 0);
        HuffmanTree huffmanTree78 = new HuffmanTree();
        HuffmanTree huffmanTree79 = new HuffmanTree();
        int[] intArray82 = new int[] { '4', (byte) 10 };
        int[] intArray84 = huffmanTree79.expand_array(intArray82, (-1));
        int int86 = huffmanTree78.search_for_value(intArray84, (int) (short) 10);
        java.lang.Class<?> wildcardClass87 = intArray84.getClass();
        int[] intArray88 = huffmanTree56.create_huffman_tree(intArray75, intArray84);
        java.lang.Class<?> wildcardClass89 = intArray84.getClass();
        java.lang.Class<?> wildcardClass90 = intArray84.getClass();
        int int92 = huffmanTree0.search_for_value(intArray84, (int) (short) 10);
        java.lang.Class<?> wildcardClass93 = intArray84.getClass();
        java.lang.Class<?> wildcardClass94 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        java.lang.Class<?> wildcardClass7 = huffmanTree1.getClass();
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray32 = new int[] { '4', '#', 0, 4 };
        int[] intArray34 = huffmanTree22.expand_array(intArray32, 0);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray41 = huffmanTree8.create_huffman_tree(intArray32, intArray40);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        java.lang.Class<?> wildcardClass43 = huffmanTree42.getClass();
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        java.lang.Class<?> wildcardClass50 = huffmanTree44.getClass();
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int[] intArray62 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int64 = huffmanTree51.search_for_value(intArray62, 0);
        int int66 = huffmanTree44.search_for_value(intArray62, 0);
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray80 = huffmanTree67.expand_array(intArray76, (int) (short) 1);
        int[] intArray82 = new int[] { 4 };
        int int84 = huffmanTree67.search_for_value(intArray82, 4);
        int[] intArray85 = huffmanTree42.create_huffman_tree(intArray62, intArray82);
        int[] intArray86 = huffmanTree1.create_huffman_tree(intArray32, intArray82);
        java.lang.Class<?> wildcardClass87 = intArray82.getClass();
        int[] intArray89 = huffmanTree0.expand_array(intArray82, (-1));
        HuffmanTree huffmanTree90 = new HuffmanTree();
        int[] intArray93 = new int[] { '4', (byte) 10 };
        int[] intArray95 = huffmanTree90.expand_array(intArray93, (-1));
        try {
            int[] intArray97 = huffmanTree0.expand_array(intArray95, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray33 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int35 = huffmanTree22.search_for_value(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree8.create_huffman_tree(intArray33, intArray39);
        int[] intArray44 = huffmanTree2.expand_array(intArray33, (int) (byte) 1);
        int[] intArray46 = huffmanTree0.expand_array(intArray33, (int) (short) 0);
        java.lang.Class<?> wildcardClass47 = huffmanTree0.getClass();
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray61 = huffmanTree48.expand_array(intArray57, (int) (short) 1);
        HuffmanTree huffmanTree62 = new HuffmanTree();
        int[] intArray65 = new int[] { '4', (byte) 10 };
        int[] intArray67 = huffmanTree62.expand_array(intArray65, (-1));
        int[] intArray72 = new int[] { '4', '#', 0, 4 };
        int[] intArray74 = huffmanTree62.expand_array(intArray72, 0);
        HuffmanTree huffmanTree75 = new HuffmanTree();
        java.lang.Class<?> wildcardClass76 = huffmanTree75.getClass();
        HuffmanTree huffmanTree77 = new HuffmanTree();
        int[] intArray80 = new int[] { '4', (byte) 10 };
        int[] intArray82 = huffmanTree77.expand_array(intArray80, (-1));
        int int84 = huffmanTree75.search_for_value(intArray80, (int) (byte) 10);
        int[] intArray85 = huffmanTree48.create_huffman_tree(intArray72, intArray80);
        java.lang.Class<?> wildcardClass86 = intArray85.getClass();
        try {
            int[] intArray88 = huffmanTree0.expand_array(intArray85, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray33 = new int[] { '4', '#', 0, 4 };
        int[] intArray35 = huffmanTree23.expand_array(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree9.create_huffman_tree(intArray33, intArray41);
        java.lang.Class<?> wildcardClass43 = intArray42.getClass();
        int[] intArray45 = huffmanTree0.expand_array(intArray42, (int) (byte) 0);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray57 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int59 = huffmanTree46.search_for_value(intArray57, 0);
        HuffmanTree huffmanTree60 = new HuffmanTree();
        int[] intArray63 = new int[] { '4', (byte) 10 };
        int[] intArray65 = huffmanTree60.expand_array(intArray63, (-1));
        int[] intArray71 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int73 = huffmanTree60.search_for_value(intArray71, 0);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray80 = huffmanTree46.create_huffman_tree(intArray71, intArray77);
        HuffmanTree huffmanTree81 = new HuffmanTree();
        int[] intArray84 = new int[] { '4', (byte) 10 };
        int[] intArray86 = huffmanTree81.expand_array(intArray84, (-1));
        int[] intArray91 = new int[] { '4', '#', 0, 4 };
        int[] intArray93 = huffmanTree81.expand_array(intArray91, 0);
        java.lang.Class<?> wildcardClass94 = intArray93.getClass();
        int[] intArray96 = huffmanTree46.expand_array(intArray93, (int) (byte) -1);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        int[] intArray99 = huffmanTree0.expand_array(intArray96, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
        org.junit.Assert.assertNotNull(intArray99);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        java.lang.Class<?> wildcardClass38 = huffmanTree37.getClass();
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int int46 = huffmanTree37.search_for_value(intArray42, (int) (byte) 10);
        HuffmanTree huffmanTree47 = new HuffmanTree();
        java.lang.Class<?> wildcardClass48 = huffmanTree47.getClass();
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        java.lang.Class<?> wildcardClass55 = huffmanTree49.getClass();
        HuffmanTree huffmanTree56 = new HuffmanTree();
        int[] intArray59 = new int[] { '4', (byte) 10 };
        int[] intArray61 = huffmanTree56.expand_array(intArray59, (-1));
        int[] intArray67 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int69 = huffmanTree56.search_for_value(intArray67, 0);
        int int71 = huffmanTree49.search_for_value(intArray67, 0);
        HuffmanTree huffmanTree72 = new HuffmanTree();
        int[] intArray75 = new int[] { '4', (byte) 10 };
        int[] intArray77 = huffmanTree72.expand_array(intArray75, (-1));
        HuffmanTree huffmanTree78 = new HuffmanTree();
        int[] intArray81 = new int[] { '4', (byte) 10 };
        int[] intArray83 = huffmanTree78.expand_array(intArray81, (-1));
        int[] intArray85 = huffmanTree72.expand_array(intArray81, (int) (short) 1);
        int[] intArray87 = new int[] { 4 };
        int int89 = huffmanTree72.search_for_value(intArray87, 4);
        int[] intArray90 = huffmanTree47.create_huffman_tree(intArray67, intArray87);
        int int92 = huffmanTree37.search_for_value(intArray67, (int) (byte) 100);
        int[] intArray94 = huffmanTree0.expand_array(intArray67, (int) (short) 1);
        java.lang.Class<?> wildcardClass95 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass96 = huffmanTree0.getClass();
        int[] intArray97 = null;
        try {
            int[] intArray99 = huffmanTree0.expand_array(intArray97, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray45 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int47 = huffmanTree34.search_for_value(intArray45, 0);
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray58 = new int[] { '4', '#', 0, 4 };
        int[] intArray60 = huffmanTree48.expand_array(intArray58, 0);
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray67 = huffmanTree34.create_huffman_tree(intArray58, intArray66);
        java.lang.Class<?> wildcardClass68 = intArray67.getClass();
        int[] intArray70 = huffmanTree0.expand_array(intArray67, (int) (byte) -1);
        java.lang.Class<?> wildcardClass71 = huffmanTree0.getClass();
        int[] intArray72 = null;
        try {
            int[] intArray74 = huffmanTree0.expand_array(intArray72, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray33 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int35 = huffmanTree22.search_for_value(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree8.create_huffman_tree(intArray33, intArray39);
        int[] intArray44 = huffmanTree2.expand_array(intArray33, (int) (byte) 1);
        int[] intArray46 = huffmanTree0.expand_array(intArray33, (int) (short) 0);
        java.lang.Class<?> wildcardClass47 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass48 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass49 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass50 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass51 = huffmanTree0.getClass();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        java.lang.Class<?> wildcardClass53 = huffmanTree52.getClass();
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        java.lang.Class<?> wildcardClass60 = huffmanTree54.getClass();
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray72 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int74 = huffmanTree61.search_for_value(intArray72, 0);
        int int76 = huffmanTree54.search_for_value(intArray72, 0);
        HuffmanTree huffmanTree77 = new HuffmanTree();
        int[] intArray80 = new int[] { '4', (byte) 10 };
        int[] intArray82 = huffmanTree77.expand_array(intArray80, (-1));
        HuffmanTree huffmanTree83 = new HuffmanTree();
        int[] intArray86 = new int[] { '4', (byte) 10 };
        int[] intArray88 = huffmanTree83.expand_array(intArray86, (-1));
        int[] intArray90 = huffmanTree77.expand_array(intArray86, (int) (short) 1);
        int[] intArray92 = new int[] { 4 };
        int int94 = huffmanTree77.search_for_value(intArray92, 4);
        int[] intArray95 = huffmanTree52.create_huffman_tree(intArray72, intArray92);
        java.lang.Class<?> wildcardClass96 = intArray95.getClass();
        java.lang.Class<?> wildcardClass97 = intArray95.getClass();
        int[] intArray98 = null;
        try {
            int[] intArray99 = huffmanTree0.create_huffman_tree(intArray95, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        int[] intArray33 = null;
        int[] intArray35 = huffmanTree0.expand_array(intArray33, (-1));
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray47 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int49 = huffmanTree36.search_for_value(intArray47, 0);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray60 = new int[] { '4', '#', 0, 4 };
        int[] intArray62 = huffmanTree50.expand_array(intArray60, 0);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray69 = huffmanTree36.create_huffman_tree(intArray60, intArray68);
        try {
            int int71 = huffmanTree0.search_for_value(intArray68, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray69);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray39 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int41 = huffmanTree28.search_for_value(intArray39, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int[] intArray53 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int55 = huffmanTree42.search_for_value(intArray53, 0);
        HuffmanTree huffmanTree56 = new HuffmanTree();
        int[] intArray59 = new int[] { '4', (byte) 10 };
        int[] intArray61 = huffmanTree56.expand_array(intArray59, (-1));
        int[] intArray62 = huffmanTree28.create_huffman_tree(intArray53, intArray59);
        int[] intArray64 = huffmanTree22.expand_array(intArray53, (int) (byte) 1);
        java.lang.Class<?> wildcardClass65 = intArray53.getClass();
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int[] intArray77 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int79 = huffmanTree66.search_for_value(intArray77, 0);
        java.lang.Class<?> wildcardClass80 = intArray77.getClass();
        int[] intArray81 = huffmanTree8.create_huffman_tree(intArray53, intArray77);
        int[] intArray83 = huffmanTree2.expand_array(intArray77, 0);
        int int85 = huffmanTree0.search_for_value(intArray77, 0);
        java.lang.Class<?> wildcardClass86 = intArray77.getClass();
        java.lang.Class<?> wildcardClass87 = intArray77.getClass();
        java.lang.Class<?> wildcardClass88 = intArray77.getClass();
        java.lang.Class<?> wildcardClass89 = intArray77.getClass();
        java.lang.Class<?> wildcardClass90 = intArray77.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4 + "'", int79 == 4);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 4 + "'", int85 == 4);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int[] intArray12 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int14 = huffmanTree1.search_for_value(intArray12, 0);
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        int[] intArray32 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int34 = huffmanTree21.search_for_value(intArray32, 0);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray55 = huffmanTree21.create_huffman_tree(intArray46, intArray52);
        int[] intArray57 = huffmanTree15.expand_array(intArray46, (int) (byte) 1);
        java.lang.Class<?> wildcardClass58 = intArray46.getClass();
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray70 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int72 = huffmanTree59.search_for_value(intArray70, 0);
        java.lang.Class<?> wildcardClass73 = intArray70.getClass();
        int[] intArray74 = huffmanTree1.create_huffman_tree(intArray46, intArray70);
        HuffmanTree huffmanTree75 = new HuffmanTree();
        HuffmanTree huffmanTree76 = new HuffmanTree();
        int[] intArray79 = new int[] { '4', (byte) 10 };
        int[] intArray81 = huffmanTree76.expand_array(intArray79, (-1));
        int int83 = huffmanTree75.search_for_value(intArray81, (int) (short) 10);
        java.lang.Class<?> wildcardClass84 = intArray81.getClass();
        int[] intArray85 = huffmanTree0.create_huffman_tree(intArray74, intArray81);
        java.lang.Class<?> wildcardClass86 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass87 = huffmanTree0.getClass();
        int[] intArray88 = null;
        try {
            int[] intArray90 = huffmanTree0.expand_array(intArray88, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass34 = huffmanTree0.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        int[] intArray50 = huffmanTree0.expand_array(intArray46, 0);
        java.lang.Class<?> wildcardClass51 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass52 = huffmanTree0.getClass();
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray70 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int72 = huffmanTree59.search_for_value(intArray70, 0);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray84 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int86 = huffmanTree73.search_for_value(intArray84, 0);
        HuffmanTree huffmanTree87 = new HuffmanTree();
        int[] intArray90 = new int[] { '4', (byte) 10 };
        int[] intArray92 = huffmanTree87.expand_array(intArray90, (-1));
        int[] intArray93 = huffmanTree59.create_huffman_tree(intArray84, intArray90);
        int[] intArray95 = huffmanTree53.expand_array(intArray84, (int) (byte) 1);
        java.lang.Class<?> wildcardClass96 = intArray95.getClass();
        int int98 = huffmanTree0.search_for_value(intArray95, (int) (short) 0);
        java.lang.Class<?> wildcardClass99 = huffmanTree0.getClass();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 4 + "'", int98 == 4);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass21 = intArray18.getClass();
        int int23 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        HuffmanTree huffmanTree30 = new HuffmanTree();
        int[] intArray33 = new int[] { '4', (byte) 10 };
        int[] intArray35 = huffmanTree30.expand_array(intArray33, (-1));
        int[] intArray37 = huffmanTree24.expand_array(intArray33, (int) (short) 1);
        int[] intArray39 = new int[] { 4 };
        int int41 = huffmanTree24.search_for_value(intArray39, 4);
        java.lang.Class<?> wildcardClass42 = intArray39.getClass();
        int[] intArray44 = huffmanTree0.expand_array(intArray39, 0);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int int53 = huffmanTree45.search_for_value(intArray51, (int) (short) 10);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray65 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int67 = huffmanTree54.search_for_value(intArray65, 0);
        HuffmanTree huffmanTree68 = new HuffmanTree();
        int[] intArray71 = new int[] { '4', (byte) 10 };
        int[] intArray73 = huffmanTree68.expand_array(intArray71, (-1));
        int[] intArray78 = new int[] { '4', '#', 0, 4 };
        int[] intArray80 = huffmanTree68.expand_array(intArray78, 0);
        HuffmanTree huffmanTree81 = new HuffmanTree();
        int[] intArray84 = new int[] { '4', (byte) 10 };
        int[] intArray86 = huffmanTree81.expand_array(intArray84, (-1));
        int[] intArray87 = huffmanTree54.create_huffman_tree(intArray78, intArray86);
        java.lang.Class<?> wildcardClass88 = intArray87.getClass();
        int[] intArray90 = huffmanTree45.expand_array(intArray87, (int) (byte) 0);
        java.lang.Class<?> wildcardClass91 = intArray87.getClass();
        try {
            int[] intArray93 = huffmanTree0.expand_array(intArray87, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int int9 = huffmanTree0.search_for_value(intArray5, (int) (byte) 10);
        HuffmanTree huffmanTree10 = new HuffmanTree();
        int[] intArray13 = new int[] { '4', (byte) 10 };
        int[] intArray15 = huffmanTree10.expand_array(intArray13, (-1));
        int[] intArray20 = new int[] { '4', '#', 0, 4 };
        int[] intArray22 = huffmanTree10.expand_array(intArray20, 0);
        java.lang.Class<?> wildcardClass23 = intArray22.getClass();
        HuffmanTree huffmanTree24 = new HuffmanTree();
        int[] intArray27 = new int[] { '4', (byte) 10 };
        int[] intArray29 = huffmanTree24.expand_array(intArray27, (-1));
        int[] intArray35 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int37 = huffmanTree24.search_for_value(intArray35, 0);
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        int[] intArray49 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int51 = huffmanTree38.search_for_value(intArray49, 0);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray58 = huffmanTree24.create_huffman_tree(intArray49, intArray55);
        java.lang.Class<?> wildcardClass59 = huffmanTree24.getClass();
        java.lang.Class<?> wildcardClass60 = huffmanTree24.getClass();
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray74 = huffmanTree61.expand_array(intArray70, (int) (short) 1);
        java.lang.Class<?> wildcardClass75 = intArray70.getClass();
        int[] intArray77 = huffmanTree24.expand_array(intArray70, (int) (short) 1);
        int[] intArray78 = huffmanTree0.create_huffman_tree(intArray22, intArray70);
        int[] intArray79 = null;
        int[] intArray81 = huffmanTree0.expand_array(intArray79, (int) (byte) -1);
        try {
            java.lang.Class<?> wildcardClass82 = intArray81.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNull(intArray81);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray10 = new int[] { '4', '#', 0, 4 };
        int[] intArray12 = huffmanTree0.expand_array(intArray10, 0);
        HuffmanTree huffmanTree13 = new HuffmanTree();
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int int21 = huffmanTree13.search_for_value(intArray19, (int) (short) 10);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray32 = new int[] { '4', '#', 0, 4 };
        int[] intArray34 = huffmanTree22.expand_array(intArray32, 0);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int int43 = huffmanTree35.search_for_value(intArray41, (int) (short) 10);
        java.lang.Class<?> wildcardClass44 = intArray41.getClass();
        int[] intArray45 = huffmanTree13.create_huffman_tree(intArray32, intArray41);
        java.lang.Class<?> wildcardClass46 = huffmanTree13.getClass();
        java.lang.Class<?> wildcardClass47 = huffmanTree13.getClass();
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray59 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int61 = huffmanTree48.search_for_value(intArray59, 0);
        int[] intArray63 = huffmanTree13.expand_array(intArray59, 0);
        java.lang.Class<?> wildcardClass64 = intArray63.getClass();
        int[] intArray66 = huffmanTree0.expand_array(intArray63, 0);
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray80 = huffmanTree67.expand_array(intArray76, (int) (short) 1);
        int[] intArray82 = new int[] { 4 };
        int int84 = huffmanTree67.search_for_value(intArray82, 4);
        java.lang.Class<?> wildcardClass85 = intArray82.getClass();
        try {
            int[] intArray87 = huffmanTree0.expand_array(intArray82, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass37 = huffmanTree0.getClass();
        HuffmanTree huffmanTree38 = new HuffmanTree();
        int[] intArray41 = new int[] { '4', (byte) 10 };
        int[] intArray43 = huffmanTree38.expand_array(intArray41, (-1));
        int[] intArray49 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int51 = huffmanTree38.search_for_value(intArray49, 0);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray63 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int65 = huffmanTree52.search_for_value(intArray63, 0);
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int[] intArray72 = huffmanTree38.create_huffman_tree(intArray63, intArray69);
        java.lang.Class<?> wildcardClass73 = huffmanTree38.getClass();
        java.lang.Class<?> wildcardClass74 = huffmanTree38.getClass();
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        HuffmanTree huffmanTree81 = new HuffmanTree();
        int[] intArray84 = new int[] { '4', (byte) 10 };
        int[] intArray86 = huffmanTree81.expand_array(intArray84, (-1));
        int[] intArray88 = huffmanTree75.expand_array(intArray84, (int) (short) 1);
        java.lang.Class<?> wildcardClass89 = intArray84.getClass();
        int[] intArray91 = huffmanTree38.expand_array(intArray84, (int) (short) 1);
        java.lang.Class<?> wildcardClass92 = intArray91.getClass();
        java.lang.Class<?> wildcardClass93 = intArray91.getClass();
        java.lang.Class<?> wildcardClass94 = intArray91.getClass();
        try {
            int int96 = huffmanTree0.search_for_value(intArray91, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        java.lang.Class<?> wildcardClass38 = huffmanTree0.getClass();
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray50 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int52 = huffmanTree39.search_for_value(intArray50, 0);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray64 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int66 = huffmanTree53.search_for_value(intArray64, 0);
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray73 = huffmanTree39.create_huffman_tree(intArray64, intArray70);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray84 = new int[] { '4', '#', 0, 4 };
        int[] intArray86 = huffmanTree74.expand_array(intArray84, 0);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        int[] intArray89 = huffmanTree39.expand_array(intArray86, (int) (byte) -1);
        java.lang.Class<?> wildcardClass90 = intArray86.getClass();
        java.lang.Class<?> wildcardClass91 = intArray86.getClass();
        int[] intArray93 = huffmanTree0.expand_array(intArray86, 1);
        java.lang.Class<?> wildcardClass94 = huffmanTree0.getClass();
        int[] intArray95 = null;
        try {
            int int97 = huffmanTree0.search_for_value(intArray95, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        int int22 = huffmanTree14.search_for_value(intArray20, (int) (short) 10);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray33 = new int[] { '4', '#', 0, 4 };
        int[] intArray35 = huffmanTree23.expand_array(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        int int44 = huffmanTree36.search_for_value(intArray42, (int) (short) 10);
        java.lang.Class<?> wildcardClass45 = intArray42.getClass();
        int[] intArray46 = huffmanTree14.create_huffman_tree(intArray33, intArray42);
        java.lang.Class<?> wildcardClass47 = huffmanTree14.getClass();
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray65 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int67 = huffmanTree54.search_for_value(intArray65, 0);
        HuffmanTree huffmanTree68 = new HuffmanTree();
        int[] intArray71 = new int[] { '4', (byte) 10 };
        int[] intArray73 = huffmanTree68.expand_array(intArray71, (-1));
        int[] intArray79 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int81 = huffmanTree68.search_for_value(intArray79, 0);
        HuffmanTree huffmanTree82 = new HuffmanTree();
        int[] intArray85 = new int[] { '4', (byte) 10 };
        int[] intArray87 = huffmanTree82.expand_array(intArray85, (-1));
        int[] intArray88 = huffmanTree54.create_huffman_tree(intArray79, intArray85);
        int[] intArray90 = huffmanTree48.expand_array(intArray79, (int) (byte) 1);
        int int92 = huffmanTree14.search_for_value(intArray90, 0);
        java.lang.Class<?> wildcardClass93 = intArray90.getClass();
        java.lang.Class<?> wildcardClass94 = intArray90.getClass();
        java.lang.Class<?> wildcardClass95 = intArray90.getClass();
        try {
            int int97 = huffmanTree0.search_for_value(intArray90, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 4 + "'", int92 == 4);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass23 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass24 = huffmanTree0.getClass();
        HuffmanTree huffmanTree25 = new HuffmanTree();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int int33 = huffmanTree25.search_for_value(intArray31, (int) (short) 10);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray44 = new int[] { '4', '#', 0, 4 };
        int[] intArray46 = huffmanTree34.expand_array(intArray44, 0);
        HuffmanTree huffmanTree47 = new HuffmanTree();
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int int55 = huffmanTree47.search_for_value(intArray53, (int) (short) 10);
        java.lang.Class<?> wildcardClass56 = intArray53.getClass();
        int[] intArray57 = huffmanTree25.create_huffman_tree(intArray44, intArray53);
        HuffmanTree huffmanTree58 = new HuffmanTree();
        int[] intArray61 = new int[] { '4', (byte) 10 };
        int[] intArray63 = huffmanTree58.expand_array(intArray61, (-1));
        int[] intArray68 = new int[] { '4', '#', 0, 4 };
        int[] intArray70 = huffmanTree58.expand_array(intArray68, 0);
        HuffmanTree huffmanTree71 = new HuffmanTree();
        int[] intArray74 = new int[] { '4', (byte) 10 };
        int[] intArray76 = huffmanTree71.expand_array(intArray74, (-1));
        HuffmanTree huffmanTree77 = new HuffmanTree();
        int[] intArray80 = new int[] { '4', (byte) 10 };
        int[] intArray82 = huffmanTree77.expand_array(intArray80, (-1));
        int[] intArray84 = huffmanTree71.expand_array(intArray80, (int) (short) 1);
        int[] intArray86 = new int[] { 4 };
        int int88 = huffmanTree71.search_for_value(intArray86, 4);
        int[] intArray89 = huffmanTree25.create_huffman_tree(intArray68, intArray86);
        int[] intArray91 = huffmanTree0.expand_array(intArray68, (int) (byte) 0);
        java.lang.Class<?> wildcardClass92 = huffmanTree0.getClass();
        int[] intArray96 = new int[] { (byte) 1, 1, '#' };
        try {
            int[] intArray98 = huffmanTree0.expand_array(intArray96, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 99");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        int int38 = huffmanTree0.search_for_value(intArray32, (int) (short) 10);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        HuffmanTree huffmanTree40 = new HuffmanTree();
        java.lang.Class<?> wildcardClass41 = huffmanTree40.getClass();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        java.lang.Class<?> wildcardClass48 = huffmanTree42.getClass();
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray60 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int62 = huffmanTree49.search_for_value(intArray60, 0);
        int int64 = huffmanTree42.search_for_value(intArray60, 0);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        HuffmanTree huffmanTree71 = new HuffmanTree();
        int[] intArray74 = new int[] { '4', (byte) 10 };
        int[] intArray76 = huffmanTree71.expand_array(intArray74, (-1));
        int[] intArray78 = huffmanTree65.expand_array(intArray74, (int) (short) 1);
        int[] intArray80 = new int[] { 4 };
        int int82 = huffmanTree65.search_for_value(intArray80, 4);
        int[] intArray83 = huffmanTree40.create_huffman_tree(intArray60, intArray80);
        java.lang.Class<?> wildcardClass84 = intArray80.getClass();
        java.lang.Class<?> wildcardClass85 = intArray80.getClass();
        try {
            int int87 = huffmanTree0.search_for_value(intArray80, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        int int38 = huffmanTree0.search_for_value(intArray32, (int) (short) 10);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        HuffmanTree huffmanTree40 = new HuffmanTree();
        java.lang.Class<?> wildcardClass41 = huffmanTree40.getClass();
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        java.lang.Class<?> wildcardClass48 = huffmanTree42.getClass();
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray60 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int62 = huffmanTree49.search_for_value(intArray60, 0);
        int int64 = huffmanTree42.search_for_value(intArray60, 0);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        HuffmanTree huffmanTree71 = new HuffmanTree();
        int[] intArray74 = new int[] { '4', (byte) 10 };
        int[] intArray76 = huffmanTree71.expand_array(intArray74, (-1));
        int[] intArray78 = huffmanTree65.expand_array(intArray74, (int) (short) 1);
        int[] intArray80 = new int[] { 4 };
        int int82 = huffmanTree65.search_for_value(intArray80, 4);
        int[] intArray83 = huffmanTree40.create_huffman_tree(intArray60, intArray80);
        java.lang.Class<?> wildcardClass84 = intArray83.getClass();
        java.lang.Class<?> wildcardClass85 = intArray83.getClass();
        try {
            int int87 = huffmanTree0.search_for_value(intArray83, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        HuffmanTree huffmanTree17 = new HuffmanTree();
        java.lang.Class<?> wildcardClass18 = huffmanTree17.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        java.lang.Class<?> wildcardClass25 = huffmanTree19.getClass();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int[] intArray37 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int39 = huffmanTree26.search_for_value(intArray37, 0);
        int int41 = huffmanTree19.search_for_value(intArray37, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        HuffmanTree huffmanTree48 = new HuffmanTree();
        int[] intArray51 = new int[] { '4', (byte) 10 };
        int[] intArray53 = huffmanTree48.expand_array(intArray51, (-1));
        int[] intArray55 = huffmanTree42.expand_array(intArray51, (int) (short) 1);
        int[] intArray57 = new int[] { 4 };
        int int59 = huffmanTree42.search_for_value(intArray57, 4);
        int[] intArray60 = huffmanTree17.create_huffman_tree(intArray37, intArray57);
        java.lang.Class<?> wildcardClass61 = intArray57.getClass();
        java.lang.Class<?> wildcardClass62 = intArray57.getClass();
        int[] intArray64 = huffmanTree0.expand_array(intArray57, 0);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        java.lang.Class<?> wildcardClass66 = huffmanTree65.getClass();
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int int74 = huffmanTree65.search_for_value(intArray70, (int) (byte) 10);
        java.lang.Class<?> wildcardClass75 = intArray70.getClass();
        java.lang.Class<?> wildcardClass76 = intArray70.getClass();
        int[] intArray78 = huffmanTree0.expand_array(intArray70, 0);
        java.lang.Class<?> wildcardClass79 = huffmanTree0.getClass();
        int[] intArray80 = null;
        int[] intArray82 = huffmanTree0.expand_array(intArray80, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNull(intArray82);
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        java.lang.Class<?> wildcardClass44 = huffmanTree43.getClass();
        HuffmanTree huffmanTree45 = new HuffmanTree();
        int[] intArray48 = new int[] { '4', (byte) 10 };
        int[] intArray50 = huffmanTree45.expand_array(intArray48, (-1));
        java.lang.Class<?> wildcardClass51 = huffmanTree45.getClass();
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray63 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int65 = huffmanTree52.search_for_value(intArray63, 0);
        int int67 = huffmanTree45.search_for_value(intArray63, 0);
        HuffmanTree huffmanTree68 = new HuffmanTree();
        int[] intArray71 = new int[] { '4', (byte) 10 };
        int[] intArray73 = huffmanTree68.expand_array(intArray71, (-1));
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray81 = huffmanTree68.expand_array(intArray77, (int) (short) 1);
        int[] intArray83 = new int[] { 4 };
        int int85 = huffmanTree68.search_for_value(intArray83, 4);
        int[] intArray86 = huffmanTree43.create_huffman_tree(intArray63, intArray83);
        try {
            int int88 = huffmanTree0.search_for_value(intArray63, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray86);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray38 = new int[] { '4', '#', 0, 4 };
        int[] intArray40 = huffmanTree28.expand_array(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray47 = huffmanTree14.create_huffman_tree(intArray38, intArray46);
        int[] intArray49 = huffmanTree0.expand_array(intArray38, 0);
        java.lang.Class<?> wildcardClass50 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass51 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass52 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass53 = huffmanTree0.getClass();
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        try {
            int[] intArray61 = huffmanTree0.expand_array(intArray57, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        java.lang.Class<?> wildcardClass25 = huffmanTree19.getClass();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        int[] intArray37 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int39 = huffmanTree26.search_for_value(intArray37, 0);
        int int41 = huffmanTree19.search_for_value(intArray37, 0);
        java.lang.Class<?> wildcardClass42 = intArray37.getClass();
        java.lang.Class<?> wildcardClass43 = intArray37.getClass();
        java.lang.Class<?> wildcardClass44 = intArray37.getClass();
        java.lang.Class<?> wildcardClass45 = intArray37.getClass();
        try {
            int int47 = huffmanTree0.search_for_value(intArray37, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        java.lang.Class<?> wildcardClass34 = huffmanTree33.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int int42 = huffmanTree33.search_for_value(intArray38, (int) (byte) 10);
        int int44 = huffmanTree0.search_for_value(intArray38, (int) (short) 10);
        HuffmanTree huffmanTree45 = new HuffmanTree();
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray56 = new int[] { '4', '#', 0, 4 };
        int[] intArray58 = huffmanTree46.expand_array(intArray56, 0);
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray69 = new int[] { '4', '#', 0, 4 };
        int[] intArray71 = huffmanTree59.expand_array(intArray69, 0);
        int[] intArray72 = huffmanTree45.create_huffman_tree(intArray56, intArray71);
        int int74 = huffmanTree0.search_for_value(intArray56, 4);
        java.lang.Class<?> wildcardClass75 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass76 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass77 = huffmanTree0.getClass();
        int[] intArray78 = null;
        try {
            int[] intArray80 = huffmanTree0.expand_array(intArray78, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray30 = new int[] { '4', '#', 0, 4 };
        int[] intArray32 = huffmanTree20.expand_array(intArray30, 0);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        int[] intArray43 = new int[] { '4', '#', 0, 4 };
        int[] intArray45 = huffmanTree33.expand_array(intArray43, 0);
        int[] intArray46 = huffmanTree19.create_huffman_tree(intArray30, intArray45);
        int int48 = huffmanTree0.search_for_value(intArray30, 0);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        HuffmanTree huffmanTree55 = new HuffmanTree();
        int[] intArray58 = new int[] { '4', (byte) 10 };
        int[] intArray60 = huffmanTree55.expand_array(intArray58, (-1));
        int[] intArray62 = huffmanTree49.expand_array(intArray58, (int) (short) 1);
        java.lang.Class<?> wildcardClass63 = intArray62.getClass();
        java.lang.Class<?> wildcardClass64 = intArray62.getClass();
        java.lang.Class<?> wildcardClass65 = intArray62.getClass();
        try {
            int[] intArray67 = huffmanTree0.expand_array(intArray62, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray48 = huffmanTree35.expand_array(intArray44, (int) (short) 1);
        HuffmanTree huffmanTree49 = new HuffmanTree();
        int[] intArray52 = new int[] { '4', (byte) 10 };
        int[] intArray54 = huffmanTree49.expand_array(intArray52, (-1));
        int[] intArray59 = new int[] { '4', '#', 0, 4 };
        int[] intArray61 = huffmanTree49.expand_array(intArray59, 0);
        HuffmanTree huffmanTree62 = new HuffmanTree();
        java.lang.Class<?> wildcardClass63 = huffmanTree62.getClass();
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int int71 = huffmanTree62.search_for_value(intArray67, (int) (byte) 10);
        int[] intArray72 = huffmanTree35.create_huffman_tree(intArray59, intArray67);
        HuffmanTree huffmanTree73 = new HuffmanTree();
        java.lang.Class<?> wildcardClass74 = huffmanTree73.getClass();
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        int int82 = huffmanTree73.search_for_value(intArray78, (int) (byte) 10);
        int[] intArray84 = huffmanTree35.expand_array(intArray78, (int) (short) 1);
        java.lang.Class<?> wildcardClass85 = intArray78.getClass();
        try {
            int int87 = huffmanTree0.search_for_value(intArray78, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass19 = huffmanTree0.getClass();
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray44 = new int[] { '4', '#', 0, 4 };
        int[] intArray46 = huffmanTree34.expand_array(intArray44, 0);
        HuffmanTree huffmanTree47 = new HuffmanTree();
        int[] intArray50 = new int[] { '4', (byte) 10 };
        int[] intArray52 = huffmanTree47.expand_array(intArray50, (-1));
        int[] intArray53 = huffmanTree20.create_huffman_tree(intArray44, intArray52);
        int[] intArray54 = null;
        try {
            int[] intArray55 = huffmanTree0.create_huffman_tree(intArray52, intArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray53);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass21 = intArray18.getClass();
        int int23 = huffmanTree0.search_for_value(intArray18, 0);
        java.lang.Class<?> wildcardClass24 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass25 = huffmanTree0.getClass();
        HuffmanTree huffmanTree26 = new HuffmanTree();
        int[] intArray29 = new int[] { '4', (byte) 10 };
        int[] intArray31 = huffmanTree26.expand_array(intArray29, (-1));
        HuffmanTree huffmanTree32 = new HuffmanTree();
        int[] intArray35 = new int[] { '4', (byte) 10 };
        int[] intArray37 = huffmanTree32.expand_array(intArray35, (-1));
        int[] intArray39 = huffmanTree26.expand_array(intArray35, (int) (short) 1);
        int[] intArray40 = null;
        int[] intArray42 = huffmanTree26.expand_array(intArray40, (int) (short) 1);
        HuffmanTree huffmanTree43 = new HuffmanTree();
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int int51 = huffmanTree43.search_for_value(intArray49, (int) (short) 10);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray62 = new int[] { '4', '#', 0, 4 };
        int[] intArray64 = huffmanTree52.expand_array(intArray62, 0);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int int73 = huffmanTree65.search_for_value(intArray71, (int) (short) 10);
        java.lang.Class<?> wildcardClass74 = intArray71.getClass();
        int[] intArray75 = huffmanTree43.create_huffman_tree(intArray62, intArray71);
        java.lang.Class<?> wildcardClass76 = intArray62.getClass();
        java.lang.Class<?> wildcardClass77 = intArray62.getClass();
        int int79 = huffmanTree26.search_for_value(intArray62, 0);
        HuffmanTree huffmanTree80 = new HuffmanTree();
        HuffmanTree huffmanTree81 = new HuffmanTree();
        int[] intArray84 = new int[] { '4', (byte) 10 };
        int[] intArray86 = huffmanTree81.expand_array(intArray84, (-1));
        int int88 = huffmanTree80.search_for_value(intArray86, (int) (short) 10);
        java.lang.Class<?> wildcardClass89 = intArray86.getClass();
        java.lang.Class<?> wildcardClass90 = intArray86.getClass();
        int[] intArray92 = huffmanTree26.expand_array(intArray86, (-1));
        java.lang.Class<?> wildcardClass93 = intArray86.getClass();
        try {
            int int95 = huffmanTree0.search_for_value(intArray86, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNull(intArray42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        int int22 = huffmanTree0.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray36 = huffmanTree23.expand_array(intArray32, (int) (short) 1);
        int int38 = huffmanTree0.search_for_value(intArray32, (int) (short) 10);
        java.lang.Class<?> wildcardClass39 = huffmanTree0.getClass();
        HuffmanTree huffmanTree40 = new HuffmanTree();
        int[] intArray43 = new int[] { '4', (byte) 10 };
        int[] intArray45 = huffmanTree40.expand_array(intArray43, (-1));
        int[] intArray51 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int53 = huffmanTree40.search_for_value(intArray51, 0);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        int[] intArray57 = new int[] { '4', (byte) 10 };
        int[] intArray59 = huffmanTree54.expand_array(intArray57, (-1));
        int[] intArray64 = new int[] { '4', '#', 0, 4 };
        int[] intArray66 = huffmanTree54.expand_array(intArray64, 0);
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray73 = huffmanTree40.create_huffman_tree(intArray64, intArray72);
        java.lang.Class<?> wildcardClass74 = intArray73.getClass();
        int[] intArray76 = huffmanTree0.expand_array(intArray73, (int) (short) 1);
        HuffmanTree huffmanTree77 = new HuffmanTree();
        java.lang.Class<?> wildcardClass78 = huffmanTree77.getClass();
        HuffmanTree huffmanTree79 = new HuffmanTree();
        int[] intArray82 = new int[] { '4', (byte) 10 };
        int[] intArray84 = huffmanTree79.expand_array(intArray82, (-1));
        int[] intArray89 = new int[] { '4', '#', 0, 4 };
        int[] intArray91 = huffmanTree79.expand_array(intArray89, 0);
        java.lang.Class<?> wildcardClass92 = intArray91.getClass();
        int[] intArray94 = huffmanTree77.expand_array(intArray91, 1);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        try {
            int[] intArray97 = huffmanTree0.expand_array(intArray94, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray20 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int22 = huffmanTree9.search_for_value(intArray20, 0);
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int[] intArray33 = new int[] { '4', '#', 0, 4 };
        int[] intArray35 = huffmanTree23.expand_array(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree9.create_huffman_tree(intArray33, intArray41);
        java.lang.Class<?> wildcardClass43 = intArray42.getClass();
        int[] intArray45 = huffmanTree0.expand_array(intArray42, (int) (byte) 0);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray59 = huffmanTree46.expand_array(intArray55, (int) (short) 1);
        java.lang.Class<?> wildcardClass60 = intArray55.getClass();
        try {
            int[] intArray62 = huffmanTree0.expand_array(intArray55, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray38 = new int[] { '4', '#', 0, 4 };
        int[] intArray40 = huffmanTree28.expand_array(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray47 = huffmanTree14.create_huffman_tree(intArray38, intArray46);
        int[] intArray49 = huffmanTree0.expand_array(intArray38, 0);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        int int58 = huffmanTree50.search_for_value(intArray56, (int) (short) 10);
        java.lang.Class<?> wildcardClass59 = intArray56.getClass();
        java.lang.Class<?> wildcardClass60 = intArray56.getClass();
        try {
            int int62 = huffmanTree0.search_for_value(intArray56, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int[] intArray12 = new int[] { '4', '#', 0, 4 };
        int[] intArray14 = huffmanTree2.expand_array(intArray12, 0);
        java.lang.Class<?> wildcardClass15 = intArray14.getClass();
        int[] intArray17 = huffmanTree0.expand_array(intArray14, 1);
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        HuffmanTree huffmanTree19 = new HuffmanTree();
        int[] intArray22 = new int[] { '4', (byte) 10 };
        int[] intArray24 = huffmanTree19.expand_array(intArray22, (-1));
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        int[] intArray36 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int38 = huffmanTree25.search_for_value(intArray36, 0);
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray50 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int52 = huffmanTree39.search_for_value(intArray50, 0);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray59 = huffmanTree25.create_huffman_tree(intArray50, intArray56);
        int[] intArray61 = huffmanTree19.expand_array(intArray50, (int) (byte) 1);
        java.lang.Class<?> wildcardClass62 = intArray61.getClass();
        HuffmanTree huffmanTree63 = new HuffmanTree();
        java.lang.Class<?> wildcardClass64 = huffmanTree63.getClass();
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int int72 = huffmanTree63.search_for_value(intArray68, (int) (byte) 10);
        int[] intArray73 = huffmanTree0.create_huffman_tree(intArray61, intArray68);
        java.lang.Class<?> wildcardClass74 = huffmanTree0.getClass();
        HuffmanTree huffmanTree75 = new HuffmanTree();
        int[] intArray78 = new int[] { '4', (byte) 10 };
        int[] intArray80 = huffmanTree75.expand_array(intArray78, (-1));
        HuffmanTree huffmanTree81 = new HuffmanTree();
        int[] intArray84 = new int[] { '4', (byte) 10 };
        int[] intArray86 = huffmanTree81.expand_array(intArray84, (-1));
        int[] intArray88 = huffmanTree75.expand_array(intArray84, (int) (short) 1);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        java.lang.Class<?> wildcardClass90 = intArray88.getClass();
        try {
            int[] intArray92 = huffmanTree0.expand_array(intArray88, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        HuffmanTree huffmanTree33 = new HuffmanTree();
        int[] intArray36 = new int[] { '4', (byte) 10 };
        int[] intArray38 = huffmanTree33.expand_array(intArray36, (-1));
        int[] intArray43 = new int[] { '4', '#', 0, 4 };
        int[] intArray45 = huffmanTree33.expand_array(intArray43, 0);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray59 = huffmanTree46.expand_array(intArray55, (int) (short) 1);
        int[] intArray61 = new int[] { 4 };
        int int63 = huffmanTree46.search_for_value(intArray61, 4);
        int[] intArray64 = huffmanTree0.create_huffman_tree(intArray43, intArray61);
        java.lang.Class<?> wildcardClass65 = huffmanTree0.getClass();
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        java.lang.Class<?> wildcardClass72 = huffmanTree66.getClass();
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray84 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int86 = huffmanTree73.search_for_value(intArray84, 0);
        int int88 = huffmanTree66.search_for_value(intArray84, 0);
        java.lang.Class<?> wildcardClass89 = intArray84.getClass();
        java.lang.Class<?> wildcardClass90 = intArray84.getClass();
        try {
            int[] intArray92 = huffmanTree0.expand_array(intArray84, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray24 = new int[] { '4', '#', 0, 4 };
        int[] intArray26 = huffmanTree14.expand_array(intArray24, 0);
        HuffmanTree huffmanTree27 = new HuffmanTree();
        java.lang.Class<?> wildcardClass28 = huffmanTree27.getClass();
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int int36 = huffmanTree27.search_for_value(intArray32, (int) (byte) 10);
        int[] intArray37 = huffmanTree0.create_huffman_tree(intArray24, intArray32);
        java.lang.Class<?> wildcardClass38 = huffmanTree0.getClass();
        HuffmanTree huffmanTree39 = new HuffmanTree();
        int[] intArray42 = new int[] { '4', (byte) 10 };
        int[] intArray44 = huffmanTree39.expand_array(intArray42, (-1));
        int[] intArray50 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int52 = huffmanTree39.search_for_value(intArray50, 0);
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        int[] intArray64 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int66 = huffmanTree53.search_for_value(intArray64, 0);
        HuffmanTree huffmanTree67 = new HuffmanTree();
        int[] intArray70 = new int[] { '4', (byte) 10 };
        int[] intArray72 = huffmanTree67.expand_array(intArray70, (-1));
        int[] intArray73 = huffmanTree39.create_huffman_tree(intArray64, intArray70);
        HuffmanTree huffmanTree74 = new HuffmanTree();
        int[] intArray77 = new int[] { '4', (byte) 10 };
        int[] intArray79 = huffmanTree74.expand_array(intArray77, (-1));
        int[] intArray84 = new int[] { '4', '#', 0, 4 };
        int[] intArray86 = huffmanTree74.expand_array(intArray84, 0);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        int[] intArray89 = huffmanTree39.expand_array(intArray86, (int) (byte) -1);
        java.lang.Class<?> wildcardClass90 = intArray86.getClass();
        java.lang.Class<?> wildcardClass91 = intArray86.getClass();
        int[] intArray93 = huffmanTree0.expand_array(intArray86, 1);
        java.lang.Class<?> wildcardClass94 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass95 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass96 = huffmanTree0.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        java.lang.Class<?> wildcardClass6 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass7 = huffmanTree0.getClass();
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray21 = huffmanTree8.expand_array(intArray17, (int) (short) 1);
        int[] intArray23 = new int[] { 4 };
        int int25 = huffmanTree8.search_for_value(intArray23, 4);
        int[] intArray27 = huffmanTree0.expand_array(intArray23, (int) (byte) -1);
        int[] intArray28 = null;
        try {
            int[] intArray30 = huffmanTree0.expand_array(intArray28, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray14 = null;
        int[] intArray16 = huffmanTree0.expand_array(intArray14, (int) (short) 1);
        java.lang.Class<?> wildcardClass17 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass18 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass19 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass20 = huffmanTree0.getClass();
        HuffmanTree huffmanTree21 = new HuffmanTree();
        java.lang.Class<?> wildcardClass22 = huffmanTree21.getClass();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree21.search_for_value(intArray26, (int) (byte) 10);
        java.lang.Class<?> wildcardClass31 = intArray26.getClass();
        java.lang.Class<?> wildcardClass32 = intArray26.getClass();
        try {
            int int34 = huffmanTree0.search_for_value(intArray26, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNull(intArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        HuffmanTree huffmanTree7 = new HuffmanTree();
        int[] intArray10 = new int[] { '4', (byte) 10 };
        int[] intArray12 = huffmanTree7.expand_array(intArray10, (-1));
        int[] intArray18 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int20 = huffmanTree7.search_for_value(intArray18, 0);
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        HuffmanTree huffmanTree27 = new HuffmanTree();
        int[] intArray30 = new int[] { '4', (byte) 10 };
        int[] intArray32 = huffmanTree27.expand_array(intArray30, (-1));
        int[] intArray38 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int40 = huffmanTree27.search_for_value(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray52 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int54 = huffmanTree41.search_for_value(intArray52, 0);
        HuffmanTree huffmanTree55 = new HuffmanTree();
        int[] intArray58 = new int[] { '4', (byte) 10 };
        int[] intArray60 = huffmanTree55.expand_array(intArray58, (-1));
        int[] intArray61 = huffmanTree27.create_huffman_tree(intArray52, intArray58);
        int[] intArray63 = huffmanTree21.expand_array(intArray52, (int) (byte) 1);
        java.lang.Class<?> wildcardClass64 = intArray52.getClass();
        HuffmanTree huffmanTree65 = new HuffmanTree();
        int[] intArray68 = new int[] { '4', (byte) 10 };
        int[] intArray70 = huffmanTree65.expand_array(intArray68, (-1));
        int[] intArray76 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int78 = huffmanTree65.search_for_value(intArray76, 0);
        java.lang.Class<?> wildcardClass79 = intArray76.getClass();
        int[] intArray80 = huffmanTree7.create_huffman_tree(intArray52, intArray76);
        int[] intArray82 = huffmanTree1.expand_array(intArray76, 0);
        java.lang.Class<?> wildcardClass83 = intArray82.getClass();
        int int85 = huffmanTree0.search_for_value(intArray82, 0);
        int[] intArray86 = null;
        try {
            int[] intArray88 = huffmanTree0.expand_array(intArray86, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 4 + "'", int85 == 4);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        java.lang.Class<?> wildcardClass14 = huffmanTree0.getClass();
        HuffmanTree huffmanTree15 = new HuffmanTree();
        int[] intArray18 = new int[] { '4', (byte) 10 };
        int[] intArray20 = huffmanTree15.expand_array(intArray18, (-1));
        HuffmanTree huffmanTree21 = new HuffmanTree();
        int[] intArray24 = new int[] { '4', (byte) 10 };
        int[] intArray26 = huffmanTree21.expand_array(intArray24, (-1));
        int[] intArray28 = huffmanTree15.expand_array(intArray24, (int) (short) 1);
        HuffmanTree huffmanTree29 = new HuffmanTree();
        int[] intArray32 = new int[] { '4', (byte) 10 };
        int[] intArray34 = huffmanTree29.expand_array(intArray32, (-1));
        int[] intArray39 = new int[] { '4', '#', 0, 4 };
        int[] intArray41 = huffmanTree29.expand_array(intArray39, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        java.lang.Class<?> wildcardClass43 = huffmanTree42.getClass();
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int int51 = huffmanTree42.search_for_value(intArray47, (int) (byte) 10);
        int[] intArray52 = huffmanTree15.create_huffman_tree(intArray39, intArray47);
        int[] intArray54 = huffmanTree0.expand_array(intArray47, (int) (byte) 0);
        HuffmanTree huffmanTree55 = new HuffmanTree();
        int[] intArray58 = new int[] { '4', (byte) 10 };
        int[] intArray60 = huffmanTree55.expand_array(intArray58, (-1));
        HuffmanTree huffmanTree61 = new HuffmanTree();
        int[] intArray64 = new int[] { '4', (byte) 10 };
        int[] intArray66 = huffmanTree61.expand_array(intArray64, (-1));
        int[] intArray68 = huffmanTree55.expand_array(intArray64, (int) (short) 1);
        try {
            int int70 = huffmanTree0.search_for_value(intArray68, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        int[] intArray12 = new int[] { '4', '#', 0, 4 };
        int[] intArray14 = huffmanTree2.expand_array(intArray12, 0);
        java.lang.Class<?> wildcardClass15 = intArray14.getClass();
        int[] intArray17 = huffmanTree0.expand_array(intArray14, 1);
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        int[] intArray29 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int31 = huffmanTree18.search_for_value(intArray29, 0);
        HuffmanTree huffmanTree32 = new HuffmanTree();
        int[] intArray35 = new int[] { '4', (byte) 10 };
        int[] intArray37 = huffmanTree32.expand_array(intArray35, (-1));
        int[] intArray43 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int45 = huffmanTree32.search_for_value(intArray43, 0);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        int[] intArray52 = huffmanTree18.create_huffman_tree(intArray43, intArray49);
        java.lang.Class<?> wildcardClass53 = intArray49.getClass();
        int[] intArray55 = huffmanTree0.expand_array(intArray49, (int) (byte) 1);
        int[] intArray56 = null;
        try {
            int int58 = huffmanTree0.search_for_value(intArray56, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(intArray55);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        HuffmanTree huffmanTree1 = new HuffmanTree();
        int[] intArray4 = new int[] { '4', (byte) 10 };
        int[] intArray6 = huffmanTree1.expand_array(intArray4, (-1));
        int int8 = huffmanTree0.search_for_value(intArray6, (int) (short) 10);
        HuffmanTree huffmanTree9 = new HuffmanTree();
        int[] intArray12 = new int[] { '4', (byte) 10 };
        int[] intArray14 = huffmanTree9.expand_array(intArray12, (-1));
        int[] intArray19 = new int[] { '4', '#', 0, 4 };
        int[] intArray21 = huffmanTree9.expand_array(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        HuffmanTree huffmanTree23 = new HuffmanTree();
        int[] intArray26 = new int[] { '4', (byte) 10 };
        int[] intArray28 = huffmanTree23.expand_array(intArray26, (-1));
        int int30 = huffmanTree22.search_for_value(intArray28, (int) (short) 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        int[] intArray32 = huffmanTree0.create_huffman_tree(intArray19, intArray28);
        java.lang.Class<?> wildcardClass33 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass34 = huffmanTree0.getClass();
        HuffmanTree huffmanTree35 = new HuffmanTree();
        int[] intArray38 = new int[] { '4', (byte) 10 };
        int[] intArray40 = huffmanTree35.expand_array(intArray38, (-1));
        int[] intArray46 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int48 = huffmanTree35.search_for_value(intArray46, 0);
        int[] intArray50 = huffmanTree0.expand_array(intArray46, 0);
        java.lang.Class<?> wildcardClass51 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass52 = huffmanTree0.getClass();
        int[] intArray53 = null;
        try {
            int int55 = huffmanTree0.search_for_value(intArray53, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray38 = new int[] { '4', '#', 0, 4 };
        int[] intArray40 = huffmanTree28.expand_array(intArray38, 0);
        HuffmanTree huffmanTree41 = new HuffmanTree();
        int[] intArray44 = new int[] { '4', (byte) 10 };
        int[] intArray46 = huffmanTree41.expand_array(intArray44, (-1));
        int[] intArray47 = huffmanTree14.create_huffman_tree(intArray38, intArray46);
        int[] intArray49 = huffmanTree0.expand_array(intArray38, 0);
        java.lang.Class<?> wildcardClass50 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass51 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass52 = huffmanTree0.getClass();
        HuffmanTree huffmanTree53 = new HuffmanTree();
        int[] intArray56 = new int[] { '4', (byte) 10 };
        int[] intArray58 = huffmanTree53.expand_array(intArray56, (-1));
        HuffmanTree huffmanTree59 = new HuffmanTree();
        int[] intArray62 = new int[] { '4', (byte) 10 };
        int[] intArray64 = huffmanTree59.expand_array(intArray62, (-1));
        int[] intArray66 = huffmanTree53.expand_array(intArray62, (int) (short) 1);
        int[] intArray67 = null;
        int[] intArray69 = huffmanTree53.expand_array(intArray67, (int) (short) 1);
        java.lang.Class<?> wildcardClass70 = huffmanTree53.getClass();
        HuffmanTree huffmanTree71 = new HuffmanTree();
        java.lang.Class<?> wildcardClass72 = huffmanTree71.getClass();
        HuffmanTree huffmanTree73 = new HuffmanTree();
        int[] intArray76 = new int[] { '4', (byte) 10 };
        int[] intArray78 = huffmanTree73.expand_array(intArray76, (-1));
        int[] intArray83 = new int[] { '4', '#', 0, 4 };
        int[] intArray85 = huffmanTree73.expand_array(intArray83, 0);
        java.lang.Class<?> wildcardClass86 = intArray85.getClass();
        int[] intArray88 = huffmanTree71.expand_array(intArray85, 1);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        int int91 = huffmanTree53.search_for_value(intArray88, 0);
        java.lang.Class<?> wildcardClass92 = intArray88.getClass();
        int[] intArray94 = huffmanTree0.expand_array(intArray88, 0);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNull(intArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        java.lang.Class<?> wildcardClass1 = huffmanTree0.getClass();
        HuffmanTree huffmanTree2 = new HuffmanTree();
        int[] intArray5 = new int[] { '4', (byte) 10 };
        int[] intArray7 = huffmanTree2.expand_array(intArray5, (-1));
        HuffmanTree huffmanTree8 = new HuffmanTree();
        int[] intArray11 = new int[] { '4', (byte) 10 };
        int[] intArray13 = huffmanTree8.expand_array(intArray11, (-1));
        int[] intArray19 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int21 = huffmanTree8.search_for_value(intArray19, 0);
        HuffmanTree huffmanTree22 = new HuffmanTree();
        int[] intArray25 = new int[] { '4', (byte) 10 };
        int[] intArray27 = huffmanTree22.expand_array(intArray25, (-1));
        int[] intArray33 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int35 = huffmanTree22.search_for_value(intArray33, 0);
        HuffmanTree huffmanTree36 = new HuffmanTree();
        int[] intArray39 = new int[] { '4', (byte) 10 };
        int[] intArray41 = huffmanTree36.expand_array(intArray39, (-1));
        int[] intArray42 = huffmanTree8.create_huffman_tree(intArray33, intArray39);
        int[] intArray44 = huffmanTree2.expand_array(intArray33, (int) (byte) 1);
        int[] intArray46 = huffmanTree0.expand_array(intArray33, (int) (short) 0);
        int[] intArray47 = null;
        int[] intArray49 = huffmanTree0.expand_array(intArray47, 0);
        HuffmanTree huffmanTree50 = new HuffmanTree();
        int[] intArray53 = new int[] { '4', (byte) 10 };
        int[] intArray55 = huffmanTree50.expand_array(intArray53, (-1));
        int[] intArray61 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int63 = huffmanTree50.search_for_value(intArray61, 0);
        HuffmanTree huffmanTree64 = new HuffmanTree();
        int[] intArray67 = new int[] { '4', (byte) 10 };
        int[] intArray69 = huffmanTree64.expand_array(intArray67, (-1));
        int[] intArray74 = new int[] { '4', '#', 0, 4 };
        int[] intArray76 = huffmanTree64.expand_array(intArray74, 0);
        HuffmanTree huffmanTree77 = new HuffmanTree();
        int[] intArray80 = new int[] { '4', (byte) 10 };
        int[] intArray82 = huffmanTree77.expand_array(intArray80, (-1));
        int[] intArray83 = huffmanTree50.create_huffman_tree(intArray74, intArray82);
        int int85 = huffmanTree0.search_for_value(intArray83, (int) '#');
        java.lang.Class<?> wildcardClass86 = intArray83.getClass();
        java.lang.Class<?> wildcardClass87 = intArray83.getClass();
        java.lang.Class<?> wildcardClass88 = intArray83.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNull(intArray49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray13 = huffmanTree0.expand_array(intArray9, (int) (short) 1);
        int[] intArray15 = new int[] { 4 };
        int int17 = huffmanTree0.search_for_value(intArray15, 4);
        HuffmanTree huffmanTree18 = new HuffmanTree();
        int[] intArray21 = new int[] { '4', (byte) 10 };
        int[] intArray23 = huffmanTree18.expand_array(intArray21, (-1));
        java.lang.Class<?> wildcardClass24 = huffmanTree18.getClass();
        HuffmanTree huffmanTree25 = new HuffmanTree();
        int[] intArray28 = new int[] { '4', (byte) 10 };
        int[] intArray30 = huffmanTree25.expand_array(intArray28, (-1));
        int[] intArray36 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int38 = huffmanTree25.search_for_value(intArray36, 0);
        int int40 = huffmanTree18.search_for_value(intArray36, 0);
        java.lang.Class<?> wildcardClass41 = huffmanTree18.getClass();
        java.lang.Class<?> wildcardClass42 = huffmanTree18.getClass();
        HuffmanTree huffmanTree43 = new HuffmanTree();
        HuffmanTree huffmanTree44 = new HuffmanTree();
        int[] intArray47 = new int[] { '4', (byte) 10 };
        int[] intArray49 = huffmanTree44.expand_array(intArray47, (-1));
        int int51 = huffmanTree43.search_for_value(intArray49, (int) (short) 10);
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray62 = new int[] { '4', '#', 0, 4 };
        int[] intArray64 = huffmanTree52.expand_array(intArray62, 0);
        HuffmanTree huffmanTree65 = new HuffmanTree();
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int int73 = huffmanTree65.search_for_value(intArray71, (int) (short) 10);
        java.lang.Class<?> wildcardClass74 = intArray71.getClass();
        int[] intArray75 = huffmanTree43.create_huffman_tree(intArray62, intArray71);
        java.lang.Class<?> wildcardClass76 = intArray71.getClass();
        java.lang.Class<?> wildcardClass77 = intArray71.getClass();
        int int79 = huffmanTree18.search_for_value(intArray71, (int) (byte) 10);
        java.lang.Class<?> wildcardClass80 = intArray71.getClass();
        int int82 = huffmanTree0.search_for_value(intArray71, (int) (byte) 10);
        java.lang.Class<?> wildcardClass83 = huffmanTree0.getClass();
        int[] intArray84 = null;
        try {
            int int86 = huffmanTree0.search_for_value(intArray84, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray34 = huffmanTree0.create_huffman_tree(intArray25, intArray31);
        java.lang.Class<?> wildcardClass35 = huffmanTree0.getClass();
        java.lang.Class<?> wildcardClass36 = huffmanTree0.getClass();
        HuffmanTree huffmanTree37 = new HuffmanTree();
        int[] intArray40 = new int[] { '4', (byte) 10 };
        int[] intArray42 = huffmanTree37.expand_array(intArray40, (-1));
        HuffmanTree huffmanTree43 = new HuffmanTree();
        int[] intArray46 = new int[] { '4', (byte) 10 };
        int[] intArray48 = huffmanTree43.expand_array(intArray46, (-1));
        int[] intArray50 = huffmanTree37.expand_array(intArray46, (int) (short) 1);
        java.lang.Class<?> wildcardClass51 = intArray46.getClass();
        int[] intArray53 = huffmanTree0.expand_array(intArray46, (int) (short) 1);
        HuffmanTree huffmanTree54 = new HuffmanTree();
        HuffmanTree huffmanTree55 = new HuffmanTree();
        int[] intArray58 = new int[] { '4', (byte) 10 };
        int[] intArray60 = huffmanTree55.expand_array(intArray58, (-1));
        int int62 = huffmanTree54.search_for_value(intArray60, (int) (short) 10);
        HuffmanTree huffmanTree63 = new HuffmanTree();
        int[] intArray66 = new int[] { '4', (byte) 10 };
        int[] intArray68 = huffmanTree63.expand_array(intArray66, (-1));
        int[] intArray73 = new int[] { '4', '#', 0, 4 };
        int[] intArray75 = huffmanTree63.expand_array(intArray73, 0);
        HuffmanTree huffmanTree76 = new HuffmanTree();
        HuffmanTree huffmanTree77 = new HuffmanTree();
        int[] intArray80 = new int[] { '4', (byte) 10 };
        int[] intArray82 = huffmanTree77.expand_array(intArray80, (-1));
        int int84 = huffmanTree76.search_for_value(intArray82, (int) (short) 10);
        java.lang.Class<?> wildcardClass85 = intArray82.getClass();
        int[] intArray86 = huffmanTree54.create_huffman_tree(intArray73, intArray82);
        java.lang.Class<?> wildcardClass87 = intArray73.getClass();
        int[] intArray89 = huffmanTree0.expand_array(intArray73, (-1));
        java.lang.Class<?> wildcardClass90 = intArray73.getClass();
        java.lang.Class<?> wildcardClass91 = intArray73.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        int[] intArray11 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int13 = huffmanTree0.search_for_value(intArray11, 0);
        HuffmanTree huffmanTree14 = new HuffmanTree();
        int[] intArray17 = new int[] { '4', (byte) 10 };
        int[] intArray19 = huffmanTree14.expand_array(intArray17, (-1));
        int[] intArray25 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int27 = huffmanTree14.search_for_value(intArray25, 0);
        HuffmanTree huffmanTree28 = new HuffmanTree();
        int[] intArray31 = new int[] { '4', (byte) 10 };
        int[] intArray33 = huffmanTree28.expand_array(intArray31, (-1));
        int[] intArray39 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int41 = huffmanTree28.search_for_value(intArray39, 0);
        HuffmanTree huffmanTree42 = new HuffmanTree();
        int[] intArray45 = new int[] { '4', (byte) 10 };
        int[] intArray47 = huffmanTree42.expand_array(intArray45, (-1));
        int[] intArray48 = huffmanTree14.create_huffman_tree(intArray39, intArray45);
        java.lang.Class<?> wildcardClass49 = huffmanTree14.getClass();
        java.lang.Class<?> wildcardClass50 = huffmanTree14.getClass();
        HuffmanTree huffmanTree51 = new HuffmanTree();
        int[] intArray54 = new int[] { '4', (byte) 10 };
        int[] intArray56 = huffmanTree51.expand_array(intArray54, (-1));
        HuffmanTree huffmanTree57 = new HuffmanTree();
        int[] intArray60 = new int[] { '4', (byte) 10 };
        int[] intArray62 = huffmanTree57.expand_array(intArray60, (-1));
        int[] intArray68 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int70 = huffmanTree57.search_for_value(intArray68, 0);
        HuffmanTree huffmanTree71 = new HuffmanTree();
        int[] intArray74 = new int[] { '4', (byte) 10 };
        int[] intArray76 = huffmanTree71.expand_array(intArray74, (-1));
        int[] intArray82 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int84 = huffmanTree71.search_for_value(intArray82, 0);
        HuffmanTree huffmanTree85 = new HuffmanTree();
        int[] intArray88 = new int[] { '4', (byte) 10 };
        int[] intArray90 = huffmanTree85.expand_array(intArray88, (-1));
        int[] intArray91 = huffmanTree57.create_huffman_tree(intArray82, intArray88);
        int[] intArray93 = huffmanTree51.expand_array(intArray82, (int) (byte) 1);
        int[] intArray95 = huffmanTree14.expand_array(intArray93, (-1));
        java.lang.Class<?> wildcardClass96 = intArray95.getClass();
        int[] intArray98 = huffmanTree0.expand_array(intArray95, 3);
        java.lang.Class<?> wildcardClass99 = intArray95.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        HuffmanTree huffmanTree0 = new HuffmanTree();
        int[] intArray3 = new int[] { '4', (byte) 10 };
        int[] intArray5 = huffmanTree0.expand_array(intArray3, (-1));
        HuffmanTree huffmanTree6 = new HuffmanTree();
        int[] intArray9 = new int[] { '4', (byte) 10 };
        int[] intArray11 = huffmanTree6.expand_array(intArray9, (-1));
        int[] intArray17 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int19 = huffmanTree6.search_for_value(intArray17, 0);
        HuffmanTree huffmanTree20 = new HuffmanTree();
        int[] intArray23 = new int[] { '4', (byte) 10 };
        int[] intArray25 = huffmanTree20.expand_array(intArray23, (-1));
        int[] intArray31 = new int[] { ' ', 'a', (byte) 100, (byte) 10, (short) 0 };
        int int33 = huffmanTree20.search_for_value(intArray31, 0);
        HuffmanTree huffmanTree34 = new HuffmanTree();
        int[] intArray37 = new int[] { '4', (byte) 10 };
        int[] intArray39 = huffmanTree34.expand_array(intArray37, (-1));
        int[] intArray40 = huffmanTree6.create_huffman_tree(intArray31, intArray37);
        int[] intArray42 = huffmanTree0.expand_array(intArray31, (int) (byte) 1);
        int[] intArray43 = null;
        int[] intArray45 = huffmanTree0.expand_array(intArray43, 1);
        HuffmanTree huffmanTree46 = new HuffmanTree();
        int[] intArray49 = new int[] { '4', (byte) 10 };
        int[] intArray51 = huffmanTree46.expand_array(intArray49, (-1));
        HuffmanTree huffmanTree52 = new HuffmanTree();
        int[] intArray55 = new int[] { '4', (byte) 10 };
        int[] intArray57 = huffmanTree52.expand_array(intArray55, (-1));
        int[] intArray59 = huffmanTree46.expand_array(intArray55, (int) (short) 1);
        int[] intArray60 = null;
        int[] intArray62 = huffmanTree46.expand_array(intArray60, (int) (short) 1);
        java.lang.Class<?> wildcardClass63 = huffmanTree46.getClass();
        HuffmanTree huffmanTree64 = new HuffmanTree();
        java.lang.Class<?> wildcardClass65 = huffmanTree64.getClass();
        HuffmanTree huffmanTree66 = new HuffmanTree();
        int[] intArray69 = new int[] { '4', (byte) 10 };
        int[] intArray71 = huffmanTree66.expand_array(intArray69, (-1));
        int[] intArray76 = new int[] { '4', '#', 0, 4 };
        int[] intArray78 = huffmanTree66.expand_array(intArray76, 0);
        java.lang.Class<?> wildcardClass79 = intArray78.getClass();
        int[] intArray81 = huffmanTree64.expand_array(intArray78, 1);
        java.lang.Class<?> wildcardClass82 = intArray81.getClass();
        int int84 = huffmanTree46.search_for_value(intArray81, 0);
        java.lang.Class<?> wildcardClass85 = intArray81.getClass();
        java.lang.Class<?> wildcardClass86 = intArray81.getClass();
        try {
            int[] intArray88 = huffmanTree0.expand_array(intArray81, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertNull(intArray45);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNull(intArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }
}

